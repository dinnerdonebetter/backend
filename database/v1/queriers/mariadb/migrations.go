package mariadb

import (
	"context"
	"database/sql"
	"errors"
	"strings"

	"github.com/GuiaBolso/darwin"
)

var (
	migrations = []darwin.Migration{
		{
			Version:     1,
			Description: "create users table",
			Script: strings.Join([]string{
				"CREATE TABLE IF NOT EXISTS users (",
				"    `id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,",
				"    `username` VARCHAR(150) NOT NULL,",
				"    `hashed_password` VARCHAR(100) NOT NULL,",
				"    `password_last_changed_on` INTEGER UNSIGNED,",
				"    `two_factor_secret` VARCHAR(256) NOT NULL,",
				"    `is_admin` BOOLEAN NOT NULL DEFAULT false,",
				"    `created_on` BIGINT UNSIGNED,",
				"    `updated_on` BIGINT UNSIGNED DEFAULT NULL,",
				"    `archived_on` BIGINT UNSIGNED DEFAULT NULL,",
				"    PRIMARY KEY (`id`),",
				"    UNIQUE (`username`)",
				");",
			}, "\n"),
		},
		{
			Version:     2,
			Description: "create users table creation trigger",
			Script: strings.Join([]string{
				"CREATE TRIGGER IF NOT EXISTS users_creation_trigger BEFORE INSERT ON users FOR EACH ROW",
				"BEGIN",
				"  IF (new.created_on is null)",
				"  THEN",
				"    SET new.created_on = UNIX_TIMESTAMP();",
				"  END IF;",
				"END;",
			}, "\n"),
		},
		{
			Version:     3,
			Description: "create oauth2_clients table",
			Script: strings.Join([]string{
				"CREATE TABLE IF NOT EXISTS oauth2_clients (",
				"    `id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,",
				"    `name` VARCHAR(128) DEFAULT '',",
				"    `client_id` VARCHAR(64) NOT NULL,",
				"    `client_secret` VARCHAR(64) NOT NULL,",
				"    `redirect_uri` VARCHAR(4096) DEFAULT '',",
				"    `scopes` VARCHAR(4096) NOT NULL,",
				"    `implicit_allowed` BOOLEAN NOT NULL DEFAULT false,",
				"    `created_on` BIGINT UNSIGNED,",
				"    `updated_on` BIGINT UNSIGNED DEFAULT NULL,",
				"    `archived_on` BIGINT UNSIGNED DEFAULT NULL,",
				"    `belongs_to` BIGINT UNSIGNED NOT NULL,",
				"    PRIMARY KEY (`id`),",
				"    FOREIGN KEY(`belongs_to`) REFERENCES users(`id`)",
				");",
			}, "\n"),
		},
		{
			Version:     4,
			Description: "create oauth2_clients table creation trigger",
			Script: strings.Join([]string{
				"CREATE TRIGGER IF NOT EXISTS oauth2_clients_creation_trigger BEFORE INSERT ON oauth2_clients FOR EACH ROW",
				"BEGIN",
				"  IF (new.created_on is null)",
				"  THEN",
				"    SET new.created_on = UNIX_TIMESTAMP();",
				"  END IF;",
				"END;",
			}, "\n"),
		},
		{
			Version:     5,
			Description: "create webhooks table",
			Script: strings.Join([]string{
				"CREATE TABLE IF NOT EXISTS webhooks (",
				"    `id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,",
				"    `name` VARCHAR(128) NOT NULL,",
				"    `content_type` VARCHAR(64) NOT NULL,",
				"    `url` VARCHAR(4096) NOT NULL,",
				"    `method` VARCHAR(32) NOT NULL,",
				"    `events` VARCHAR(256) NOT NULL,",
				"    `data_types` VARCHAR(256) NOT NULL,",
				"    `topics` VARCHAR(256) NOT NULL,",
				"    `created_on` BIGINT UNSIGNED,",
				"    `updated_on` BIGINT UNSIGNED DEFAULT NULL,",
				"    `archived_on` BIGINT UNSIGNED DEFAULT NULL,",
				"    `belongs_to` BIGINT UNSIGNED NOT NULL,",
				"    PRIMARY KEY (`id`),",
				"    FOREIGN KEY (`belongs_to`) REFERENCES users(`id`)",
				");",
			}, "\n"),
		},
		{
			Version:     6,
			Description: "create webhooks table creation trigger",
			Script: strings.Join([]string{
				"CREATE TRIGGER IF NOT EXISTS webhooks_creation_trigger BEFORE INSERT ON webhooks FOR EACH ROW",
				"BEGIN",
				"  IF (new.created_on is null)",
				"  THEN",
				"    SET new.created_on = UNIX_TIMESTAMP();",
				"  END IF;",
				"END;",
			}, "\n"),
		},
		{
			Version:     7,
			Description: "create instruments table",
			Script: strings.Join([]string{
				"CREATE TABLE IF NOT EXISTS instruments (",
				"    `id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,",
				"    `name` LONGTEXT NOT NULL,",
				"    `variant` LONGTEXT NOT NULL,",
				"    `description` LONGTEXT NOT NULL,",
				"    `icon` LONGTEXT NOT NULL,",
				"    `created_on` BIGINT UNSIGNED,",
				"    `updated_on` BIGINT UNSIGNED DEFAULT NULL,",
				"    `archived_on` BIGINT UNSIGNED DEFAULT NULL,",
				"    `belongs_to` BIGINT UNSIGNED NOT NULL,",
				"    PRIMARY KEY (`id`),",
				"    FOREIGN KEY (`belongs_to`) REFERENCES users(`id`)",
				");",
			}, "\n"),
		},
		{
			Version:     8,
			Description: "create instruments table creation trigger",
			Script: strings.Join([]string{
				"CREATE TRIGGER IF NOT EXISTS instruments_creation_trigger BEFORE INSERT ON instruments FOR EACH ROW",
				"BEGIN",
				"  IF (new.created_on is null)",
				"  THEN",
				"    SET new.created_on = UNIX_TIMESTAMP();",
				"  END IF;",
				"END;",
			}, "\n"),
		},
		{
			Version:     9,
			Description: "create ingredients table",
			Script: strings.Join([]string{
				"CREATE TABLE IF NOT EXISTS ingredients (",
				"    `id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,",
				"    `name` LONGTEXT NOT NULL,",
				"    `variant` LONGTEXT NOT NULL,",
				"    `description` LONGTEXT NOT NULL,",
				"    `warning` LONGTEXT NOT NULL,",
				"    `contains_egg` BOOLEAN NOT NULL,",
				"    `contains_dairy` BOOLEAN NOT NULL,",
				"    `contains_peanut` BOOLEAN NOT NULL,",
				"    `contains_tree_nut` BOOLEAN NOT NULL,",
				"    `contains_soy` BOOLEAN NOT NULL,",
				"    `contains_wheat` BOOLEAN NOT NULL,",
				"    `contains_shellfish` BOOLEAN NOT NULL,",
				"    `contains_sesame` BOOLEAN NOT NULL,",
				"    `contains_fish` BOOLEAN NOT NULL,",
				"    `contains_gluten` BOOLEAN NOT NULL,",
				"    `animal_flesh` BOOLEAN NOT NULL,",
				"    `animal_derived` BOOLEAN NOT NULL,",
				"    `considered_staple` BOOLEAN NOT NULL,",
				"    `icon` LONGTEXT NOT NULL,",
				"    `created_on` BIGINT UNSIGNED,",
				"    `updated_on` BIGINT UNSIGNED DEFAULT NULL,",
				"    `archived_on` BIGINT UNSIGNED DEFAULT NULL,",
				"    `belongs_to` BIGINT UNSIGNED NOT NULL,",
				"    PRIMARY KEY (`id`),",
				"    FOREIGN KEY (`belongs_to`) REFERENCES users(`id`)",
				");",
			}, "\n"),
		},
		{
			Version:     10,
			Description: "create ingredients table creation trigger",
			Script: strings.Join([]string{
				"CREATE TRIGGER IF NOT EXISTS ingredients_creation_trigger BEFORE INSERT ON ingredients FOR EACH ROW",
				"BEGIN",
				"  IF (new.created_on is null)",
				"  THEN",
				"    SET new.created_on = UNIX_TIMESTAMP();",
				"  END IF;",
				"END;",
			}, "\n"),
		},
		{
			Version:     11,
			Description: "create preparations table",
			Script: strings.Join([]string{
				"CREATE TABLE IF NOT EXISTS preparations (",
				"    `id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,",
				"    `name` LONGTEXT NOT NULL,",
				"    `variant` LONGTEXT NOT NULL,",
				"    `description` LONGTEXT NOT NULL,",
				"    `allergy_warning` LONGTEXT NOT NULL,",
				"    `icon` LONGTEXT NOT NULL,",
				"    `created_on` BIGINT UNSIGNED,",
				"    `updated_on` BIGINT UNSIGNED DEFAULT NULL,",
				"    `archived_on` BIGINT UNSIGNED DEFAULT NULL,",
				"    `belongs_to` BIGINT UNSIGNED NOT NULL,",
				"    PRIMARY KEY (`id`),",
				"    FOREIGN KEY (`belongs_to`) REFERENCES users(`id`)",
				");",
			}, "\n"),
		},
		{
			Version:     12,
			Description: "create preparations table creation trigger",
			Script: strings.Join([]string{
				"CREATE TRIGGER IF NOT EXISTS preparations_creation_trigger BEFORE INSERT ON preparations FOR EACH ROW",
				"BEGIN",
				"  IF (new.created_on is null)",
				"  THEN",
				"    SET new.created_on = UNIX_TIMESTAMP();",
				"  END IF;",
				"END;",
			}, "\n"),
		},
		{
			Version:     13,
			Description: "create required preparation instruments table",
			Script: strings.Join([]string{
				"CREATE TABLE IF NOT EXISTS required_preparation_instruments (",
				"    `id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,",
				"    `instrument_id` INTEGER UNSIGNED NOT NULL,",
				"    `preparation_id` INTEGER UNSIGNED NOT NULL,",
				"    `notes` LONGTEXT NOT NULL,",
				"    `created_on` BIGINT UNSIGNED,",
				"    `updated_on` BIGINT UNSIGNED DEFAULT NULL,",
				"    `archived_on` BIGINT UNSIGNED DEFAULT NULL,",
				"    `belongs_to` BIGINT UNSIGNED NOT NULL,",
				"    PRIMARY KEY (`id`),",
				"    FOREIGN KEY (`belongs_to`) REFERENCES users(`id`)",
				");",
			}, "\n"),
		},
		{
			Version:     14,
			Description: "create required preparation instruments table creation trigger",
			Script: strings.Join([]string{
				"CREATE TRIGGER IF NOT EXISTS required preparation instruments_creation_trigger BEFORE INSERT ON required preparation instruments FOR EACH ROW",
				"BEGIN",
				"  IF (new.created_on is null)",
				"  THEN",
				"    SET new.created_on = UNIX_TIMESTAMP();",
				"  END IF;",
				"END;",
			}, "\n"),
		},
		{
			Version:     15,
			Description: "create recipes table",
			Script: strings.Join([]string{
				"CREATE TABLE IF NOT EXISTS recipes (",
				"    `id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,",
				"    `name` LONGTEXT NOT NULL,",
				"    `source` LONGTEXT NOT NULL,",
				"    `description` LONGTEXT NOT NULL,",
				"    `inspired_by_recipe_id` INTEGER UNSIGNED,",
				"    `created_on` BIGINT UNSIGNED,",
				"    `updated_on` BIGINT UNSIGNED DEFAULT NULL,",
				"    `archived_on` BIGINT UNSIGNED DEFAULT NULL,",
				"    `belongs_to` BIGINT UNSIGNED NOT NULL,",
				"    PRIMARY KEY (`id`),",
				"    FOREIGN KEY (`belongs_to`) REFERENCES users(`id`)",
				");",
			}, "\n"),
		},
		{
			Version:     16,
			Description: "create recipes table creation trigger",
			Script: strings.Join([]string{
				"CREATE TRIGGER IF NOT EXISTS recipes_creation_trigger BEFORE INSERT ON recipes FOR EACH ROW",
				"BEGIN",
				"  IF (new.created_on is null)",
				"  THEN",
				"    SET new.created_on = UNIX_TIMESTAMP();",
				"  END IF;",
				"END;",
			}, "\n"),
		},
		{
			Version:     17,
			Description: "create recipe steps table",
			Script: strings.Join([]string{
				"CREATE TABLE IF NOT EXISTS recipe_steps (",
				"    `id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,",
				"    `index` INTEGER UNSIGNED NOT NULL,",
				"    `preparation_id` INTEGER UNSIGNED NOT NULL,",
				"    `prerequisite_step` INTEGER UNSIGNED NOT NULL,",
				"    `min_estimated_time_in_seconds` INTEGER UNSIGNED NOT NULL,",
				"    `max_estimated_time_in_seconds` INTEGER UNSIGNED NOT NULL,",
				"    `temperature_in_celsius` INTEGER UNSIGNED,",
				"    `notes` LONGTEXT NOT NULL,",
				"    `recipe_id` INTEGER UNSIGNED NOT NULL,",
				"    `created_on` BIGINT UNSIGNED,",
				"    `updated_on` BIGINT UNSIGNED DEFAULT NULL,",
				"    `archived_on` BIGINT UNSIGNED DEFAULT NULL,",
				"    `belongs_to` BIGINT UNSIGNED NOT NULL,",
				"    PRIMARY KEY (`id`),",
				"    FOREIGN KEY (`belongs_to`) REFERENCES users(`id`)",
				");",
			}, "\n"),
		},
		{
			Version:     18,
			Description: "create recipe steps table creation trigger",
			Script: strings.Join([]string{
				"CREATE TRIGGER IF NOT EXISTS recipe steps_creation_trigger BEFORE INSERT ON recipe steps FOR EACH ROW",
				"BEGIN",
				"  IF (new.created_on is null)",
				"  THEN",
				"    SET new.created_on = UNIX_TIMESTAMP();",
				"  END IF;",
				"END;",
			}, "\n"),
		},
		{
			Version:     19,
			Description: "create recipe step instruments table",
			Script: strings.Join([]string{
				"CREATE TABLE IF NOT EXISTS recipe_step_instruments (",
				"    `id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,",
				"    `instrument_id` INTEGER UNSIGNED,",
				"    `recipe_step_id` INTEGER UNSIGNED NOT NULL,",
				"    `notes` LONGTEXT NOT NULL,",
				"    `created_on` BIGINT UNSIGNED,",
				"    `updated_on` BIGINT UNSIGNED DEFAULT NULL,",
				"    `archived_on` BIGINT UNSIGNED DEFAULT NULL,",
				"    `belongs_to` BIGINT UNSIGNED NOT NULL,",
				"    PRIMARY KEY (`id`),",
				"    FOREIGN KEY (`belongs_to`) REFERENCES users(`id`)",
				");",
			}, "\n"),
		},
		{
			Version:     20,
			Description: "create recipe step instruments table creation trigger",
			Script: strings.Join([]string{
				"CREATE TRIGGER IF NOT EXISTS recipe step instruments_creation_trigger BEFORE INSERT ON recipe step instruments FOR EACH ROW",
				"BEGIN",
				"  IF (new.created_on is null)",
				"  THEN",
				"    SET new.created_on = UNIX_TIMESTAMP();",
				"  END IF;",
				"END;",
			}, "\n"),
		},
		{
			Version:     21,
			Description: "create recipe step ingredients table",
			Script: strings.Join([]string{
				"CREATE TABLE IF NOT EXISTS recipe_step_ingredients (",
				"    `id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,",
				"    `ingredient_id` INTEGER UNSIGNED,",
				"    `quantity_type` LONGTEXT NOT NULL,",
				"    `quantity_value` DOUBLE PRECISION NOT NULL,",
				"    `quantity_notes` LONGTEXT NOT NULL,",
				"    `product_of_recipe` BOOLEAN NOT NULL,",
				"    `ingredient_notes` LONGTEXT NOT NULL,",
				"    `recipe_step_id` INTEGER UNSIGNED NOT NULL,",
				"    `created_on` BIGINT UNSIGNED,",
				"    `updated_on` BIGINT UNSIGNED DEFAULT NULL,",
				"    `archived_on` BIGINT UNSIGNED DEFAULT NULL,",
				"    `belongs_to` BIGINT UNSIGNED NOT NULL,",
				"    PRIMARY KEY (`id`),",
				"    FOREIGN KEY (`belongs_to`) REFERENCES users(`id`)",
				");",
			}, "\n"),
		},
		{
			Version:     22,
			Description: "create recipe step ingredients table creation trigger",
			Script: strings.Join([]string{
				"CREATE TRIGGER IF NOT EXISTS recipe step ingredients_creation_trigger BEFORE INSERT ON recipe step ingredients FOR EACH ROW",
				"BEGIN",
				"  IF (new.created_on is null)",
				"  THEN",
				"    SET new.created_on = UNIX_TIMESTAMP();",
				"  END IF;",
				"END;",
			}, "\n"),
		},
		{
			Version:     23,
			Description: "create recipe step products table",
			Script: strings.Join([]string{
				"CREATE TABLE IF NOT EXISTS recipe_step_products (",
				"    `id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,",
				"    `name` LONGTEXT NOT NULL,",
				"    `recipe_step_id` INTEGER UNSIGNED NOT NULL,",
				"    `created_on` BIGINT UNSIGNED,",
				"    `updated_on` BIGINT UNSIGNED DEFAULT NULL,",
				"    `archived_on` BIGINT UNSIGNED DEFAULT NULL,",
				"    `belongs_to` BIGINT UNSIGNED NOT NULL,",
				"    PRIMARY KEY (`id`),",
				"    FOREIGN KEY (`belongs_to`) REFERENCES users(`id`)",
				");",
			}, "\n"),
		},
		{
			Version:     24,
			Description: "create recipe step products table creation trigger",
			Script: strings.Join([]string{
				"CREATE TRIGGER IF NOT EXISTS recipe step products_creation_trigger BEFORE INSERT ON recipe step products FOR EACH ROW",
				"BEGIN",
				"  IF (new.created_on is null)",
				"  THEN",
				"    SET new.created_on = UNIX_TIMESTAMP();",
				"  END IF;",
				"END;",
			}, "\n"),
		},
		{
			Version:     25,
			Description: "create recipe iterations table",
			Script: strings.Join([]string{
				"CREATE TABLE IF NOT EXISTS recipe_iterations (",
				"    `id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,",
				"    `recipe_id` INTEGER UNSIGNED NOT NULL,",
				"    `end_difficulty_rating` DOUBLE PRECISION NOT NULL,",
				"    `end_complexity_rating` DOUBLE PRECISION NOT NULL,",
				"    `end_taste_rating` DOUBLE PRECISION NOT NULL,",
				"    `end_overall_rating` DOUBLE PRECISION NOT NULL,",
				"    `created_on` BIGINT UNSIGNED,",
				"    `updated_on` BIGINT UNSIGNED DEFAULT NULL,",
				"    `archived_on` BIGINT UNSIGNED DEFAULT NULL,",
				"    `belongs_to` BIGINT UNSIGNED NOT NULL,",
				"    PRIMARY KEY (`id`),",
				"    FOREIGN KEY (`belongs_to`) REFERENCES users(`id`)",
				");",
			}, "\n"),
		},
		{
			Version:     26,
			Description: "create recipe iterations table creation trigger",
			Script: strings.Join([]string{
				"CREATE TRIGGER IF NOT EXISTS recipe iterations_creation_trigger BEFORE INSERT ON recipe iterations FOR EACH ROW",
				"BEGIN",
				"  IF (new.created_on is null)",
				"  THEN",
				"    SET new.created_on = UNIX_TIMESTAMP();",
				"  END IF;",
				"END;",
			}, "\n"),
		},
		{
			Version:     27,
			Description: "create recipe step events table",
			Script: strings.Join([]string{
				"CREATE TABLE IF NOT EXISTS recipe_step_events (",
				"    `id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,",
				"    `event_type` LONGTEXT NOT NULL,",
				"    `done` BOOLEAN NOT NULL,",
				"    `recipe_iteration_id` INTEGER UNSIGNED NOT NULL,",
				"    `recipe_step_id` INTEGER UNSIGNED NOT NULL,",
				"    `created_on` BIGINT UNSIGNED,",
				"    `updated_on` BIGINT UNSIGNED DEFAULT NULL,",
				"    `archived_on` BIGINT UNSIGNED DEFAULT NULL,",
				"    `belongs_to` BIGINT UNSIGNED NOT NULL,",
				"    PRIMARY KEY (`id`),",
				"    FOREIGN KEY (`belongs_to`) REFERENCES users(`id`)",
				");",
			}, "\n"),
		},
		{
			Version:     28,
			Description: "create recipe step events table creation trigger",
			Script: strings.Join([]string{
				"CREATE TRIGGER IF NOT EXISTS recipe step events_creation_trigger BEFORE INSERT ON recipe step events FOR EACH ROW",
				"BEGIN",
				"  IF (new.created_on is null)",
				"  THEN",
				"    SET new.created_on = UNIX_TIMESTAMP();",
				"  END IF;",
				"END;",
			}, "\n"),
		},
		{
			Version:     29,
			Description: "create iteration medias table",
			Script: strings.Join([]string{
				"CREATE TABLE IF NOT EXISTS iteration_medias (",
				"    `id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,",
				"    `path` LONGTEXT NOT NULL,",
				"    `mimetype` LONGTEXT NOT NULL,",
				"    `recipe_iteration_id` INTEGER UNSIGNED NOT NULL,",
				"    `recipe_step_id` INTEGER UNSIGNED,",
				"    `created_on` BIGINT UNSIGNED,",
				"    `updated_on` BIGINT UNSIGNED DEFAULT NULL,",
				"    `archived_on` BIGINT UNSIGNED DEFAULT NULL,",
				"    `belongs_to` BIGINT UNSIGNED NOT NULL,",
				"    PRIMARY KEY (`id`),",
				"    FOREIGN KEY (`belongs_to`) REFERENCES users(`id`)",
				");",
			}, "\n"),
		},
		{
			Version:     30,
			Description: "create iteration medias table creation trigger",
			Script: strings.Join([]string{
				"CREATE TRIGGER IF NOT EXISTS iteration medias_creation_trigger BEFORE INSERT ON iteration medias FOR EACH ROW",
				"BEGIN",
				"  IF (new.created_on is null)",
				"  THEN",
				"    SET new.created_on = UNIX_TIMESTAMP();",
				"  END IF;",
				"END;",
			}, "\n"),
		},
		{
			Version:     31,
			Description: "create invitations table",
			Script: strings.Join([]string{
				"CREATE TABLE IF NOT EXISTS invitations (",
				"    `id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,",
				"    `code` LONGTEXT NOT NULL,",
				"    `consumed` BOOLEAN NOT NULL,",
				"    `created_on` BIGINT UNSIGNED,",
				"    `updated_on` BIGINT UNSIGNED DEFAULT NULL,",
				"    `archived_on` BIGINT UNSIGNED DEFAULT NULL,",
				"    `belongs_to` BIGINT UNSIGNED NOT NULL,",
				"    PRIMARY KEY (`id`),",
				"    FOREIGN KEY (`belongs_to`) REFERENCES users(`id`)",
				");",
			}, "\n"),
		},
		{
			Version:     32,
			Description: "create invitations table creation trigger",
			Script: strings.Join([]string{
				"CREATE TRIGGER IF NOT EXISTS invitations_creation_trigger BEFORE INSERT ON invitations FOR EACH ROW",
				"BEGIN",
				"  IF (new.created_on is null)",
				"  THEN",
				"    SET new.created_on = UNIX_TIMESTAMP();",
				"  END IF;",
				"END;",
			}, "\n"),
		},
		{
			Version:     33,
			Description: "create reports table",
			Script: strings.Join([]string{
				"CREATE TABLE IF NOT EXISTS reports (",
				"    `id` BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,",
				"    `report_type` LONGTEXT NOT NULL,",
				"    `concern` LONGTEXT NOT NULL,",
				"    `created_on` BIGINT UNSIGNED,",
				"    `updated_on` BIGINT UNSIGNED DEFAULT NULL,",
				"    `archived_on` BIGINT UNSIGNED DEFAULT NULL,",
				"    `belongs_to` BIGINT UNSIGNED NOT NULL,",
				"    PRIMARY KEY (`id`),",
				"    FOREIGN KEY (`belongs_to`) REFERENCES users(`id`)",
				");",
			}, "\n"),
		},
		{
			Version:     34,
			Description: "create reports table creation trigger",
			Script: strings.Join([]string{
				"CREATE TRIGGER IF NOT EXISTS reports_creation_trigger BEFORE INSERT ON reports FOR EACH ROW",
				"BEGIN",
				"  IF (new.created_on is null)",
				"  THEN",
				"    SET new.created_on = UNIX_TIMESTAMP();",
				"  END IF;",
				"END;",
			}, "\n"),
		},
	}
)

// buildMigrationFunc returns a sync.Once compatible function closure that will
// migrate a maria DB database
func buildMigrationFunc(db *sql.DB) func() {
	return func() {
		driver := darwin.NewGenericDriver(db, darwin.MySQLDialect{})
		if err := darwin.New(driver, migrations, nil).Migrate(); err != nil {
			panic(err)
		}
	}
}

// Migrate migrates the database. It does so by invoking the migrateOnce function via sync.Once, so it should be
// safe (as in idempotent, though not necessarily recommended) to call this function multiple times.
func (m *MariaDB) Migrate(ctx context.Context) error {
	m.logger.Info("migrating db")
	if !m.IsReady(ctx) {
		return errors.New("db is not ready yet")
	}

	m.migrateOnce.Do(buildMigrationFunc(m.db))

	return nil
}
