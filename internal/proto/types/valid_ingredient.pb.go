// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: valid_ingredient.proto

package types

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ValidIngredient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedAt                               *timestamp.Timestamp `protobuf:"bytes,1,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	LastUpdatedAt                           *timestamp.Timestamp `protobuf:"bytes,2,opt,name=LastUpdatedAt,proto3,oneof" json:"LastUpdatedAt,omitempty"`
	ArchivedAt                              *timestamp.Timestamp `protobuf:"bytes,3,opt,name=ArchivedAt,proto3,oneof" json:"ArchivedAt,omitempty"`
	MaximumIdealStorageTemperatureInCelsius *float64             `protobuf:"fixed64,4,opt,name=MaximumIdealStorageTemperatureInCelsius,proto3,oneof" json:"MaximumIdealStorageTemperatureInCelsius,omitempty"`
	MinimumIdealStorageTemperatureInCelsius *float64             `protobuf:"fixed64,5,opt,name=MinimumIdealStorageTemperatureInCelsius,proto3,oneof" json:"MinimumIdealStorageTemperatureInCelsius,omitempty"`
	IconPath                                string               `protobuf:"bytes,6,opt,name=IconPath,proto3" json:"IconPath,omitempty"`
	Warning                                 string               `protobuf:"bytes,7,opt,name=Warning,proto3" json:"Warning,omitempty"`
	PluralName                              string               `protobuf:"bytes,8,opt,name=PluralName,proto3" json:"PluralName,omitempty"`
	StorageInstructions                     string               `protobuf:"bytes,9,opt,name=StorageInstructions,proto3" json:"StorageInstructions,omitempty"`
	Name                                    string               `protobuf:"bytes,10,opt,name=Name,proto3" json:"Name,omitempty"`
	ID                                      string               `protobuf:"bytes,11,opt,name=ID,proto3" json:"ID,omitempty"`
	Description                             string               `protobuf:"bytes,12,opt,name=Description,proto3" json:"Description,omitempty"`
	Slug                                    string               `protobuf:"bytes,13,opt,name=Slug,proto3" json:"Slug,omitempty"`
	ShoppingSuggestions                     string               `protobuf:"bytes,14,opt,name=ShoppingSuggestions,proto3" json:"ShoppingSuggestions,omitempty"`
	ContainsShellfish                       bool                 `protobuf:"varint,15,opt,name=ContainsShellfish,proto3" json:"ContainsShellfish,omitempty"`
	IsMeasuredVolumetrically                bool                 `protobuf:"varint,16,opt,name=IsMeasuredVolumetrically,proto3" json:"IsMeasuredVolumetrically,omitempty"`
	IsLiquid                                bool                 `protobuf:"varint,17,opt,name=IsLiquid,proto3" json:"IsLiquid,omitempty"`
	ContainsPeanut                          bool                 `protobuf:"varint,18,opt,name=ContainsPeanut,proto3" json:"ContainsPeanut,omitempty"`
	ContainsTreeNut                         bool                 `protobuf:"varint,19,opt,name=ContainsTreeNut,proto3" json:"ContainsTreeNut,omitempty"`
	ContainsEgg                             bool                 `protobuf:"varint,20,opt,name=ContainsEgg,proto3" json:"ContainsEgg,omitempty"`
	ContainsWheat                           bool                 `protobuf:"varint,21,opt,name=ContainsWheat,proto3" json:"ContainsWheat,omitempty"`
	ContainsSoy                             bool                 `protobuf:"varint,22,opt,name=ContainsSoy,proto3" json:"ContainsSoy,omitempty"`
	AnimalDerived                           bool                 `protobuf:"varint,23,opt,name=AnimalDerived,proto3" json:"AnimalDerived,omitempty"`
	RestrictToPreparations                  bool                 `protobuf:"varint,24,opt,name=RestrictToPreparations,proto3" json:"RestrictToPreparations,omitempty"`
	ContainsSesame                          bool                 `protobuf:"varint,25,opt,name=ContainsSesame,proto3" json:"ContainsSesame,omitempty"`
	ContainsFish                            bool                 `protobuf:"varint,26,opt,name=ContainsFish,proto3" json:"ContainsFish,omitempty"`
	ContainsGluten                          bool                 `protobuf:"varint,27,opt,name=ContainsGluten,proto3" json:"ContainsGluten,omitempty"`
	ContainsDairy                           bool                 `protobuf:"varint,28,opt,name=ContainsDairy,proto3" json:"ContainsDairy,omitempty"`
	ContainsAlcohol                         bool                 `protobuf:"varint,29,opt,name=ContainsAlcohol,proto3" json:"ContainsAlcohol,omitempty"`
	AnimalFlesh                             bool                 `protobuf:"varint,30,opt,name=AnimalFlesh,proto3" json:"AnimalFlesh,omitempty"`
	IsStarch                                bool                 `protobuf:"varint,31,opt,name=IsStarch,proto3" json:"IsStarch,omitempty"`
	IsProtein                               bool                 `protobuf:"varint,32,opt,name=IsProtein,proto3" json:"IsProtein,omitempty"`
	IsGrain                                 bool                 `protobuf:"varint,33,opt,name=IsGrain,proto3" json:"IsGrain,omitempty"`
	IsFruit                                 bool                 `protobuf:"varint,34,opt,name=IsFruit,proto3" json:"IsFruit,omitempty"`
	IsSalt                                  bool                 `protobuf:"varint,35,opt,name=IsSalt,proto3" json:"IsSalt,omitempty"`
	IsFat                                   bool                 `protobuf:"varint,36,opt,name=IsFat,proto3" json:"IsFat,omitempty"`
	IsAcid                                  bool                 `protobuf:"varint,37,opt,name=IsAcid,proto3" json:"IsAcid,omitempty"`
	IsHeat                                  bool                 `protobuf:"varint,38,opt,name=IsHeat,proto3" json:"IsHeat,omitempty"`
}

func (x *ValidIngredient) Reset() {
	*x = ValidIngredient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_valid_ingredient_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidIngredient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIngredient) ProtoMessage() {}

func (x *ValidIngredient) ProtoReflect() protoreflect.Message {
	mi := &file_valid_ingredient_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIngredient.ProtoReflect.Descriptor instead.
func (*ValidIngredient) Descriptor() ([]byte, []int) {
	return file_valid_ingredient_proto_rawDescGZIP(), []int{0}
}

func (x *ValidIngredient) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ValidIngredient) GetLastUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *ValidIngredient) GetArchivedAt() *timestamp.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *ValidIngredient) GetMaximumIdealStorageTemperatureInCelsius() float64 {
	if x != nil && x.MaximumIdealStorageTemperatureInCelsius != nil {
		return *x.MaximumIdealStorageTemperatureInCelsius
	}
	return 0
}

func (x *ValidIngredient) GetMinimumIdealStorageTemperatureInCelsius() float64 {
	if x != nil && x.MinimumIdealStorageTemperatureInCelsius != nil {
		return *x.MinimumIdealStorageTemperatureInCelsius
	}
	return 0
}

func (x *ValidIngredient) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *ValidIngredient) GetWarning() string {
	if x != nil {
		return x.Warning
	}
	return ""
}

func (x *ValidIngredient) GetPluralName() string {
	if x != nil {
		return x.PluralName
	}
	return ""
}

func (x *ValidIngredient) GetStorageInstructions() string {
	if x != nil {
		return x.StorageInstructions
	}
	return ""
}

func (x *ValidIngredient) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidIngredient) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ValidIngredient) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ValidIngredient) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ValidIngredient) GetShoppingSuggestions() string {
	if x != nil {
		return x.ShoppingSuggestions
	}
	return ""
}

func (x *ValidIngredient) GetContainsShellfish() bool {
	if x != nil {
		return x.ContainsShellfish
	}
	return false
}

func (x *ValidIngredient) GetIsMeasuredVolumetrically() bool {
	if x != nil {
		return x.IsMeasuredVolumetrically
	}
	return false
}

func (x *ValidIngredient) GetIsLiquid() bool {
	if x != nil {
		return x.IsLiquid
	}
	return false
}

func (x *ValidIngredient) GetContainsPeanut() bool {
	if x != nil {
		return x.ContainsPeanut
	}
	return false
}

func (x *ValidIngredient) GetContainsTreeNut() bool {
	if x != nil {
		return x.ContainsTreeNut
	}
	return false
}

func (x *ValidIngredient) GetContainsEgg() bool {
	if x != nil {
		return x.ContainsEgg
	}
	return false
}

func (x *ValidIngredient) GetContainsWheat() bool {
	if x != nil {
		return x.ContainsWheat
	}
	return false
}

func (x *ValidIngredient) GetContainsSoy() bool {
	if x != nil {
		return x.ContainsSoy
	}
	return false
}

func (x *ValidIngredient) GetAnimalDerived() bool {
	if x != nil {
		return x.AnimalDerived
	}
	return false
}

func (x *ValidIngredient) GetRestrictToPreparations() bool {
	if x != nil {
		return x.RestrictToPreparations
	}
	return false
}

func (x *ValidIngredient) GetContainsSesame() bool {
	if x != nil {
		return x.ContainsSesame
	}
	return false
}

func (x *ValidIngredient) GetContainsFish() bool {
	if x != nil {
		return x.ContainsFish
	}
	return false
}

func (x *ValidIngredient) GetContainsGluten() bool {
	if x != nil {
		return x.ContainsGluten
	}
	return false
}

func (x *ValidIngredient) GetContainsDairy() bool {
	if x != nil {
		return x.ContainsDairy
	}
	return false
}

func (x *ValidIngredient) GetContainsAlcohol() bool {
	if x != nil {
		return x.ContainsAlcohol
	}
	return false
}

func (x *ValidIngredient) GetAnimalFlesh() bool {
	if x != nil {
		return x.AnimalFlesh
	}
	return false
}

func (x *ValidIngredient) GetIsStarch() bool {
	if x != nil {
		return x.IsStarch
	}
	return false
}

func (x *ValidIngredient) GetIsProtein() bool {
	if x != nil {
		return x.IsProtein
	}
	return false
}

func (x *ValidIngredient) GetIsGrain() bool {
	if x != nil {
		return x.IsGrain
	}
	return false
}

func (x *ValidIngredient) GetIsFruit() bool {
	if x != nil {
		return x.IsFruit
	}
	return false
}

func (x *ValidIngredient) GetIsSalt() bool {
	if x != nil {
		return x.IsSalt
	}
	return false
}

func (x *ValidIngredient) GetIsFat() bool {
	if x != nil {
		return x.IsFat
	}
	return false
}

func (x *ValidIngredient) GetIsAcid() bool {
	if x != nil {
		return x.IsAcid
	}
	return false
}

func (x *ValidIngredient) GetIsHeat() bool {
	if x != nil {
		return x.IsHeat
	}
	return false
}

type GetValidIngredientRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetValidIngredientRequest) Reset() {
	*x = GetValidIngredientRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_valid_ingredient_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValidIngredientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientRequest) ProtoMessage() {}

func (x *GetValidIngredientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_valid_ingredient_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientRequest.ProtoReflect.Descriptor instead.
func (*GetValidIngredientRequest) Descriptor() ([]byte, []int) {
	return file_valid_ingredient_proto_rawDescGZIP(), []int{1}
}

func (x *GetValidIngredientRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_valid_ingredient_proto protoreflect.FileDescriptor

var file_valid_ingredient_proto_rawDesc = []byte{
	0x0a, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x64, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x64, 0x6f, 0x6e, 0x65, 0x62, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf0, 0x0c, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x45, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0a, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x0a, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x5d, 0x0a, 0x27, 0x4d, 0x61,
	0x78, 0x69, 0x6d, 0x75, 0x6d, 0x49, 0x64, 0x65, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x43, 0x65,
	0x6c, 0x73, 0x69, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x27, 0x4d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x49, 0x64, 0x65, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x43,
	0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x5d, 0x0a, 0x27, 0x4d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x49, 0x64, 0x65, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x43, 0x65, 0x6c,
	0x73, 0x69, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x27, 0x4d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x49, 0x64, 0x65, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x43, 0x65,
	0x6c, 0x73, 0x69, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1e,
	0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30,
	0x0a, 0x13, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x68,
	0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x11,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x66, 0x69, 0x73,
	0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x73, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x66, 0x69, 0x73, 0x68, 0x12, 0x3a, 0x0a, 0x18, 0x49, 0x73,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x49, 0x73,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x4c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x4c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x50, 0x65,
	0x61, 0x6e, 0x75, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x73, 0x50, 0x65, 0x61, 0x6e, 0x75, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x75, 0x74, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x54, 0x72, 0x65,
	0x65, 0x4e, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73,
	0x45, 0x67, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x73, 0x45, 0x67, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x73, 0x57, 0x68, 0x65, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x57, 0x68, 0x65, 0x61, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x53, 0x6f, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x53, 0x6f, 0x79, 0x12, 0x24,
	0x0a, 0x0d, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x44, 0x65, 0x72,
	0x69, 0x76, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x54, 0x6f, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x54, 0x6f,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x53, 0x65, 0x73, 0x61, 0x6d, 0x65, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x53, 0x65,
	0x73, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73,
	0x46, 0x69, 0x73, 0x68, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x73, 0x46, 0x69, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x73, 0x47, 0x6c, 0x75, 0x74, 0x65, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x47, 0x6c, 0x75, 0x74, 0x65, 0x6e,
	0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x44, 0x61, 0x69, 0x72,
	0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x73, 0x44, 0x61, 0x69, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x73, 0x41, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x41, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c,
	0x12, 0x20, 0x0a, 0x0b, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x46, 0x6c, 0x65, 0x73, 0x68, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x46, 0x6c, 0x65,
	0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x53, 0x74, 0x61, 0x72, 0x63, 0x68, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x53, 0x74, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1c,
	0x0a, 0x09, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x49, 0x73, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49,
	0x73, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x46, 0x72, 0x75, 0x69,
	0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x46, 0x72, 0x75, 0x69, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x53, 0x61, 0x6c, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x49, 0x73, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x46, 0x61,
	0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x46, 0x61, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x49, 0x73, 0x41, 0x63, 0x69, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x49, 0x73, 0x41, 0x63, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x48, 0x65, 0x61, 0x74,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x48, 0x65, 0x61, 0x74, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x42,
	0x2a, 0x0a, 0x28, 0x5f, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x49, 0x64, 0x65, 0x61, 0x6c,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x49, 0x6e, 0x43, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x42, 0x2a, 0x0a, 0x28, 0x5f,
	0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x49, 0x64, 0x65, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e,
	0x43, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x22, 0x2b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x64, 0x6f, 0x6e, 0x65, 0x62, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_valid_ingredient_proto_rawDescOnce sync.Once
	file_valid_ingredient_proto_rawDescData = file_valid_ingredient_proto_rawDesc
)

func file_valid_ingredient_proto_rawDescGZIP() []byte {
	file_valid_ingredient_proto_rawDescOnce.Do(func() {
		file_valid_ingredient_proto_rawDescData = protoimpl.X.CompressGZIP(file_valid_ingredient_proto_rawDescData)
	})
	return file_valid_ingredient_proto_rawDescData
}

var file_valid_ingredient_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_valid_ingredient_proto_goTypes = []interface{}{
	(*ValidIngredient)(nil),           // 0: dinnerdonebetter.protobuf.ValidIngredient
	(*GetValidIngredientRequest)(nil), // 1: dinnerdonebetter.protobuf.GetValidIngredientRequest
	(*timestamp.Timestamp)(nil),       // 2: google.protobuf.Timestamp
}
var file_valid_ingredient_proto_depIdxs = []int32{
	2, // 0: dinnerdonebetter.protobuf.ValidIngredient.CreatedAt:type_name -> google.protobuf.Timestamp
	2, // 1: dinnerdonebetter.protobuf.ValidIngredient.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	2, // 2: dinnerdonebetter.protobuf.ValidIngredient.ArchivedAt:type_name -> google.protobuf.Timestamp
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_valid_ingredient_proto_init() }
func file_valid_ingredient_proto_init() {
	if File_valid_ingredient_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_valid_ingredient_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidIngredient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_valid_ingredient_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetValidIngredientRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_valid_ingredient_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_valid_ingredient_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_valid_ingredient_proto_goTypes,
		DependencyIndexes: file_valid_ingredient_proto_depIdxs,
		MessageInfos:      file_valid_ingredient_proto_msgTypes,
	}.Build()
	File_valid_ingredient_proto = out.File
	file_valid_ingredient_proto_rawDesc = nil
	file_valid_ingredient_proto_goTypes = nil
	file_valid_ingredient_proto_depIdxs = nil
}
