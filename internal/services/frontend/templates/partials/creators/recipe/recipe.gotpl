<div id="content" class="">
    <div class="col-md-8 order-md-1">
        <div class="mb3" id="recipeBuilder" style="display: block;">
            <div class="input-group">
                <label for="recipeNameInput">Name:</label>
                <input
                        id="recipeNameInput"
                        class="recipe_name_input"
                        type="text"
                        v-model="recipeName"
                />
                <label for="recipeDescriptionInput">Description:</label>
                <input
                        id="recipeDescriptionInput"
                        class="recipe_description_input"
                        type="text"
                        v-model="recipeDescription"
                />
            </div>
                <button @click="addStep">Add Step</button>
                <div class="recipe_steps">
                    <div v-for="(step, stepIndex) in recipeSteps">
                        <label>Preparation:</label>
                        <input
                                class="recipe_step_preparation_input"
                                type="text"
                                :list="validPreparationSuggestionListID(stepIndex)"
                                @keyup="queryForValidPreparation(stepIndex)"
                                v-model="step.preparationQuery"
                        />
                        <ul :id="validPreparationSuggestionListID(stepIndex)">
                            <div v-for="(suggestion, suggestionIndex) in step.preparationSuggestions" @click="selectValidPreparationSuggestion(stepIndex, suggestion)">{%{ suggestion.name }%}</div>
                        </ul>

                        <label>Why:</label>
                        <input class="recipe_step_why_input" type="text" v-model="step.why" />

                        <label>Notes:</label>
                        <input class="recipe_step_notes_input" type="text" v-model="step.notes" />

                        <button @click="addIngredient(stepIndex)">Add Ingredient</button>
                        <label>Ingredients:</label>
                        <div class="recipe_step_ingredients">
                            <div v-for="(ingredient, ingredientIndex) in step.ingredients">
                                <label>Name:</label>
                                <input
                                        class="recipe_step_ingredient_input"
                                        type="text"
                                        :list="validIngredientSuggestionListID(stepIndex, ingredientIndex)"
                                        @keyup="queryForValidIngredient(stepIndex, ingredientIndex)"
                                        v-model="ingredient.nameQuery"
                                />
                                <ul :id="validIngredientSuggestionListID(stepIndex, ingredientIndex)">
                                    <div v-for="(suggestion, suggestionIndex) in ingredient.validIngredientSuggestions" @click="selectValidIngredientSuggestion(stepIndex, ingredientIndex, suggestion)">{%{ suggestion.name }%}, {%{ suggestion.variant }%}</div>
                                </ul>

                                <label>Quantity:</label>
                                <input class="ingredient_name_input" type="number" v-model="ingredient.quantityValue" />

                                <label>Type:</label>
                                <select v-model="ingredient.quantityType">
                                    <option>grams</option>
                                    <option>fl. oz.</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
                <button @click="submitRecipe">Save</button>
        </div>
    </div>
    <script>
        class RecipeStepIngredient {
            constructor() {
                this.nameQuery = "";
                this.ingredientID = 0;
                this.validIngredientSuggestions = [];

                this.quantityType = "";
                this.quantityValue = 0;
                this.quantityNotes = "";
            }

            json() {
                return {
                    ingredientID: this.ingredientID,
                    quantityType : this.quantityType,
                    quantityValue: Number(this.quantityValue),
                    quantityNotes: this.quantityNotes,
                }
            }
        }

        class RecipeStep {
            constructor() {
                this.preparationQuery = '';
                this.preparationID = 0;
                this.preparationSuggestions = [];

                this.notes = '';
                this.why = '';
                this.minTimeInSeconds = 0;
                this.maxTimeInSeconds = 0;

                this.ingredients = [];
            }

            json() {
                return {
                    why: this.why,
                    notes: this.notes,
                    preparationID: this.preparationID,
                    minTimeInSeconds: this.minTimeInSeconds,
                    maxTimeInSeconds: this.maxTimeInSeconds,
                    ingredients: this.ingredients.map((ingredient) => ingredient.json()),
                }
            }
        }

        class Recipe {
            constructor() {
                this.name = "";
                this.description = "";

                this.steps = [];
            }
        }

        const RecipeBuilder = {
            data() {
                return {
                    recipeName: "",
                    recipeDescription: "",
                    recipeSteps: [],
                };
            },
            methods: {
                addStep() {
                    this.recipeSteps.push(new RecipeStep());
                    console.log(`Step added!`);
                },
                addIngredient(stepIndex) {
                    let ingredient = new RecipeStepIngredient();
                    this.recipeSteps[stepIndex].ingredients.push(ingredient);
                    console.log(`Ingredient added!`);
                },
                validPreparationSuggestionListID(stepIndex) {
                    return `recipeStep_${stepIndex}_ValidPreparationSuggestions`;
                },
                queryForValidPreparation(stepIndex) {
                    let step = this.recipeSteps[stepIndex];
                    let query = step.preparationQuery.trim();
                    const searchURL = `/api/v1/valid_preparations/search?q=${encodeURIComponent(query)}`;

                    if (query.length > 1) {
                        let xmlHttp = new XMLHttpRequest();
                        xmlHttp.onreadystatechange = function() {
                            if (xmlHttp.readyState === 4 && xmlHttp.status === 200) {
                                step.preparationSuggestions = JSON.parse(xmlHttp.responseText);
                            }
                        }
                        xmlHttp.open("GET", searchURL, true);
                        xmlHttp.send(null);
                    }
                },
                selectValidPreparationSuggestion(stepIndex, selection) {
                    let step = this.recipeSteps[stepIndex];
                    step.preparationID = selection.id;
                    step.preparationQuery = selection.name;
                    step.preparationSuggestions = [];
                },
                validIngredientSuggestionListID(stepIndex, ingredientIndex) {
                    return `recipeStep_${stepIndex}_ValidIngredient_${ingredientIndex}_Suggestions`;
                },
                queryForValidIngredient(stepIndex, ingredientIndex) {
                    let ingredient = this.recipeSteps[stepIndex].ingredients[ingredientIndex];
                    let query = ingredient.nameQuery.trim();
                    const searchURL = `/api/v1/valid_ingredients/search?q=${encodeURIComponent(query)}`;

                    if (query.length > 1) {
                        let xmlHttp = new XMLHttpRequest();
                        xmlHttp.onreadystatechange = function() {
                            if (xmlHttp.readyState === 4 && xmlHttp.status === 200) {
                                ingredient.validIngredientSuggestions = JSON.parse(xmlHttp.responseText);
                            }
                        }
                        xmlHttp.open("GET", searchURL, true);
                        xmlHttp.send(null);
                    }
                },
                selectValidIngredientSuggestion(stepIndex, ingredientIndex, selection) {
                    let ingredient = this.recipeSteps[stepIndex].ingredients[ingredientIndex];

                    ingredient.ingredientID = selection.id;
                    ingredient.nameQuery = selection.name;
                    ingredient.validIngredientSuggestions = [];
                },
                submitRecipe() {
                    let xmlHttp = new XMLHttpRequest();
                    xmlHttp.onreadystatechange = function() {
                        if (xmlHttp.readyState === 4 && xmlHttp.status === 200) {
                            console.dir(JSON.parse(xmlHttp.responseText));
                        }
                    }
                    xmlHttp.open("POST", "/api/v1/recipes", true);
                    xmlHttp.send(
                        JSON.stringify({
                            name: this.recipeName,
                            description: this.recipeDescription,
                            steps: this.recipeSteps.map((recipeStep) => recipeStep.json()),
                        }),
                    );

                }
            },
            delimiters: ["{%{","}%}"]
        }

        Vue.createApp(RecipeBuilder).mount("#recipeBuilder");
    </script>
</div>