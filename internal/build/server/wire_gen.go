// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package server

import (
	"context"

	"gitlab.com/prixfixe/prixfixe/internal/authentication"
	"gitlab.com/prixfixe/prixfixe/internal/config"
	"gitlab.com/prixfixe/prixfixe/internal/database"
	config2 "gitlab.com/prixfixe/prixfixe/internal/database/config"
	"gitlab.com/prixfixe/prixfixe/internal/encoding"
	"gitlab.com/prixfixe/prixfixe/internal/observability/logging"
	"gitlab.com/prixfixe/prixfixe/internal/observability/metrics"
	"gitlab.com/prixfixe/prixfixe/internal/routing/chi"
	"gitlab.com/prixfixe/prixfixe/internal/search/bleve"
	"gitlab.com/prixfixe/prixfixe/internal/server"
	"gitlab.com/prixfixe/prixfixe/internal/services/accounts"
	"gitlab.com/prixfixe/prixfixe/internal/services/admin"
	"gitlab.com/prixfixe/prixfixe/internal/services/apiclients"
	"gitlab.com/prixfixe/prixfixe/internal/services/audit"
	authentication2 "gitlab.com/prixfixe/prixfixe/internal/services/authentication"
	"gitlab.com/prixfixe/prixfixe/internal/services/frontend"
	"gitlab.com/prixfixe/prixfixe/internal/services/invitations"
	"gitlab.com/prixfixe/prixfixe/internal/services/recipes"
	"gitlab.com/prixfixe/prixfixe/internal/services/recipestepingredients"
	"gitlab.com/prixfixe/prixfixe/internal/services/recipestepproducts"
	"gitlab.com/prixfixe/prixfixe/internal/services/recipesteps"
	"gitlab.com/prixfixe/prixfixe/internal/services/reports"
	"gitlab.com/prixfixe/prixfixe/internal/services/users"
	"gitlab.com/prixfixe/prixfixe/internal/services/validingredientpreparations"
	"gitlab.com/prixfixe/prixfixe/internal/services/validingredients"
	"gitlab.com/prixfixe/prixfixe/internal/services/validinstruments"
	"gitlab.com/prixfixe/prixfixe/internal/services/validpreparationinstruments"
	"gitlab.com/prixfixe/prixfixe/internal/services/validpreparations"
	"gitlab.com/prixfixe/prixfixe/internal/services/webhooks"
	"gitlab.com/prixfixe/prixfixe/internal/storage"
	"gitlab.com/prixfixe/prixfixe/internal/uploads"
	"gitlab.com/prixfixe/prixfixe/internal/uploads/images"
)

// Injectors from build.go:

// Build builds a server.
func Build(ctx context.Context, cfg *config.InstanceConfig, logger logging.Logger) (*server.HTTPServer, error) {
	serverConfig := cfg.Server
	observabilityConfig := &cfg.Observability
	metricsConfig := &observabilityConfig.Metrics
	instrumentationHandler, err := metrics.ProvideMetricsInstrumentationHandlerForServer(metricsConfig, logger)
	if err != nil {
		return nil, err
	}
	servicesConfigurations := &cfg.Services
	authenticationConfig := &servicesConfigurations.Auth
	authenticator := authentication.ProvideArgon2Authenticator(logger)
	configConfig := &cfg.Database
	db, err := config2.ProvideDatabaseConnection(logger, configConfig)
	if err != nil {
		return nil, err
	}
	dataManager, err := config.ProvideDatabaseClient(ctx, logger, db, cfg)
	if err != nil {
		return nil, err
	}
	userDataManager := database.ProvideUserDataManager(dataManager)
	authAuditManager := database.ProvideAuthAuditManager(dataManager)
	apiClientDataManager := database.ProvideAPIClientDataManager(dataManager)
	accountUserMembershipDataManager := database.ProvideAccountUserMembershipDataManager(dataManager)
	cookieConfig := authenticationConfig.Cookies
	config3 := cfg.Database
	sessionManager, err := config2.ProvideSessionManager(cookieConfig, config3, db)
	if err != nil {
		return nil, err
	}
	encodingConfig := cfg.Encoding
	contentType := encoding.ProvideContentType(encodingConfig)
	serverEncoderDecoder := encoding.ProvideServerEncoderDecoder(logger, contentType)
	routeParamManager := chi.NewRouteParamManager()
	authService, err := authentication2.ProvideService(logger, authenticationConfig, authenticator, userDataManager, authAuditManager, apiClientDataManager, accountUserMembershipDataManager, sessionManager, serverEncoderDecoder, routeParamManager)
	if err != nil {
		return nil, err
	}
	auditLogEntryDataManager := database.ProvideAuditLogEntryDataManager(dataManager)
	auditLogEntryDataService := audit.ProvideService(logger, auditLogEntryDataManager, serverEncoderDecoder, routeParamManager)
	accountDataManager := database.ProvideAccountDataManager(dataManager)
	unitCounterProvider, err := metrics.ProvideUnitCounterProvider(metricsConfig, logger)
	if err != nil {
		return nil, err
	}
	imageUploadProcessor := images.NewImageUploadProcessor(logger)
	uploadsConfig := &cfg.Uploads
	storageConfig := &uploadsConfig.Storage
	uploader, err := storage.NewUploadManager(ctx, logger, storageConfig, routeParamManager)
	if err != nil {
		return nil, err
	}
	uploadManager := uploads.ProvideUploadManager(uploader)
	userDataService := users.ProvideUsersService(authenticationConfig, logger, userDataManager, accountDataManager, authenticator, serverEncoderDecoder, unitCounterProvider, imageUploadProcessor, uploadManager, routeParamManager)
	accountDataService := accounts.ProvideService(logger, accountDataManager, accountUserMembershipDataManager, serverEncoderDecoder, unitCounterProvider, routeParamManager)
	apiclientsConfig := apiclients.ProvideConfig(authenticationConfig)
	apiClientDataService := apiclients.ProvideAPIClientsService(logger, apiClientDataManager, userDataManager, authenticator, serverEncoderDecoder, unitCounterProvider, routeParamManager, apiclientsConfig)
	validinstrumentsConfig := servicesConfigurations.ValidInstruments
	validInstrumentDataManager := database.ProvideValidInstrumentDataManager(dataManager)
	indexManagerProvider := bleve.ProvideBleveIndexManagerProvider()
	validInstrumentDataService, err := validinstruments.ProvideService(logger, validinstrumentsConfig, validInstrumentDataManager, serverEncoderDecoder, unitCounterProvider, indexManagerProvider, routeParamManager)
	if err != nil {
		return nil, err
	}
	validpreparationsConfig := servicesConfigurations.ValidPreparations
	validPreparationDataManager := database.ProvideValidPreparationDataManager(dataManager)
	validPreparationDataService, err := validpreparations.ProvideService(logger, validpreparationsConfig, validPreparationDataManager, serverEncoderDecoder, unitCounterProvider, indexManagerProvider, routeParamManager)
	if err != nil {
		return nil, err
	}
	validingredientsConfig := servicesConfigurations.ValidIngredients
	validIngredientDataManager := database.ProvideValidIngredientDataManager(dataManager)
	validIngredientDataService, err := validingredients.ProvideService(logger, validingredientsConfig, validIngredientDataManager, serverEncoderDecoder, unitCounterProvider, indexManagerProvider, routeParamManager)
	if err != nil {
		return nil, err
	}
	validingredientpreparationsConfig := servicesConfigurations.ValidIngredientPreparations
	validIngredientPreparationDataManager := database.ProvideValidIngredientPreparationDataManager(dataManager)
	validIngredientPreparationDataService, err := validingredientpreparations.ProvideService(logger, validingredientpreparationsConfig, validIngredientPreparationDataManager, serverEncoderDecoder, unitCounterProvider, routeParamManager)
	if err != nil {
		return nil, err
	}
	validpreparationinstrumentsConfig := servicesConfigurations.ValidPreparationInstruments
	validPreparationInstrumentDataManager := database.ProvideValidPreparationInstrumentDataManager(dataManager)
	validPreparationInstrumentDataService, err := validpreparationinstruments.ProvideService(logger, validpreparationinstrumentsConfig, validPreparationInstrumentDataManager, serverEncoderDecoder, unitCounterProvider, routeParamManager)
	if err != nil {
		return nil, err
	}
	recipesConfig := servicesConfigurations.Recipes
	recipeDataManager := database.ProvideRecipeDataManager(dataManager)
	recipeDataService, err := recipes.ProvideService(logger, recipesConfig, recipeDataManager, serverEncoderDecoder, unitCounterProvider, routeParamManager)
	if err != nil {
		return nil, err
	}
	recipestepsConfig := servicesConfigurations.RecipeSteps
	recipeStepDataManager := database.ProvideRecipeStepDataManager(dataManager)
	recipeStepDataService, err := recipesteps.ProvideService(logger, recipestepsConfig, recipeStepDataManager, serverEncoderDecoder, unitCounterProvider, routeParamManager)
	if err != nil {
		return nil, err
	}
	recipestepingredientsConfig := servicesConfigurations.RecipeStepIngredients
	recipeStepIngredientDataManager := database.ProvideRecipeStepIngredientDataManager(dataManager)
	recipeStepIngredientDataService, err := recipestepingredients.ProvideService(logger, recipestepingredientsConfig, recipeStepIngredientDataManager, serverEncoderDecoder, unitCounterProvider, routeParamManager)
	if err != nil {
		return nil, err
	}
	recipestepproductsConfig := servicesConfigurations.RecipeStepProducts
	recipeStepProductDataManager := database.ProvideRecipeStepProductDataManager(dataManager)
	recipeStepProductDataService, err := recipestepproducts.ProvideService(logger, recipestepproductsConfig, recipeStepProductDataManager, serverEncoderDecoder, unitCounterProvider, routeParamManager)
	if err != nil {
		return nil, err
	}
	invitationsConfig := servicesConfigurations.Invitations
	invitationDataManager := database.ProvideInvitationDataManager(dataManager)
	invitationDataService, err := invitations.ProvideService(logger, invitationsConfig, invitationDataManager, serverEncoderDecoder, unitCounterProvider, routeParamManager)
	if err != nil {
		return nil, err
	}
	reportsConfig := servicesConfigurations.Reports
	reportDataManager := database.ProvideReportDataManager(dataManager)
	reportDataService, err := reports.ProvideService(logger, reportsConfig, reportDataManager, serverEncoderDecoder, unitCounterProvider, routeParamManager)
	if err != nil {
		return nil, err
	}
	webhookDataManager := database.ProvideWebhookDataManager(dataManager)
	webhookDataService := webhooks.ProvideWebhooksService(logger, webhookDataManager, serverEncoderDecoder, unitCounterProvider, routeParamManager)
	adminUserDataManager := database.ProvideAdminUserDataManager(dataManager)
	adminAuditManager := database.ProvideAdminAuditManager(dataManager)
	adminService := admin.ProvideService(logger, authenticationConfig, authenticator, adminUserDataManager, adminAuditManager, sessionManager, serverEncoderDecoder, routeParamManager)
	frontendConfig := &servicesConfigurations.Frontend
	frontendAuthService := frontend.ProvideAuthService(authService)
	service := frontend.ProvideService(frontendConfig, logger, frontendAuthService)
	router := chi.NewRouter(logger)
	httpServer, err := server.ProvideHTTPServer(ctx, serverConfig, instrumentationHandler, authService, auditLogEntryDataService, userDataService, accountDataService, apiClientDataService, validInstrumentDataService, validPreparationDataService, validIngredientDataService, validIngredientPreparationDataService, validPreparationInstrumentDataService, recipeDataService, recipeStepDataService, recipeStepIngredientDataService, recipeStepProductDataService, invitationDataService, reportDataService, webhookDataService, adminService, service, logger, serverEncoderDecoder, router)
	if err != nil {
		return nil, err
	}
	return httpServer, nil
}
