// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: get_by_id_with_memberships.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const getHouseholdByIDWithMemberships = `-- name: GetHouseholdByIDWithMemberships :many

SELECT
	households.id,
	households.name,
	households.billing_status,
	households.contact_phone,
	households.address_line_1,
	households.address_line_2,
	households.city,
	households.state,
	households.zip_code,
	households.country,
	households.latitude,
    households.longitude,
	households.payment_processor_customer_id,
	households.subscription_plan_id,
	households.created_at,
	households.last_updated_at,
	households.archived_at,
	households.belongs_to_user,
	users.id,
	users.first_name,
	users.last_name,
	users.username,
	users.email_address,
	users.email_address_verified_at,
	users.avatar_src,
	users.requires_password_change,
	users.password_last_changed_at,
	users.two_factor_secret_verified_at,
	users.service_role,
	users.user_account_status,
	users.user_account_status_explanation,
	users.birthday,
	users.created_at,
	users.last_updated_at,
	users.archived_at,
	household_user_memberships.id,
	household_user_memberships.belongs_to_user,
	household_user_memberships.belongs_to_household,
	household_user_memberships.household_role,
	household_user_memberships.default_household,
	household_user_memberships.created_at,
	household_user_memberships.last_updated_at,
	household_user_memberships.archived_at
FROM households
	JOIN household_user_memberships ON household_user_memberships.belongs_to_household = households.id
	JOIN users ON household_user_memberships.belongs_to_user = users.id
WHERE households.archived_at IS NULL
	AND household_user_memberships.archived_at IS NULL
	AND households.id = $1
`

type GetHouseholdByIDWithMembershipsRow struct {
	ID                           string
	Name                         string
	BillingStatus                string
	ContactPhone                 string
	AddressLine1                 string
	AddressLine2                 string
	City                         string
	State                        string
	ZipCode                      string
	Country                      string
	Latitude                     sql.NullString
	Longitude                    sql.NullString
	PaymentProcessorCustomerID   string
	SubscriptionPlanID           sql.NullString
	CreatedAt                    time.Time
	LastUpdatedAt                sql.NullTime
	ArchivedAt                   sql.NullTime
	BelongsToUser                string
	ID_2                         string
	FirstName                    string
	LastName                     string
	Username                     string
	EmailAddress                 string
	EmailAddressVerifiedAt       sql.NullTime
	AvatarSrc                    sql.NullString
	RequiresPasswordChange       bool
	PasswordLastChangedAt        sql.NullTime
	TwoFactorSecretVerifiedAt    sql.NullTime
	ServiceRole                  string
	UserAccountStatus            string
	UserAccountStatusExplanation string
	Birthday                     sql.NullTime
	CreatedAt_2                  time.Time
	LastUpdatedAt_2              sql.NullTime
	ArchivedAt_2                 sql.NullTime
	ID_3                         string
	BelongsToUser_2              string
	BelongsToHousehold           string
	HouseholdRole                string
	DefaultHousehold             bool
	CreatedAt_3                  time.Time
	LastUpdatedAt_3              sql.NullTime
	ArchivedAt_3                 sql.NullTime
}

func (q *Queries) GetHouseholdByIDWithMemberships(ctx context.Context, db DBTX, id string) ([]*GetHouseholdByIDWithMembershipsRow, error) {
	rows, err := db.QueryContext(ctx, getHouseholdByIDWithMemberships, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetHouseholdByIDWithMembershipsRow{}
	for rows.Next() {
		var i GetHouseholdByIDWithMembershipsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.BillingStatus,
			&i.ContactPhone,
			&i.AddressLine1,
			&i.AddressLine2,
			&i.City,
			&i.State,
			&i.ZipCode,
			&i.Country,
			&i.Latitude,
			&i.Longitude,
			&i.PaymentProcessorCustomerID,
			&i.SubscriptionPlanID,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.BelongsToUser,
			&i.ID_2,
			&i.FirstName,
			&i.LastName,
			&i.Username,
			&i.EmailAddress,
			&i.EmailAddressVerifiedAt,
			&i.AvatarSrc,
			&i.RequiresPasswordChange,
			&i.PasswordLastChangedAt,
			&i.TwoFactorSecretVerifiedAt,
			&i.ServiceRole,
			&i.UserAccountStatus,
			&i.UserAccountStatusExplanation,
			&i.Birthday,
			&i.CreatedAt_2,
			&i.LastUpdatedAt_2,
			&i.ArchivedAt_2,
			&i.ID_3,
			&i.BelongsToUser_2,
			&i.BelongsToHousehold,
			&i.HouseholdRole,
			&i.DefaultHousehold,
			&i.CreatedAt_3,
			&i.LastUpdatedAt_3,
			&i.ArchivedAt_3,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
