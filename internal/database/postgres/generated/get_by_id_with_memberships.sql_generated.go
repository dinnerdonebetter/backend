// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: get_by_id_with_memberships.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const GetHouseholdByIDWithMemberships = `-- name: GetHouseholdByIDWithMemberships :many

SELECT
	households.id,
	households.name,
	households.billing_status,
	households.contact_phone,
	households.address_line_1,
	households.address_line_2,
	households.city,
	households.state,
	households.zip_code,
	households.country,
	households.latitude,
    households.longitude,
	households.payment_processor_customer_id,
	households.subscription_plan_id,
	households.created_at,
	households.last_updated_at,
	households.archived_at,
	households.belongs_to_user,
	users.id,
	users.first_name,
	users.last_name,
	users.username,
	users.email_address,
	users.email_address_verified_at,
	users.avatar_src,
	users.requires_password_change,
	users.password_last_changed_at,
	users.two_factor_secret_verified_at,
	users.service_role,
	users.user_account_status,
	users.user_account_status_explanation,
	users.birthday,
	users.created_at,
	users.last_updated_at,
	users.archived_at,
	household_user_memberships.id,
	household_user_memberships.belongs_to_user,
	household_user_memberships.belongs_to_household,
	household_user_memberships.household_role,
	household_user_memberships.default_household,
	household_user_memberships.created_at,
	household_user_memberships.last_updated_at,
	household_user_memberships.archived_at
FROM households
	JOIN household_user_memberships ON household_user_memberships.belongs_to_household = households.id
	JOIN users ON household_user_memberships.belongs_to_user = users.id
WHERE households.archived_at IS NULL
	AND household_user_memberships.archived_at IS NULL
	AND households.id = $1
`

type GetHouseholdByIDWithMembershipsRow struct {
	ID                           string         `db:"id"`
	Name                         string         `db:"name"`
	BillingStatus                string         `db:"billing_status"`
	ContactPhone                 string         `db:"contact_phone"`
	AddressLine1                 string         `db:"address_line_1"`
	AddressLine2                 string         `db:"address_line_2"`
	City                         string         `db:"city"`
	State                        string         `db:"state"`
	ZipCode                      string         `db:"zip_code"`
	Country                      string         `db:"country"`
	Latitude                     sql.NullString `db:"latitude"`
	Longitude                    sql.NullString `db:"longitude"`
	PaymentProcessorCustomerID   string         `db:"payment_processor_customer_id"`
	SubscriptionPlanID           sql.NullString `db:"subscription_plan_id"`
	CreatedAt                    time.Time      `db:"created_at"`
	LastUpdatedAt                sql.NullTime   `db:"last_updated_at"`
	ArchivedAt                   sql.NullTime   `db:"archived_at"`
	BelongsToUser                string         `db:"belongs_to_user"`
	ID_2                         string         `db:"id_2"`
	FirstName                    string         `db:"first_name"`
	LastName                     string         `db:"last_name"`
	Username                     string         `db:"username"`
	EmailAddress                 string         `db:"email_address"`
	EmailAddressVerifiedAt       sql.NullTime   `db:"email_address_verified_at"`
	AvatarSrc                    sql.NullString `db:"avatar_src"`
	RequiresPasswordChange       bool           `db:"requires_password_change"`
	PasswordLastChangedAt        sql.NullTime   `db:"password_last_changed_at"`
	TwoFactorSecretVerifiedAt    sql.NullTime   `db:"two_factor_secret_verified_at"`
	ServiceRole                  string         `db:"service_role"`
	UserAccountStatus            string         `db:"user_account_status"`
	UserAccountStatusExplanation string         `db:"user_account_status_explanation"`
	Birthday                     sql.NullTime   `db:"birthday"`
	CreatedAt_2                  time.Time      `db:"created_at_2"`
	LastUpdatedAt_2              sql.NullTime   `db:"last_updated_at_2"`
	ArchivedAt_2                 sql.NullTime   `db:"archived_at_2"`
	ID_3                         string         `db:"id_3"`
	BelongsToUser_2              string         `db:"belongs_to_user_2"`
	BelongsToHousehold           string         `db:"belongs_to_household"`
	HouseholdRole                string         `db:"household_role"`
	DefaultHousehold             bool           `db:"default_household"`
	CreatedAt_3                  time.Time      `db:"created_at_3"`
	LastUpdatedAt_3              sql.NullTime   `db:"last_updated_at_3"`
	ArchivedAt_3                 sql.NullTime   `db:"archived_at_3"`
}

func (q *Queries) GetHouseholdByIDWithMemberships(ctx context.Context, db DBTX, id string) ([]*GetHouseholdByIDWithMembershipsRow, error) {
	rows, err := db.QueryContext(ctx, GetHouseholdByIDWithMemberships, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetHouseholdByIDWithMembershipsRow{}
	for rows.Next() {
		var i GetHouseholdByIDWithMembershipsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.BillingStatus,
			&i.ContactPhone,
			&i.AddressLine1,
			&i.AddressLine2,
			&i.City,
			&i.State,
			&i.ZipCode,
			&i.Country,
			&i.Latitude,
			&i.Longitude,
			&i.PaymentProcessorCustomerID,
			&i.SubscriptionPlanID,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.BelongsToUser,
			&i.ID_2,
			&i.FirstName,
			&i.LastName,
			&i.Username,
			&i.EmailAddress,
			&i.EmailAddressVerifiedAt,
			&i.AvatarSrc,
			&i.RequiresPasswordChange,
			&i.PasswordLastChangedAt,
			&i.TwoFactorSecretVerifiedAt,
			&i.ServiceRole,
			&i.UserAccountStatus,
			&i.UserAccountStatusExplanation,
			&i.Birthday,
			&i.CreatedAt_2,
			&i.LastUpdatedAt_2,
			&i.ArchivedAt_2,
			&i.ID_3,
			&i.BelongsToUser_2,
			&i.BelongsToHousehold,
			&i.HouseholdRole,
			&i.DefaultHousehold,
			&i.CreatedAt_3,
			&i.LastUpdatedAt_3,
			&i.ArchivedAt_3,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
