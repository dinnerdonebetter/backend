// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: recipe_steps.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const archiveRecipeStep = `-- name: ArchiveRecipeStep :exec

UPDATE recipe_steps SET archived_at = NOW() WHERE archived_at IS NULL AND belongs_to_recipe = $1 AND id = $2
`

type ArchiveRecipeStepParams struct {
	BelongsToRecipe string
	ID              string
}

func (q *Queries) ArchiveRecipeStep(ctx context.Context, db DBTX, arg *ArchiveRecipeStepParams) error {
	_, err := db.ExecContext(ctx, archiveRecipeStep, arg.BelongsToRecipe, arg.ID)
	return err
}

const checkRecipeStepExistence = `-- name: CheckRecipeStepExistence :one

SELECT EXISTS (
	SELECT recipe_steps.id
	FROM recipe_steps
	JOIN recipes ON recipe_steps.belongs_to_recipe=recipes.id
	WHERE recipe_steps.archived_at IS NULL
	  AND recipe_steps.belongs_to_recipe = $1
	  AND recipe_steps.id = $2
	  AND recipes.archived_at IS NULL
	  AND recipes.id = $1
)
`

type CheckRecipeStepExistenceParams struct {
	BelongsToRecipe string
	ID              string
}

func (q *Queries) CheckRecipeStepExistence(ctx context.Context, db DBTX, arg *CheckRecipeStepExistenceParams) (bool, error) {
	row := db.QueryRowContext(ctx, checkRecipeStepExistence, arg.BelongsToRecipe, arg.ID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createRecipeStep = `-- name: CreateRecipeStep :exec

INSERT INTO recipe_steps
(id,index,preparation_id,minimum_estimated_time_in_seconds,maximum_estimated_time_in_seconds,minimum_temperature_in_celsius,maximum_temperature_in_celsius,notes,explicit_instructions,condition_expression,optional,start_timer_automatically,belongs_to_recipe)
VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)
`

type CreateRecipeStepParams struct {
	ID                            string
	BelongsToRecipe               string
	PreparationID                 string
	ConditionExpression           string
	ExplicitInstructions          string
	Notes                         string
	MaximumTemperatureInCelsius   sql.NullString
	MinimumTemperatureInCelsius   sql.NullString
	MaximumEstimatedTimeInSeconds sql.NullInt64
	MinimumEstimatedTimeInSeconds sql.NullInt64
	Index                         int32
	Optional                      bool
	StartTimerAutomatically       bool
}

func (q *Queries) CreateRecipeStep(ctx context.Context, db DBTX, arg *CreateRecipeStepParams) error {
	_, err := db.ExecContext(ctx, createRecipeStep,
		arg.ID,
		arg.Index,
		arg.PreparationID,
		arg.MinimumEstimatedTimeInSeconds,
		arg.MaximumEstimatedTimeInSeconds,
		arg.MinimumTemperatureInCelsius,
		arg.MaximumTemperatureInCelsius,
		arg.Notes,
		arg.ExplicitInstructions,
		arg.ConditionExpression,
		arg.Optional,
		arg.StartTimerAutomatically,
		arg.BelongsToRecipe,
	)
	return err
}

const getRecipeStep = `-- name: GetRecipeStep :one

SELECT
	recipe_steps.id,
	recipe_steps.index,
	valid_preparations.id,
	valid_preparations.name,
	valid_preparations.description,
	valid_preparations.icon_path,
	valid_preparations.yields_nothing,
	valid_preparations.restrict_to_ingredients,
	valid_preparations.minimum_ingredient_count,
	valid_preparations.maximum_ingredient_count,
	valid_preparations.minimum_instrument_count,
	valid_preparations.maximum_instrument_count,
	valid_preparations.temperature_required,
	valid_preparations.time_estimate_required,
	valid_preparations.condition_expression_required,
    valid_preparations.consumes_vessel,
    valid_preparations.only_for_vessels,
    valid_preparations.minimum_vessel_count,
    valid_preparations.maximum_vessel_count,
	valid_preparations.slug,
	valid_preparations.past_tense,
	valid_preparations.created_at,
	valid_preparations.last_updated_at,
	valid_preparations.archived_at,
	recipe_steps.minimum_estimated_time_in_seconds,
	recipe_steps.maximum_estimated_time_in_seconds,
	recipe_steps.minimum_temperature_in_celsius,
	recipe_steps.maximum_temperature_in_celsius,
	recipe_steps.notes,
	recipe_steps.explicit_instructions,
	recipe_steps.condition_expression,
	recipe_steps.optional,
	recipe_steps.start_timer_automatically,
	recipe_steps.created_at,
	recipe_steps.last_updated_at,
	recipe_steps.archived_at,
	recipe_steps.belongs_to_recipe
FROM recipe_steps
	JOIN recipes ON recipe_steps.belongs_to_recipe=recipes.id
	JOIN valid_preparations ON recipe_steps.preparation_id=valid_preparations.id
WHERE recipe_steps.archived_at IS NULL
	AND recipe_steps.belongs_to_recipe = $1
	AND recipe_steps.id = $2
	AND recipes.archived_at IS NULL
	AND recipes.id = $1
`

type GetRecipeStepParams struct {
	BelongsToRecipe string
	ID              string
}

type GetRecipeStepRow struct {
	CreatedAt                     time.Time
	CreatedAt_2                   time.Time
	ArchivedAt_2                  sql.NullTime
	LastUpdatedAt                 sql.NullTime
	ArchivedAt                    sql.NullTime
	LastUpdatedAt_2               sql.NullTime
	ConditionExpression           string
	ID_2                          string
	Description                   string
	ID                            string
	Name                          string
	ExplicitInstructions          string
	Notes                         string
	IconPath                      string
	PastTense                     string
	Slug                          string
	BelongsToRecipe               string
	MaximumTemperatureInCelsius   sql.NullString
	MinimumTemperatureInCelsius   sql.NullString
	MinimumEstimatedTimeInSeconds sql.NullInt64
	MaximumEstimatedTimeInSeconds sql.NullInt64
	MaximumIngredientCount        sql.NullInt32
	MaximumVesselCount            sql.NullInt32
	MaximumInstrumentCount        sql.NullInt32
	MinimumVesselCount            int32
	Index                         int32
	MinimumIngredientCount        int32
	MinimumInstrumentCount        int32
	TemperatureRequired           bool
	TimeEstimateRequired          bool
	ConditionExpressionRequired   bool
	Optional                      bool
	StartTimerAutomatically       bool
	ConsumesVessel                bool
	RestrictToIngredients         bool
	YieldsNothing                 bool
	OnlyForVessels                bool
}

func (q *Queries) GetRecipeStep(ctx context.Context, db DBTX, arg *GetRecipeStepParams) (*GetRecipeStepRow, error) {
	row := db.QueryRowContext(ctx, getRecipeStep, arg.BelongsToRecipe, arg.ID)
	var i GetRecipeStepRow
	err := row.Scan(
		&i.ID,
		&i.Index,
		&i.ID_2,
		&i.Name,
		&i.Description,
		&i.IconPath,
		&i.YieldsNothing,
		&i.RestrictToIngredients,
		&i.MinimumIngredientCount,
		&i.MaximumIngredientCount,
		&i.MinimumInstrumentCount,
		&i.MaximumInstrumentCount,
		&i.TemperatureRequired,
		&i.TimeEstimateRequired,
		&i.ConditionExpressionRequired,
		&i.ConsumesVessel,
		&i.OnlyForVessels,
		&i.MinimumVesselCount,
		&i.MaximumVesselCount,
		&i.Slug,
		&i.PastTense,
		&i.CreatedAt,
		&i.LastUpdatedAt,
		&i.ArchivedAt,
		&i.MinimumEstimatedTimeInSeconds,
		&i.MaximumEstimatedTimeInSeconds,
		&i.MinimumTemperatureInCelsius,
		&i.MaximumTemperatureInCelsius,
		&i.Notes,
		&i.ExplicitInstructions,
		&i.ConditionExpression,
		&i.Optional,
		&i.StartTimerAutomatically,
		&i.CreatedAt_2,
		&i.LastUpdatedAt_2,
		&i.ArchivedAt_2,
		&i.BelongsToRecipe,
	)
	return &i, err
}

const getRecipeStepByRecipeID = `-- name: GetRecipeStepByRecipeID :one

SELECT
	recipe_steps.id,
	recipe_steps.index,
	valid_preparations.id,
	valid_preparations.name,
	valid_preparations.description,
	valid_preparations.icon_path,
	valid_preparations.yields_nothing,
	valid_preparations.restrict_to_ingredients,
	valid_preparations.minimum_ingredient_count,
	valid_preparations.maximum_ingredient_count,
	valid_preparations.minimum_instrument_count,
	valid_preparations.maximum_instrument_count,
	valid_preparations.temperature_required,
	valid_preparations.time_estimate_required,
	valid_preparations.condition_expression_required,
    valid_preparations.consumes_vessel,
    valid_preparations.only_for_vessels,
    valid_preparations.minimum_vessel_count,
    valid_preparations.maximum_vessel_count,
	valid_preparations.slug,
	valid_preparations.past_tense,
	valid_preparations.created_at,
	valid_preparations.last_updated_at,
	valid_preparations.archived_at,
	recipe_steps.minimum_estimated_time_in_seconds,
	recipe_steps.maximum_estimated_time_in_seconds,
	recipe_steps.minimum_temperature_in_celsius,
	recipe_steps.maximum_temperature_in_celsius,
	recipe_steps.notes,
	recipe_steps.explicit_instructions,
	recipe_steps.condition_expression,
	recipe_steps.optional,
	recipe_steps.start_timer_automatically,
	recipe_steps.created_at,
	recipe_steps.last_updated_at,
	recipe_steps.archived_at,
	recipe_steps.belongs_to_recipe
FROM recipe_steps
	JOIN recipes ON recipe_steps.belongs_to_recipe=recipes.id
	JOIN valid_preparations ON recipe_steps.preparation_id=valid_preparations.id
WHERE recipe_steps.archived_at IS NULL
	AND recipe_steps.id = $1
`

type GetRecipeStepByRecipeIDRow struct {
	CreatedAt                     time.Time
	CreatedAt_2                   time.Time
	ArchivedAt_2                  sql.NullTime
	LastUpdatedAt                 sql.NullTime
	ArchivedAt                    sql.NullTime
	LastUpdatedAt_2               sql.NullTime
	ConditionExpression           string
	ID_2                          string
	Description                   string
	ID                            string
	Name                          string
	ExplicitInstructions          string
	Notes                         string
	IconPath                      string
	PastTense                     string
	Slug                          string
	BelongsToRecipe               string
	MaximumTemperatureInCelsius   sql.NullString
	MinimumTemperatureInCelsius   sql.NullString
	MinimumEstimatedTimeInSeconds sql.NullInt64
	MaximumEstimatedTimeInSeconds sql.NullInt64
	MaximumIngredientCount        sql.NullInt32
	MaximumVesselCount            sql.NullInt32
	MaximumInstrumentCount        sql.NullInt32
	MinimumVesselCount            int32
	Index                         int32
	MinimumIngredientCount        int32
	MinimumInstrumentCount        int32
	TemperatureRequired           bool
	TimeEstimateRequired          bool
	ConditionExpressionRequired   bool
	Optional                      bool
	StartTimerAutomatically       bool
	ConsumesVessel                bool
	RestrictToIngredients         bool
	YieldsNothing                 bool
	OnlyForVessels                bool
}

func (q *Queries) GetRecipeStepByRecipeID(ctx context.Context, db DBTX, id string) (*GetRecipeStepByRecipeIDRow, error) {
	row := db.QueryRowContext(ctx, getRecipeStepByRecipeID, id)
	var i GetRecipeStepByRecipeIDRow
	err := row.Scan(
		&i.ID,
		&i.Index,
		&i.ID_2,
		&i.Name,
		&i.Description,
		&i.IconPath,
		&i.YieldsNothing,
		&i.RestrictToIngredients,
		&i.MinimumIngredientCount,
		&i.MaximumIngredientCount,
		&i.MinimumInstrumentCount,
		&i.MaximumInstrumentCount,
		&i.TemperatureRequired,
		&i.TimeEstimateRequired,
		&i.ConditionExpressionRequired,
		&i.ConsumesVessel,
		&i.OnlyForVessels,
		&i.MinimumVesselCount,
		&i.MaximumVesselCount,
		&i.Slug,
		&i.PastTense,
		&i.CreatedAt,
		&i.LastUpdatedAt,
		&i.ArchivedAt,
		&i.MinimumEstimatedTimeInSeconds,
		&i.MaximumEstimatedTimeInSeconds,
		&i.MinimumTemperatureInCelsius,
		&i.MaximumTemperatureInCelsius,
		&i.Notes,
		&i.ExplicitInstructions,
		&i.ConditionExpression,
		&i.Optional,
		&i.StartTimerAutomatically,
		&i.CreatedAt_2,
		&i.LastUpdatedAt_2,
		&i.ArchivedAt_2,
		&i.BelongsToRecipe,
	)
	return &i, err
}

const updateRecipeStep = `-- name: UpdateRecipeStep :exec

UPDATE recipe_steps SET
	index = $1,
	preparation_id = $2,
	minimum_estimated_time_in_seconds = $3,
	maximum_estimated_time_in_seconds = $4,
	minimum_temperature_in_celsius = $5,
	maximum_temperature_in_celsius = $6,
	notes = $7,
	explicit_instructions = $8,
	condition_expression = $9,
	optional = $10,
	start_timer_automatically = $11,
	last_updated_at = NOW()
WHERE archived_at IS NULL
	AND belongs_to_recipe = $12
	AND id = $13
`

type UpdateRecipeStepParams struct {
	ConditionExpression           string
	PreparationID                 string
	ID                            string
	BelongsToRecipe               string
	Notes                         string
	ExplicitInstructions          string
	MinimumTemperatureInCelsius   sql.NullString
	MaximumTemperatureInCelsius   sql.NullString
	MaximumEstimatedTimeInSeconds sql.NullInt64
	MinimumEstimatedTimeInSeconds sql.NullInt64
	Index                         int32
	Optional                      bool
	StartTimerAutomatically       bool
}

func (q *Queries) UpdateRecipeStep(ctx context.Context, db DBTX, arg *UpdateRecipeStepParams) error {
	_, err := db.ExecContext(ctx, updateRecipeStep,
		arg.Index,
		arg.PreparationID,
		arg.MinimumEstimatedTimeInSeconds,
		arg.MaximumEstimatedTimeInSeconds,
		arg.MinimumTemperatureInCelsius,
		arg.MaximumTemperatureInCelsius,
		arg.Notes,
		arg.ExplicitInstructions,
		arg.ConditionExpression,
		arg.Optional,
		arg.StartTimerAutomatically,
		arg.BelongsToRecipe,
		arg.ID,
	)
	return err
}
