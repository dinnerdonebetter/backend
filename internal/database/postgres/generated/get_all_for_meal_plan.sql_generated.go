// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: get_all_for_meal_plan.sql

package generated

import (
	"context"
	"database/sql"
)

const getMealPlanGroceryListItemsForMealPlan = `-- name: GetMealPlanGroceryListItemsForMealPlan :many

SELECT
	meal_plan_grocery_list_items.id,
	meal_plan_grocery_list_items.belongs_to_meal_plan,
	meal_plan_grocery_list_items.valid_ingredient,
	meal_plan_grocery_list_items.valid_measurement_unit,
	meal_plan_grocery_list_items.minimum_quantity_needed,
	meal_plan_grocery_list_items.maximum_quantity_needed,
	meal_plan_grocery_list_items.quantity_purchased,
	meal_plan_grocery_list_items.purchased_measurement_unit,
	meal_plan_grocery_list_items.purchased_upc,
	meal_plan_grocery_list_items.purchase_price,
	meal_plan_grocery_list_items.status_explanation,
	meal_plan_grocery_list_items.status,
	meal_plan_grocery_list_items.created_at,
	meal_plan_grocery_list_items.last_updated_at,
	meal_plan_grocery_list_items.archived_at
FROM meal_plan_grocery_list_items
	FULL OUTER JOIN meal_plans ON meal_plan_grocery_list_items.belongs_to_meal_plan=meal_plans.id
WHERE meal_plan_grocery_list_items.archived_at IS NULL
  AND meal_plan_grocery_list_items.belongs_to_meal_plan = $1
  AND meal_plans.archived_at IS NULL
  AND meal_plans.id = $1
GROUP BY meal_plan_grocery_list_items.id
ORDER BY meal_plan_grocery_list_items.id
`

type GetMealPlanGroceryListItemsForMealPlanRow struct {
	CreatedAt                sql.NullTime
	ArchivedAt               sql.NullTime
	LastUpdatedAt            sql.NullTime
	QuantityPurchased        sql.NullString
	MinimumQuantityNeeded    sql.NullString
	MaximumQuantityNeeded    sql.NullString
	ID                       sql.NullString
	PurchasedMeasurementUnit sql.NullString
	PurchasedUpc             sql.NullString
	PurchasePrice            sql.NullString
	StatusExplanation        sql.NullString
	Status                   NullGroceryListItemStatus
	ValidMeasurementUnit     sql.NullString
	ValidIngredient          sql.NullString
	BelongsToMealPlan        sql.NullString
}

func (q *Queries) GetMealPlanGroceryListItemsForMealPlan(ctx context.Context, db DBTX, belongsToMealPlan string) ([]*GetMealPlanGroceryListItemsForMealPlanRow, error) {
	rows, err := db.QueryContext(ctx, getMealPlanGroceryListItemsForMealPlan, belongsToMealPlan)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetMealPlanGroceryListItemsForMealPlanRow{}
	for rows.Next() {
		var i GetMealPlanGroceryListItemsForMealPlanRow
		if err := rows.Scan(
			&i.ID,
			&i.BelongsToMealPlan,
			&i.ValidIngredient,
			&i.ValidMeasurementUnit,
			&i.MinimumQuantityNeeded,
			&i.MaximumQuantityNeeded,
			&i.QuantityPurchased,
			&i.PurchasedMeasurementUnit,
			&i.PurchasedUpc,
			&i.PurchasePrice,
			&i.StatusExplanation,
			&i.Status,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
