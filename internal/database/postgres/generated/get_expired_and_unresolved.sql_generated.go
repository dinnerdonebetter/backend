// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: get_expired_and_unresolved.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const getExpiredAndUnresolvedMealPlans = `-- name: GetExpiredAndUnresolvedMealPlans :many

SELECT
	meal_plans.id,
	meal_plans.notes,
	meal_plans.status,
	meal_plans.voting_deadline,
	meal_plans.grocery_list_initialized,
	meal_plans.tasks_created,
	meal_plans.election_method,
	meal_plans.created_at,
	meal_plans.last_updated_at,
	meal_plans.archived_at,
	meal_plans.belongs_to_household,
	meal_plans.created_by_user
FROM meal_plans
WHERE meal_plans.archived_at IS NULL
	AND meal_plans.status = 'awaiting_votes'
	AND voting_deadline < now()
GROUP BY meal_plans.id
ORDER BY meal_plans.id
`

type GetExpiredAndUnresolvedMealPlansRow struct {
	VotingDeadline         time.Time
	CreatedAt              time.Time
	LastUpdatedAt          sql.NullTime
	ArchivedAt             sql.NullTime
	ID                     string
	Notes                  string
	Status                 MealPlanStatus
	ElectionMethod         ValidElectionMethod
	BelongsToHousehold     string
	CreatedByUser          string
	GroceryListInitialized bool
	TasksCreated           bool
}

func (q *Queries) GetExpiredAndUnresolvedMealPlans(ctx context.Context, db DBTX) ([]*GetExpiredAndUnresolvedMealPlansRow, error) {
	rows, err := db.QueryContext(ctx, getExpiredAndUnresolvedMealPlans)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetExpiredAndUnresolvedMealPlansRow{}
	for rows.Next() {
		var i GetExpiredAndUnresolvedMealPlansRow
		if err := rows.Scan(
			&i.ID,
			&i.Notes,
			&i.Status,
			&i.VotingDeadline,
			&i.GroceryListInitialized,
			&i.TasksCreated,
			&i.ElectionMethod,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.BelongsToHousehold,
			&i.CreatedByUser,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
