// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: recipes_get_by_id.sql

package generated

import (
	"context"
	"database/sql"
)

const GetRecipeByID = `-- name: GetRecipeByID :many
SELECT
	recipes.id,
	recipes.name,
	recipes.source,
	recipes.description,
	recipes.inspired_by_recipe_id,
	recipes.yields_portions,
	recipes.seal_of_approval,
	recipes.created_at,
	recipes.last_updated_at,
	recipes.archived_at,
	recipes.created_by_user,
	recipe_steps.id,
	recipe_steps.index,
	valid_preparations.id,
	valid_preparations.name,
	valid_preparations.description,
	valid_preparations.icon_path,
	valid_preparations.yields_nothing,
	valid_preparations.restrict_to_ingredients,
	valid_preparations.zero_ingredients_allowable,
	valid_preparations.past_tense,
	valid_preparations.created_at,
	valid_preparations.last_updated_at,
	valid_preparations.archived_at,
	recipe_steps.minimum_estimated_time_in_seconds,
	recipe_steps.maximum_estimated_time_in_seconds,
	recipe_steps.minimum_temperature_in_celsius,
	recipe_steps.maximum_temperature_in_celsius,
	recipe_steps.notes,
	recipe_steps.explicit_instructions,
	recipe_steps.optional,
	recipe_steps.created_at,
	recipe_steps.last_updated_at,
	recipe_steps.archived_at,
	recipe_steps.belongs_to_recipe
FROM recipes
	FULL OUTER JOIN recipe_steps ON recipes.id=recipe_steps.belongs_to_recipe
	FULL OUTER JOIN valid_preparations ON recipe_steps.preparation_id=valid_preparations.id
WHERE recipes.archived_at IS NULL
	AND recipes.id = $1
ORDER BY recipe_steps.index
`

type GetRecipeByIDRow struct {
	ID                            sql.NullString
	Name                          sql.NullString
	Source                        sql.NullString
	Description                   sql.NullString
	InspiredByRecipeID            sql.NullString
	YieldsPortions                sql.NullInt32
	SealOfApproval                sql.NullBool
	CreatedAt                     sql.NullTime
	LastUpdatedAt                 sql.NullTime
	ArchivedAt                    sql.NullTime
	CreatedByUser                 sql.NullString
	ID_2                          sql.NullString
	Index                         sql.NullInt32
	ID_3                          sql.NullString
	Name_2                        sql.NullString
	Description_2                 sql.NullString
	IconPath                      sql.NullString
	YieldsNothing                 sql.NullBool
	RestrictToIngredients         sql.NullBool
	ZeroIngredientsAllowable      sql.NullBool
	PastTense                     sql.NullString
	CreatedAt_2                   sql.NullTime
	LastUpdatedAt_2               sql.NullTime
	ArchivedAt_2                  sql.NullTime
	MinimumEstimatedTimeInSeconds sql.NullInt64
	MaximumEstimatedTimeInSeconds sql.NullInt64
	MinimumTemperatureInCelsius   sql.NullString
	MaximumTemperatureInCelsius   sql.NullString
	Notes                         sql.NullString
	ExplicitInstructions          sql.NullString
	Optional                      sql.NullBool
	CreatedAt_3                   sql.NullTime
	LastUpdatedAt_3               sql.NullTime
	ArchivedAt_3                  sql.NullTime
	BelongsToRecipe               sql.NullString
}

func (q *Queries) GetRecipeByID(ctx context.Context, id string) ([]*GetRecipeByIDRow, error) {
	rows, err := q.db.QueryContext(ctx, GetRecipeByID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetRecipeByIDRow{}
	for rows.Next() {
		var i GetRecipeByIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Source,
			&i.Description,
			&i.InspiredByRecipeID,
			&i.YieldsPortions,
			&i.SealOfApproval,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.CreatedByUser,
			&i.ID_2,
			&i.Index,
			&i.ID_3,
			&i.Name_2,
			&i.Description_2,
			&i.IconPath,
			&i.YieldsNothing,
			&i.RestrictToIngredients,
			&i.ZeroIngredientsAllowable,
			&i.PastTense,
			&i.CreatedAt_2,
			&i.LastUpdatedAt_2,
			&i.ArchivedAt_2,
			&i.MinimumEstimatedTimeInSeconds,
			&i.MaximumEstimatedTimeInSeconds,
			&i.MinimumTemperatureInCelsius,
			&i.MaximumTemperatureInCelsius,
			&i.Notes,
			&i.ExplicitInstructions,
			&i.Optional,
			&i.CreatedAt_3,
			&i.LastUpdatedAt_3,
			&i.ArchivedAt_3,
			&i.BelongsToRecipe,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
