// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: webhook_trigger_events_get_for_webhook.sql

package generated

import (
	"context"
)

const GetWebhookTriggerEventsForWebhook = `-- name: GetWebhookTriggerEventsForWebhook :many
SELECT
    webhook_trigger_events.id,
    webhook_trigger_events.trigger_event,
    webhook_trigger_events.belongs_to_webhook,
    webhook_trigger_events.created_at,
    webhook_trigger_events.archived_at
FROM webhook_trigger_events
    JOIN webhooks ON webhook_trigger_events.belongs_to_webhook=webhooks.id
WHERE webhook_trigger_events.archived_at IS NULL
    AND webhooks.archived_at IS NULL
    AND webhooks.id = $1
    AND webhook_trigger_events.belongs_to_webhook = $1
`

func (q *Queries) GetWebhookTriggerEventsForWebhook(ctx context.Context, db DBTX, id string) ([]*WebhookTriggerEvents, error) {
	rows, err := db.QueryContext(ctx, GetWebhookTriggerEventsForWebhook, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*WebhookTriggerEvents{}
	for rows.Next() {
		var i WebhookTriggerEvents
		if err := rows.Scan(
			&i.ID,
			&i.TriggerEvent,
			&i.BelongsToWebhook,
			&i.CreatedAt,
			&i.ArchivedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
