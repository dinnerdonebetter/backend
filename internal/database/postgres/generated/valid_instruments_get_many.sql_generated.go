// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: valid_instruments_get_many.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const GetValidInstruments = `-- name: GetValidInstruments :many
SELECT
	valid_instruments.id,
	valid_instruments.name,
	valid_instruments.plural_name,
	valid_instruments.description,
	valid_instruments.icon_path,
	valid_instruments.created_at,
	valid_instruments.last_updated_at,
	valid_instruments.archived_at,
	(
	 SELECT
		COUNT(valid_instruments.id)
	 FROM
		valid_instruments
	 WHERE
		valid_instruments.archived_at IS NULL
	 AND valid_instruments.created_at > COALESCE($1, 0)
	 AND valid_instruments.created_at < COALESCE($2, (SELECT ~(1::bigint<<63)))
	 AND (valid_instruments.last_updated_at IS NULL OR valid_instruments.last_updated_at > COALESCE($3, 0))
	 AND (valid_instruments.last_updated_at IS NULL OR valid_instruments.last_updated_at < COALESCE($4, (SELECT ~(1::bigint<<63))))
	) as filtered_count,
	(
	 SELECT
		COUNT(valid_instruments.id)
	 FROM
		valid_instruments
	 WHERE
		valid_instruments.archived_at IS NULL
	) as total_count
FROM
	valid_instruments
WHERE
	valid_instruments.archived_at IS NULL
	AND valid_instruments.created_at > COALESCE($1, 0)
	AND valid_instruments.created_at < COALESCE($2, (SELECT ~(1::bigint<<63)))
	AND (valid_instruments.last_updated_at IS NULL OR valid_instruments.last_updated_at > COALESCE($3, 0))
	AND (valid_instruments.last_updated_at IS NULL OR valid_instruments.last_updated_at < COALESCE($4, (SELECT ~(1::bigint<<63))))
GROUP BY
	valid_instruments.id
ORDER BY
	valid_instruments.id
	LIMIT $5
`

type GetValidInstrumentsParams struct {
	CreatedAfter  sql.NullTime  `db:"created_after"`
	CreatedBefore sql.NullTime  `db:"created_before"`
	UpdatedAfter  sql.NullTime  `db:"updated_after"`
	UpdatedBefore sql.NullTime  `db:"updated_before"`
	Limit         sql.NullInt32 `db:"limit"`
}

type GetValidInstrumentsRow struct {
	ID            string       `db:"id"`
	Name          string       `db:"name"`
	PluralName    string       `db:"plural_name"`
	Description   string       `db:"description"`
	IconPath      string       `db:"icon_path"`
	CreatedAt     time.Time    `db:"created_at"`
	LastUpdatedAt sql.NullTime `db:"last_updated_at"`
	ArchivedAt    sql.NullTime `db:"archived_at"`
	FilteredCount int64        `db:"filtered_count"`
	TotalCount    int64        `db:"total_count"`
}

func (q *Queries) GetValidInstruments(ctx context.Context, db DBTX, arg *GetValidInstrumentsParams) ([]*GetValidInstrumentsRow, error) {
	rows, err := db.QueryContext(ctx, GetValidInstruments,
		arg.CreatedAfter,
		arg.CreatedBefore,
		arg.UpdatedAfter,
		arg.UpdatedBefore,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetValidInstrumentsRow{}
	for rows.Next() {
		var i GetValidInstrumentsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.PluralName,
			&i.Description,
			&i.IconPath,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.FilteredCount,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
