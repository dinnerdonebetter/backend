// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: valid_ingredients_create.sql

package generated

import (
	"context"
	"database/sql"
)

const CreateValidIngredient = `-- name: CreateValidIngredient :exec
INSERT INTO valid_ingredients
(
	id,
	name,
	description,
	warning,
	contains_egg,
	contains_dairy,
	contains_peanut,
	contains_tree_nut,
	contains_soy,
	contains_wheat,
	contains_shellfish,
	contains_sesame,
	contains_fish,
	contains_gluten,
	animal_flesh,
	volumetric,
	is_liquid,
	icon_path,
	animal_derived,
	plural_name,
	restrict_to_preparations,
	minimum_ideal_storage_temperature_in_celsius,
	maximum_ideal_storage_temperature_in_celsius,
	storage_instructions
) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24)
`

type CreateValidIngredientParams struct {
	ID                                      string         `db:"id"`
	Name                                    string         `db:"name"`
	Description                             string         `db:"description"`
	Warning                                 string         `db:"warning"`
	PluralName                              string         `db:"plural_name"`
	IconPath                                string         `db:"icon_path"`
	StorageInstructions                     string         `db:"storage_instructions"`
	MaximumIdealStorageTemperatureInCelsius sql.NullString `db:"maximum_ideal_storage_temperature_in_celsius"`
	MinimumIdealStorageTemperatureInCelsius sql.NullString `db:"minimum_ideal_storage_temperature_in_celsius"`
	IsLiquid                                sql.NullBool   `db:"is_liquid"`
	ContainsTreeNut                         bool           `db:"contains_tree_nut"`
	ContainsSesame                          bool           `db:"contains_sesame"`
	ContainsPeanut                          bool           `db:"contains_peanut"`
	ContainsGluten                          bool           `db:"contains_gluten"`
	AnimalFlesh                             bool           `db:"animal_flesh"`
	Volumetric                              bool           `db:"volumetric"`
	ContainsShellfish                       bool           `db:"contains_shellfish"`
	ContainsDairy                           bool           `db:"contains_dairy"`
	AnimalDerived                           bool           `db:"animal_derived"`
	ContainsEgg                             bool           `db:"contains_egg"`
	RestrictToPreparations                  bool           `db:"restrict_to_preparations"`
	ContainsWheat                           bool           `db:"contains_wheat"`
	ContainsSoy                             bool           `db:"contains_soy"`
	ContainsFish                            bool           `db:"contains_fish"`
}

func (q *Queries) CreateValidIngredient(ctx context.Context, arg *CreateValidIngredientParams) error {
	_, err := q.exec(ctx, q.createValidIngredientStmt, CreateValidIngredient,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Warning,
		arg.ContainsEgg,
		arg.ContainsDairy,
		arg.ContainsPeanut,
		arg.ContainsTreeNut,
		arg.ContainsSoy,
		arg.ContainsWheat,
		arg.ContainsShellfish,
		arg.ContainsSesame,
		arg.ContainsFish,
		arg.ContainsGluten,
		arg.AnimalFlesh,
		arg.Volumetric,
		arg.IsLiquid,
		arg.IconPath,
		arg.AnimalDerived,
		arg.PluralName,
		arg.RestrictToPreparations,
		arg.MinimumIdealStorageTemperatureInCelsius,
		arg.MaximumIdealStorageTemperatureInCelsius,
		arg.StorageInstructions,
	)
	return err
}
