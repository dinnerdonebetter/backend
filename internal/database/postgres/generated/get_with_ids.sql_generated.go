// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: get_with_ids.sql

package generated

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
)

const getValidVesselsWithIDs = `-- name: GetValidVesselsWithIDs :many

SELECT
    valid_vessels.id,
    valid_vessels.name,
    valid_vessels.plural_name,
    valid_vessels.description,
    valid_vessels.icon_path,
    valid_vessels.usable_for_storage,
    valid_vessels.slug,
    valid_vessels.display_in_summary_lists,
    valid_vessels.include_in_generated_instructions,
    valid_vessels.capacity::float,
    valid_measurement_units.id,
    valid_measurement_units.name,
    valid_measurement_units.description,
    valid_measurement_units.volumetric,
    valid_measurement_units.icon_path,
    valid_measurement_units.universal,
    valid_measurement_units.metric,
    valid_measurement_units.imperial,
    valid_measurement_units.slug,
    valid_measurement_units.plural_name,
    valid_measurement_units.created_at,
    valid_measurement_units.last_updated_at,
    valid_measurement_units.archived_at,
    valid_vessels.width_in_millimeters::float,
    valid_vessels.length_in_millimeters::float,
    valid_vessels.height_in_millimeters::float,
    valid_vessels.shape,
    valid_vessels.created_at,
    valid_vessels.last_updated_at,
    valid_vessels.archived_at
FROM valid_vessels
    JOIN valid_measurement_units ON valid_vessels.capacity_unit=valid_measurement_units.id
WHERE valid_vessels.archived_at IS NULL
  AND valid_measurement_units.archived_at IS NULL
  AND valid_vessels.id = ANY($1::text[])
`

type GetValidVesselsWithIDsRow struct {
	CreatedAt                       time.Time
	CreatedAt_2                     time.Time
	ArchivedAt_2                    sql.NullTime
	LastUpdatedAt_2                 sql.NullTime
	ArchivedAt                      sql.NullTime
	LastUpdatedAt                   sql.NullTime
	IconPath_2                      string
	IconPath                        string
	Name                            string
	PluralName                      string
	ID_2                            string
	Name_2                          string
	Description_2                   string
	Description                     string
	ID                              string
	Shape                           VesselShape
	Slug                            string
	PluralName_2                    string
	Slug_2                          string
	ValidVesselsWidthInMillimeters  float64
	ValidVesselsLengthInMillimeters float64
	ValidVesselsHeightInMillimeters float64
	ValidVesselsCapacity            float64
	Volumetric                      sql.NullBool
	Imperial                        bool
	Metric                          bool
	UsableForStorage                bool
	DisplayInSummaryLists           bool
	Universal                       bool
	IncludeInGeneratedInstructions  bool
}

func (q *Queries) GetValidVesselsWithIDs(ctx context.Context, db DBTX, ids []string) ([]*GetValidVesselsWithIDsRow, error) {
	rows, err := db.QueryContext(ctx, getValidVesselsWithIDs, pq.Array(ids))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetValidVesselsWithIDsRow{}
	for rows.Next() {
		var i GetValidVesselsWithIDsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.PluralName,
			&i.Description,
			&i.IconPath,
			&i.UsableForStorage,
			&i.Slug,
			&i.DisplayInSummaryLists,
			&i.IncludeInGeneratedInstructions,
			&i.ValidVesselsCapacity,
			&i.ID_2,
			&i.Name_2,
			&i.Description_2,
			&i.Volumetric,
			&i.IconPath_2,
			&i.Universal,
			&i.Metric,
			&i.Imperial,
			&i.Slug_2,
			&i.PluralName_2,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.ValidVesselsWidthInMillimeters,
			&i.ValidVesselsLengthInMillimeters,
			&i.ValidVesselsHeightInMillimeters,
			&i.Shape,
			&i.CreatedAt_2,
			&i.LastUpdatedAt_2,
			&i.ArchivedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
