// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: get_needing_indexing.sql

package generated

import (
	"context"
)

const getMealsNeedingIndexing = `-- name: GetMealsNeedingIndexing :many

SELECT meals.id
  FROM meals
 WHERE (meals.archived_at IS NULL)
       AND (
			(meals.last_indexed_at IS NULL)
			OR meals.last_indexed_at
				< now() - '24 hours'::INTERVAL
		)
`

func (q *Queries) GetMealsNeedingIndexing(ctx context.Context, db DBTX) ([]string, error) {
	rows, err := db.QueryContext(ctx, getMealsNeedingIndexing)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecipesNeedingIndexing = `-- name: GetRecipesNeedingIndexing :many

SELECT recipes.id
  FROM recipes
 WHERE (recipes.archived_at IS NULL)
       AND (
			(recipes.last_indexed_at IS NULL)
			OR recipes.last_indexed_at
				< now() - '24 hours'::INTERVAL
		)
`

func (q *Queries) GetRecipesNeedingIndexing(ctx context.Context, db DBTX) ([]string, error) {
	rows, err := db.QueryContext(ctx, getRecipesNeedingIndexing)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserIDsNeedingIndexing = `-- name: GetUserIDsNeedingIndexing :many

SELECT users.id
  FROM users
 WHERE (users.archived_at IS NULL)
       AND (
			(
				users.last_indexed_at IS NULL
			)
			OR users.last_indexed_at
				< now() - '24 hours'::INTERVAL
		)
`

func (q *Queries) GetUserIDsNeedingIndexing(ctx context.Context, db DBTX) ([]string, error) {
	rows, err := db.QueryContext(ctx, getUserIDsNeedingIndexing)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getValidIngredientStatesNeedingIndexing = `-- name: GetValidIngredientStatesNeedingIndexing :many

SELECT valid_ingredient_states.id
  FROM valid_ingredient_states
 WHERE (valid_ingredient_states.archived_at IS NULL)
       AND (
			(
				valid_ingredient_states.last_indexed_at IS NULL
			)
			OR valid_ingredient_states.last_indexed_at
				< now() - '24 hours'::INTERVAL
		)
`

func (q *Queries) GetValidIngredientStatesNeedingIndexing(ctx context.Context, db DBTX) ([]string, error) {
	rows, err := db.QueryContext(ctx, getValidIngredientStatesNeedingIndexing)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getValidIngredientsNeedingIndexing = `-- name: GetValidIngredientsNeedingIndexing :many

SELECT valid_ingredients.id
  FROM valid_ingredients
 WHERE (valid_ingredients.archived_at IS NULL)
       AND (
			(valid_ingredients.last_indexed_at IS NULL)
			OR valid_ingredients.last_indexed_at
				< now() - '24 hours'::INTERVAL
		)
`

func (q *Queries) GetValidIngredientsNeedingIndexing(ctx context.Context, db DBTX) ([]string, error) {
	rows, err := db.QueryContext(ctx, getValidIngredientsNeedingIndexing)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getValidInstrumentsNeedingIndexing = `-- name: GetValidInstrumentsNeedingIndexing :many

SELECT valid_instruments.id
  FROM valid_instruments
 WHERE (valid_instruments.archived_at IS NULL)
       AND (
			(valid_instruments.last_indexed_at IS NULL)
			OR valid_instruments.last_indexed_at
				< now() - '24 hours'::INTERVAL
		)
`

func (q *Queries) GetValidInstrumentsNeedingIndexing(ctx context.Context, db DBTX) ([]string, error) {
	rows, err := db.QueryContext(ctx, getValidInstrumentsNeedingIndexing)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getValidMeasurementUnitsNeedingIndexing = `-- name: GetValidMeasurementUnitsNeedingIndexing :many

SELECT valid_measurement_units.id
  FROM valid_measurement_units
 WHERE (valid_measurement_units.archived_at IS NULL)
       AND (
			(
				valid_measurement_units.last_indexed_at IS NULL
			)
			OR valid_measurement_units.last_indexed_at
				< now() - '24 hours'::INTERVAL
		)
`

func (q *Queries) GetValidMeasurementUnitsNeedingIndexing(ctx context.Context, db DBTX) ([]string, error) {
	rows, err := db.QueryContext(ctx, getValidMeasurementUnitsNeedingIndexing)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getValidPreparationsNeedingIndexing = `-- name: GetValidPreparationsNeedingIndexing :many

SELECT valid_preparations.id
  FROM valid_preparations
 WHERE (valid_preparations.archived_at IS NULL)
       AND (
			(valid_preparations.last_indexed_at IS NULL)
			OR valid_preparations.last_indexed_at
				< now() - '24 hours'::INTERVAL
		)
`

func (q *Queries) GetValidPreparationsNeedingIndexing(ctx context.Context, db DBTX) ([]string, error) {
	rows, err := db.QueryContext(ctx, getValidPreparationsNeedingIndexing)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getValidVesselIDsNeedingIndexing = `-- name: GetValidVesselIDsNeedingIndexing :many

SELECT
	valid_vessels.id
FROM valid_vessels
	 JOIN valid_measurement_units ON valid_vessels.capacity_unit=valid_measurement_units.id
WHERE (valid_vessels.archived_at IS NULL AND valid_measurement_units.archived_at IS NULL)
   AND (
        (valid_vessels.last_indexed_at IS NULL)
        OR valid_vessels.last_indexed_at
            < now() - '24 hours'::INTERVAL
    )
`

func (q *Queries) GetValidVesselIDsNeedingIndexing(ctx context.Context, db DBTX) ([]string, error) {
	rows, err := db.QueryContext(ctx, getValidVesselIDsNeedingIndexing)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
