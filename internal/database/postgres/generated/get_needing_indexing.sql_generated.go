// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: get_needing_indexing.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const GetMealsNeedingIndexing = `-- name: GetMealsNeedingIndexing :many

SELECT meals.id
  FROM meals
 WHERE (meals.archived_at IS NULL)
       AND (
			(meals.last_indexed_at IS NULL)
			OR meals.last_indexed_at
				< now() - '24 hours'::INTERVAL
		)
`

func (q *Queries) GetMealsNeedingIndexing(ctx context.Context, db DBTX) ([]string, error) {
	rows, err := db.QueryContext(ctx, GetMealsNeedingIndexing)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetRecipesNeedingIndexing = `-- name: GetRecipesNeedingIndexing :many

SELECT recipes.id
  FROM recipes
 WHERE (recipes.archived_at IS NULL)
       AND (
			(recipes.last_indexed_at IS NULL)
			OR recipes.last_indexed_at
				< now() - '24 hours'::INTERVAL
		)
`

func (q *Queries) GetRecipesNeedingIndexing(ctx context.Context, db DBTX) ([]string, error) {
	rows, err := db.QueryContext(ctx, GetRecipesNeedingIndexing)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetUserIDsNeedingIndexing = `-- name: GetUserIDsNeedingIndexing :many

SELECT users.id
  FROM users
 WHERE (users.archived_at IS NULL)
       AND (
			(
				users.last_indexed_at IS NULL
			)
			OR users.last_indexed_at
				< now() - '24 hours'::INTERVAL
		)
`

func (q *Queries) GetUserIDsNeedingIndexing(ctx context.Context, db DBTX) ([]string, error) {
	rows, err := db.QueryContext(ctx, GetUserIDsNeedingIndexing)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetValidIngredientStatesNeedingIndexing = `-- name: GetValidIngredientStatesNeedingIndexing :many

SELECT valid_ingredient_states.id
  FROM valid_ingredient_states
 WHERE (valid_ingredient_states.archived_at IS NULL)
       AND (
			(
				valid_ingredient_states.last_indexed_at IS NULL
			)
			OR valid_ingredient_states.last_indexed_at
				< now() - '24 hours'::INTERVAL
		)
`

func (q *Queries) GetValidIngredientStatesNeedingIndexing(ctx context.Context, db DBTX) ([]string, error) {
	rows, err := db.QueryContext(ctx, GetValidIngredientStatesNeedingIndexing)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetValidIngredientsNeedingIndexing = `-- name: GetValidIngredientsNeedingIndexing :many

SELECT valid_ingredients.id
  FROM valid_ingredients
 WHERE (valid_ingredients.archived_at IS NULL)
       AND (
			(valid_ingredients.last_indexed_at IS NULL)
			OR valid_ingredients.last_indexed_at
				< now() - '24 hours'::INTERVAL
		)
`

func (q *Queries) GetValidIngredientsNeedingIndexing(ctx context.Context, db DBTX) ([]string, error) {
	rows, err := db.QueryContext(ctx, GetValidIngredientsNeedingIndexing)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetValidInstrumentsNeedingIndexing = `-- name: GetValidInstrumentsNeedingIndexing :many

SELECT valid_instruments.id
  FROM valid_instruments
 WHERE (valid_instruments.archived_at IS NULL)
       AND (
			(valid_instruments.last_indexed_at IS NULL)
			OR valid_instruments.last_indexed_at
				< now() - '24 hours'::INTERVAL
		)
`

func (q *Queries) GetValidInstrumentsNeedingIndexing(ctx context.Context, db DBTX) ([]string, error) {
	rows, err := db.QueryContext(ctx, GetValidInstrumentsNeedingIndexing)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetValidMeasurementUnitsNeedingIndexing = `-- name: GetValidMeasurementUnitsNeedingIndexing :many

SELECT valid_measurement_units.id
  FROM valid_measurement_units
 WHERE (valid_measurement_units.archived_at IS NULL)
       AND (
			(
				valid_measurement_units.last_indexed_at IS NULL
			)
			OR valid_measurement_units.last_indexed_at
				< now() - '24 hours'::INTERVAL
		)
`

func (q *Queries) GetValidMeasurementUnitsNeedingIndexing(ctx context.Context, db DBTX) ([]string, error) {
	rows, err := db.QueryContext(ctx, GetValidMeasurementUnitsNeedingIndexing)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetValidPreparationsNeedingIndexing = `-- name: GetValidPreparationsNeedingIndexing :many

SELECT valid_preparations.id
  FROM valid_preparations
 WHERE (valid_preparations.archived_at IS NULL)
       AND (
			(valid_preparations.last_indexed_at IS NULL)
			OR valid_preparations.last_indexed_at
				< now() - '24 hours'::INTERVAL
		)
`

func (q *Queries) GetValidPreparationsNeedingIndexing(ctx context.Context, db DBTX) ([]string, error) {
	rows, err := db.QueryContext(ctx, GetValidPreparationsNeedingIndexing)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetValidVesselsNeedingIndexing = `-- name: GetValidVesselsNeedingIndexing :many

SELECT
	valid_vessels.id,
    valid_vessels.name,
    valid_vessels.plural_name,
    valid_vessels.description,
    valid_vessels.icon_path,
    valid_vessels.usable_for_storage,
    valid_vessels.slug,
    valid_vessels.display_in_summary_lists,
    valid_vessels.include_in_generated_instructions,
    valid_vessels.capacity,
	valid_measurement_units.id,
	valid_measurement_units.name,
	valid_measurement_units.description,
	valid_measurement_units.volumetric,
	valid_measurement_units.icon_path,
	valid_measurement_units.universal,
	valid_measurement_units.metric,
	valid_measurement_units.imperial,
	valid_measurement_units.slug,
	valid_measurement_units.plural_name,
	valid_measurement_units.created_at,
	valid_measurement_units.last_updated_at,
	valid_measurement_units.archived_at,
    valid_vessels.width_in_millimeters,
    valid_vessels.length_in_millimeters,
    valid_vessels.height_in_millimeters,
    valid_vessels.shape,
    valid_vessels.created_at,
    valid_vessels.last_updated_at,
    valid_vessels.archived_at
FROM valid_vessels
	 JOIN valid_measurement_units ON valid_vessels.capacity_unit=valid_measurement_units.id
WHERE (valid_vessels.archived_at IS NULL AND valid_measurement_units.archived_at IS NULL)
   AND (
        (valid_vessels.last_indexed_at IS NULL)
        OR valid_vessels.last_indexed_at
            < now() - '24 hours'::INTERVAL
    )
`

type GetValidVesselsNeedingIndexingRow struct {
	CreatedAt                      time.Time      `db:"created_at"`
	CreatedAt_2                    time.Time      `db:"created_at_2"`
	ArchivedAt_2                   sql.NullTime   `db:"archived_at_2"`
	LastUpdatedAt_2                sql.NullTime   `db:"last_updated_at_2"`
	ArchivedAt                     sql.NullTime   `db:"archived_at"`
	LastUpdatedAt                  sql.NullTime   `db:"last_updated_at"`
	IconPath_2                     string         `db:"icon_path_2"`
	IconPath                       string         `db:"icon_path"`
	Name                           string         `db:"name"`
	Capacity                       string         `db:"capacity"`
	ID_2                           string         `db:"id_2"`
	Name_2                         string         `db:"name_2"`
	Description_2                  string         `db:"description_2"`
	PluralName                     string         `db:"plural_name"`
	ID                             string         `db:"id"`
	Description                    string         `db:"description"`
	Shape                          VesselShape    `db:"shape"`
	Slug                           string         `db:"slug"`
	Slug_2                         string         `db:"slug_2"`
	PluralName_2                   string         `db:"plural_name_2"`
	WidthInMillimeters             sql.NullString `db:"width_in_millimeters"`
	LengthInMillimeters            sql.NullString `db:"length_in_millimeters"`
	HeightInMillimeters            sql.NullString `db:"height_in_millimeters"`
	Volumetric                     sql.NullBool   `db:"volumetric"`
	Imperial                       bool           `db:"imperial"`
	UsableForStorage               bool           `db:"usable_for_storage"`
	DisplayInSummaryLists          bool           `db:"display_in_summary_lists"`
	Metric                         bool           `db:"metric"`
	Universal                      bool           `db:"universal"`
	IncludeInGeneratedInstructions bool           `db:"include_in_generated_instructions"`
}

func (q *Queries) GetValidVesselsNeedingIndexing(ctx context.Context, db DBTX) ([]*GetValidVesselsNeedingIndexingRow, error) {
	rows, err := db.QueryContext(ctx, GetValidVesselsNeedingIndexing)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetValidVesselsNeedingIndexingRow{}
	for rows.Next() {
		var i GetValidVesselsNeedingIndexingRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.PluralName,
			&i.Description,
			&i.IconPath,
			&i.UsableForStorage,
			&i.Slug,
			&i.DisplayInSummaryLists,
			&i.IncludeInGeneratedInstructions,
			&i.Capacity,
			&i.ID_2,
			&i.Name_2,
			&i.Description_2,
			&i.Volumetric,
			&i.IconPath_2,
			&i.Universal,
			&i.Metric,
			&i.Imperial,
			&i.Slug_2,
			&i.PluralName_2,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.WidthInMillimeters,
			&i.LengthInMillimeters,
			&i.HeightInMillimeters,
			&i.Shape,
			&i.CreatedAt_2,
			&i.LastUpdatedAt_2,
			&i.ArchivedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
