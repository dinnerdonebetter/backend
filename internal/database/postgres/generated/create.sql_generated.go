// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: create.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const createHousehold = `-- name: CreateHousehold :exec

INSERT INTO households (id,"name",billing_status,contact_phone,address_line_1,address_line_2,city,state,zip_code,country,latitude,longitude,belongs_to_user) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)
`

type CreateHouseholdParams struct {
	City          string
	Name          string
	BillingStatus string
	ContactPhone  string
	AddressLine1  string
	AddressLine2  string
	ID            string
	State         string
	ZipCode       string
	Country       string
	BelongsToUser string
	Latitude      sql.NullString
	Longitude     sql.NullString
}

func (q *Queries) CreateHousehold(ctx context.Context, db DBTX, arg *CreateHouseholdParams) error {
	_, err := db.ExecContext(ctx, createHousehold,
		arg.ID,
		arg.Name,
		arg.BillingStatus,
		arg.ContactPhone,
		arg.AddressLine1,
		arg.AddressLine2,
		arg.City,
		arg.State,
		arg.ZipCode,
		arg.Country,
		arg.Latitude,
		arg.Longitude,
		arg.BelongsToUser,
	)
	return err
}

const createHouseholdInstrumentOwnership = `-- name: CreateHouseholdInstrumentOwnership :exec

INSERT INTO household_instrument_ownerships (id,notes,quantity,valid_instrument_id,belongs_to_household) VALUES ($1,$2,$3,$4,$5)
`

type CreateHouseholdInstrumentOwnershipParams struct {
	ID                 string
	Notes              string
	ValidInstrumentID  string
	BelongsToHousehold string
	Quantity           int32
}

func (q *Queries) CreateHouseholdInstrumentOwnership(ctx context.Context, db DBTX, arg *CreateHouseholdInstrumentOwnershipParams) error {
	_, err := db.ExecContext(ctx, createHouseholdInstrumentOwnership,
		arg.ID,
		arg.Notes,
		arg.Quantity,
		arg.ValidInstrumentID,
		arg.BelongsToHousehold,
	)
	return err
}

const createHouseholdInvitation = `-- name: CreateHouseholdInvitation :exec

INSERT INTO household_invitations (id,from_user,to_user,to_name,note,to_email,token,destination_household,expires_at) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9)
`

type CreateHouseholdInvitationParams struct {
	ExpiresAt            time.Time
	ID                   string
	FromUser             string
	ToName               string
	Note                 string
	ToEmail              string
	Token                string
	DestinationHousehold string
	ToUser               sql.NullString
}

func (q *Queries) CreateHouseholdInvitation(ctx context.Context, db DBTX, arg *CreateHouseholdInvitationParams) error {
	_, err := db.ExecContext(ctx, createHouseholdInvitation,
		arg.ID,
		arg.FromUser,
		arg.ToUser,
		arg.ToName,
		arg.Note,
		arg.ToEmail,
		arg.Token,
		arg.DestinationHousehold,
		arg.ExpiresAt,
	)
	return err
}

const createMeal = `-- name: CreateMeal :exec

INSERT INTO meals (id,"name",description,min_estimated_portions,max_estimated_portions,eligible_for_meal_plans,created_by_user) VALUES ($1,$2,$3,$4,$5,$6,$7)
`

type CreateMealParams struct {
	ID                   string
	Name                 string
	Description          string
	MinEstimatedPortions string
	CreatedByUser        string
	MaxEstimatedPortions sql.NullString
	EligibleForMealPlans bool
}

func (q *Queries) CreateMeal(ctx context.Context, db DBTX, arg *CreateMealParams) error {
	_, err := db.ExecContext(ctx, createMeal,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.MinEstimatedPortions,
		arg.MaxEstimatedPortions,
		arg.EligibleForMealPlans,
		arg.CreatedByUser,
	)
	return err
}

const createMealComponent = `-- name: CreateMealComponent :exec

INSERT INTO meal_components (id,meal_id,recipe_id,meal_component_type,recipe_scale) VALUES ($1,$2,$3,$4,$5)
`

type CreateMealComponentParams struct {
	ID                string
	MealID            string
	RecipeID          string
	MealComponentType ComponentType
	RecipeScale       string
}

func (q *Queries) CreateMealComponent(ctx context.Context, db DBTX, arg *CreateMealComponentParams) error {
	_, err := db.ExecContext(ctx, createMealComponent,
		arg.ID,
		arg.MealID,
		arg.RecipeID,
		arg.MealComponentType,
		arg.RecipeScale,
	)
	return err
}

const createMealPlan = `-- name: CreateMealPlan :exec

INSERT INTO meal_plans (id,notes,status,voting_deadline,belongs_to_household,created_by_user) VALUES ($1,$2,$3,$4,$5,$6)
`

type CreateMealPlanParams struct {
	ID                 string
	Notes              string
	Status             MealPlanStatus
	VotingDeadline     time.Time
	BelongsToHousehold string
	CreatedByUser      string
}

func (q *Queries) CreateMealPlan(ctx context.Context, db DBTX, arg *CreateMealPlanParams) error {
	_, err := db.ExecContext(ctx, createMealPlan,
		arg.ID,
		arg.Notes,
		arg.Status,
		arg.VotingDeadline,
		arg.BelongsToHousehold,
		arg.CreatedByUser,
	)
	return err
}

const createMealPlanEvent = `-- name: CreateMealPlanEvent :exec

INSERT INTO
	meal_plan_events (id, notes, starts_at, ends_at, meal_name, belongs_to_meal_plan)
VALUES
	($1, $2, $3, $4, $5, $6)
`

type CreateMealPlanEventParams struct {
	ID                string
	Notes             string
	StartsAt          time.Time
	EndsAt            time.Time
	MealName          MealName
	BelongsToMealPlan string
}

func (q *Queries) CreateMealPlanEvent(ctx context.Context, db DBTX, arg *CreateMealPlanEventParams) error {
	_, err := db.ExecContext(ctx, createMealPlanEvent,
		arg.ID,
		arg.Notes,
		arg.StartsAt,
		arg.EndsAt,
		arg.MealName,
		arg.BelongsToMealPlan,
	)
	return err
}

const createMealPlanGroceryListItem = `-- name: CreateMealPlanGroceryListItem :exec

INSERT INTO meal_plan_grocery_list_items
(id,belongs_to_meal_plan,valid_ingredient,valid_measurement_unit,minimum_quantity_needed,maximum_quantity_needed,quantity_purchased,purchased_measurement_unit,purchased_upc,purchase_price,status_explanation,status)
VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12)
`

type CreateMealPlanGroceryListItemParams struct {
	ID                       string
	BelongsToMealPlan        string
	ValidIngredient          string
	ValidMeasurementUnit     string
	MinimumQuantityNeeded    string
	StatusExplanation        string
	Status                   GroceryListItemStatus
	MaximumQuantityNeeded    sql.NullString
	QuantityPurchased        sql.NullString
	PurchasedMeasurementUnit sql.NullString
	PurchasedUpc             sql.NullString
	PurchasePrice            sql.NullString
}

func (q *Queries) CreateMealPlanGroceryListItem(ctx context.Context, db DBTX, arg *CreateMealPlanGroceryListItemParams) error {
	_, err := db.ExecContext(ctx, createMealPlanGroceryListItem,
		arg.ID,
		arg.BelongsToMealPlan,
		arg.ValidIngredient,
		arg.ValidMeasurementUnit,
		arg.MinimumQuantityNeeded,
		arg.MaximumQuantityNeeded,
		arg.QuantityPurchased,
		arg.PurchasedMeasurementUnit,
		arg.PurchasedUpc,
		arg.PurchasePrice,
		arg.StatusExplanation,
		arg.Status,
	)
	return err
}

const createMealPlanOption = `-- name: CreateMealPlanOption :exec

INSERT INTO meal_plan_options (id,assigned_cook,assigned_dishwasher,meal_id,notes,meal_scale,belongs_to_meal_plan_event,chosen)
VALUES (
    $1, -- sqlc.arg(id),
    $2, -- sqlc.arg(assigned_cook),
    $3, -- sqlc.arg(assigned_dishwasher),
    $4, -- sqlc.arg(meal_id),
    $5, -- sqlc.arg(notes),
    $6, -- sqlc.arg(meal_scale)::float,
    $7, -- sqlc.arg(belongs_to_meal_plan_event),
    $8  -- sqlc.arg(chosen)::bool
)
`

type CreateMealPlanOptionParams struct {
	ID                     string
	AssignedCook           sql.NullString
	AssignedDishwasher     sql.NullString
	MealID                 string
	Notes                  string
	MealScale              string
	BelongsToMealPlanEvent sql.NullString
	Chosen                 bool
}

func (q *Queries) CreateMealPlanOption(ctx context.Context, db DBTX, arg *CreateMealPlanOptionParams) error {
	_, err := db.ExecContext(ctx, createMealPlanOption,
		arg.ID,
		arg.AssignedCook,
		arg.AssignedDishwasher,
		arg.MealID,
		arg.Notes,
		arg.MealScale,
		arg.BelongsToMealPlanEvent,
		arg.Chosen,
	)
	return err
}

const createMealPlanOptionVote = `-- name: CreateMealPlanOptionVote :exec

INSERT INTO meal_plan_option_votes (id,rank,abstain,notes,by_user,belongs_to_meal_plan_option) VALUES ($1,$2,$3,$4,$5,$6)
`

type CreateMealPlanOptionVoteParams struct {
	ID                      string
	Notes                   string
	ByUser                  string
	BelongsToMealPlanOption string
	Rank                    int32
	Abstain                 bool
}

func (q *Queries) CreateMealPlanOptionVote(ctx context.Context, db DBTX, arg *CreateMealPlanOptionVoteParams) error {
	_, err := db.ExecContext(ctx, createMealPlanOptionVote,
		arg.ID,
		arg.Rank,
		arg.Abstain,
		arg.Notes,
		arg.ByUser,
		arg.BelongsToMealPlanOption,
	)
	return err
}

const createMealPlanTask = `-- name: CreateMealPlanTask :exec

INSERT INTO meal_plan_tasks (id,status,status_explanation,creation_explanation,belongs_to_meal_plan_option,belongs_to_recipe_prep_task,assigned_to_user)
VALUES ($1,$2,$3,$4,$5,$6,$7)
`

type CreateMealPlanTaskParams struct {
	ID                      string
	Status                  PrepStepStatus
	StatusExplanation       string
	CreationExplanation     string
	BelongsToMealPlanOption string
	BelongsToRecipePrepTask string
	AssignedToUser          sql.NullString
}

func (q *Queries) CreateMealPlanTask(ctx context.Context, db DBTX, arg *CreateMealPlanTaskParams) error {
	_, err := db.ExecContext(ctx, createMealPlanTask,
		arg.ID,
		arg.Status,
		arg.StatusExplanation,
		arg.CreationExplanation,
		arg.BelongsToMealPlanOption,
		arg.BelongsToRecipePrepTask,
		arg.AssignedToUser,
	)
	return err
}

const createOAuth2Client = `-- name: CreateOAuth2Client :exec

INSERT INTO oauth2_clients (id,"name",client_id,client_secret) VALUES ($1,$2,$3,$4)
`

type CreateOAuth2ClientParams struct {
	ID           string
	Name         string
	ClientID     string
	ClientSecret string
}

func (q *Queries) CreateOAuth2Client(ctx context.Context, db DBTX, arg *CreateOAuth2ClientParams) error {
	_, err := db.ExecContext(ctx, createOAuth2Client,
		arg.ID,
		arg.Name,
		arg.ClientID,
		arg.ClientSecret,
	)
	return err
}

const createOAuth2ClientToken = `-- name: CreateOAuth2ClientToken :exec

INSERT INTO oauth2_client_tokens (id,client_id,belongs_to_user,redirect_uri,scope,code,code_challenge,code_challenge_method,code_created_at,code_expires_at,access,access_created_at,access_expires_at,refresh,refresh_created_at,refresh_expires_at) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16)
`

type CreateOAuth2ClientTokenParams struct {
	AccessExpiresAt     time.Time
	CodeExpiresAt       time.Time
	RefreshExpiresAt    time.Time
	RefreshCreatedAt    time.Time
	CodeCreatedAt       time.Time
	AccessCreatedAt     time.Time
	CodeChallenge       string
	CodeChallengeMethod string
	Scope               Oauth2ClientTokenScopes
	ClientID            string
	Access              string
	Code                string
	ID                  string
	Refresh             string
	RedirectUri         string
	BelongsToUser       string
}

func (q *Queries) CreateOAuth2ClientToken(ctx context.Context, db DBTX, arg *CreateOAuth2ClientTokenParams) error {
	_, err := db.ExecContext(ctx, createOAuth2ClientToken,
		arg.ID,
		arg.ClientID,
		arg.BelongsToUser,
		arg.RedirectUri,
		arg.Scope,
		arg.Code,
		arg.CodeChallenge,
		arg.CodeChallengeMethod,
		arg.CodeCreatedAt,
		arg.CodeExpiresAt,
		arg.Access,
		arg.AccessCreatedAt,
		arg.AccessExpiresAt,
		arg.Refresh,
		arg.RefreshCreatedAt,
		arg.RefreshExpiresAt,
	)
	return err
}

const createPasswordResetToken = `-- name: CreatePasswordResetToken :exec

INSERT INTO password_reset_tokens (id,token,expires_at,belongs_to_user) VALUES ($1,$2,NOW() + (30 * interval '1 minutes'),$3)
`

type CreatePasswordResetTokenParams struct {
	ID            string
	Token         string
	BelongsToUser string
}

func (q *Queries) CreatePasswordResetToken(ctx context.Context, db DBTX, arg *CreatePasswordResetTokenParams) error {
	_, err := db.ExecContext(ctx, createPasswordResetToken, arg.ID, arg.Token, arg.BelongsToUser)
	return err
}

const createRecipe = `-- name: CreateRecipe :exec

INSERT INTO recipes (id,"name",slug,"source",description,inspired_by_recipe_id,min_estimated_portions,max_estimated_portions,portion_name,plural_portion_name,seal_of_approval,eligible_for_meals,yields_component_type,created_by_user) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14)
`

type CreateRecipeParams struct {
	MinEstimatedPortions string
	ID                   string
	Slug                 string
	Source               string
	Description          string
	CreatedByUser        string
	Name                 string
	YieldsComponentType  ComponentType
	PortionName          string
	PluralPortionName    string
	MaxEstimatedPortions sql.NullString
	InspiredByRecipeID   sql.NullString
	SealOfApproval       bool
	EligibleForMeals     bool
}

func (q *Queries) CreateRecipe(ctx context.Context, db DBTX, arg *CreateRecipeParams) error {
	_, err := db.ExecContext(ctx, createRecipe,
		arg.ID,
		arg.Name,
		arg.Slug,
		arg.Source,
		arg.Description,
		arg.InspiredByRecipeID,
		arg.MinEstimatedPortions,
		arg.MaxEstimatedPortions,
		arg.PortionName,
		arg.PluralPortionName,
		arg.SealOfApproval,
		arg.EligibleForMeals,
		arg.YieldsComponentType,
		arg.CreatedByUser,
	)
	return err
}

const createRecipeMedia = `-- name: CreateRecipeMedia :exec

INSERT INTO recipe_media (id,belongs_to_recipe,belongs_to_recipe_step,mime_type,internal_path,external_path,"index")
	VALUES ($1,$2,$3,$4,$5,$6,$7)
`

type CreateRecipeMediaParams struct {
	ID                  string
	MimeType            string
	InternalPath        string
	ExternalPath        string
	BelongsToRecipe     sql.NullString
	BelongsToRecipeStep sql.NullString
	Index               int32
}

func (q *Queries) CreateRecipeMedia(ctx context.Context, db DBTX, arg *CreateRecipeMediaParams) error {
	_, err := db.ExecContext(ctx, createRecipeMedia,
		arg.ID,
		arg.BelongsToRecipe,
		arg.BelongsToRecipeStep,
		arg.MimeType,
		arg.InternalPath,
		arg.ExternalPath,
		arg.Index,
	)
	return err
}

const createRecipePrepTask = `-- name: CreateRecipePrepTask :exec

INSERT INTO recipe_prep_tasks (id,name,description,notes,optional,explicit_storage_instructions,minimum_time_buffer_before_recipe_in_seconds,maximum_time_buffer_before_recipe_in_seconds,storage_type,minimum_storage_temperature_in_celsius,maximum_storage_temperature_in_celsius,belongs_to_recipe)
VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12)
`

type CreateRecipePrepTaskParams struct {
	ID                                     string
	Name                                   string
	Description                            string
	Notes                                  string
	ExplicitStorageInstructions            string
	BelongsToRecipe                        string
	StorageType                            NullStorageContainerType
	MinimumStorageTemperatureInCelsius     sql.NullString
	MaximumStorageTemperatureInCelsius     sql.NullString
	MaximumTimeBufferBeforeRecipeInSeconds sql.NullInt32
	MinimumTimeBufferBeforeRecipeInSeconds int32
	Optional                               bool
}

func (q *Queries) CreateRecipePrepTask(ctx context.Context, db DBTX, arg *CreateRecipePrepTaskParams) error {
	_, err := db.ExecContext(ctx, createRecipePrepTask,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Notes,
		arg.Optional,
		arg.ExplicitStorageInstructions,
		arg.MinimumTimeBufferBeforeRecipeInSeconds,
		arg.MaximumTimeBufferBeforeRecipeInSeconds,
		arg.StorageType,
		arg.MinimumStorageTemperatureInCelsius,
		arg.MaximumStorageTemperatureInCelsius,
		arg.BelongsToRecipe,
	)
	return err
}

const createRecipePrepTaskStep = `-- name: CreateRecipePrepTaskStep :exec

INSERT INTO recipe_prep_task_steps (id,belongs_to_recipe_prep_task,belongs_to_recipe_step,satisfies_recipe_step)
VALUES ($1,$2,$3,$4)
`

type CreateRecipePrepTaskStepParams struct {
	ID                      string
	BelongsToRecipePrepTask string
	BelongsToRecipeStep     string
	SatisfiesRecipeStep     bool
}

func (q *Queries) CreateRecipePrepTaskStep(ctx context.Context, db DBTX, arg *CreateRecipePrepTaskStepParams) error {
	_, err := db.ExecContext(ctx, createRecipePrepTaskStep,
		arg.ID,
		arg.BelongsToRecipePrepTask,
		arg.BelongsToRecipeStep,
		arg.SatisfiesRecipeStep,
	)
	return err
}

const createRecipeRating = `-- name: CreateRecipeRating :exec

INSERT INTO recipe_ratings (id,recipe_id,taste,difficulty,cleanup,instructions,overall,notes,by_user) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9)
`

type CreateRecipeRatingParams struct {
	ID           string
	RecipeID     string
	Notes        string
	ByUser       string
	Taste        sql.NullString
	Difficulty   sql.NullString
	Cleanup      sql.NullString
	Instructions sql.NullString
	Overall      sql.NullString
}

func (q *Queries) CreateRecipeRating(ctx context.Context, db DBTX, arg *CreateRecipeRatingParams) error {
	_, err := db.ExecContext(ctx, createRecipeRating,
		arg.ID,
		arg.RecipeID,
		arg.Taste,
		arg.Difficulty,
		arg.Cleanup,
		arg.Instructions,
		arg.Overall,
		arg.Notes,
		arg.ByUser,
	)
	return err
}

const createRecipeStep = `-- name: CreateRecipeStep :exec

INSERT INTO recipe_steps
(id,index,preparation_id,minimum_estimated_time_in_seconds,maximum_estimated_time_in_seconds,minimum_temperature_in_celsius,maximum_temperature_in_celsius,notes,explicit_instructions,condition_expression,optional,start_timer_automatically,belongs_to_recipe)
VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)
`

type CreateRecipeStepParams struct {
	ID                            string
	BelongsToRecipe               string
	PreparationID                 string
	ConditionExpression           string
	ExplicitInstructions          string
	Notes                         string
	MaximumTemperatureInCelsius   sql.NullString
	MinimumTemperatureInCelsius   sql.NullString
	MaximumEstimatedTimeInSeconds sql.NullInt64
	MinimumEstimatedTimeInSeconds sql.NullInt64
	Index                         int32
	Optional                      bool
	StartTimerAutomatically       bool
}

func (q *Queries) CreateRecipeStep(ctx context.Context, db DBTX, arg *CreateRecipeStepParams) error {
	_, err := db.ExecContext(ctx, createRecipeStep,
		arg.ID,
		arg.Index,
		arg.PreparationID,
		arg.MinimumEstimatedTimeInSeconds,
		arg.MaximumEstimatedTimeInSeconds,
		arg.MinimumTemperatureInCelsius,
		arg.MaximumTemperatureInCelsius,
		arg.Notes,
		arg.ExplicitInstructions,
		arg.ConditionExpression,
		arg.Optional,
		arg.StartTimerAutomatically,
		arg.BelongsToRecipe,
	)
	return err
}

const createRecipeStepCompletionCondition = `-- name: CreateRecipeStepCompletionCondition :exec

INSERT INTO recipe_step_completion_conditions (
	id,
	belongs_to_recipe_step,
	ingredient_state,
	optional,
	notes
) VALUES ($1,$2,$3,$4,$5)
`

type CreateRecipeStepCompletionConditionParams struct {
	ID                  string
	BelongsToRecipeStep string
	IngredientState     string
	Notes               string
	Optional            bool
}

func (q *Queries) CreateRecipeStepCompletionCondition(ctx context.Context, db DBTX, arg *CreateRecipeStepCompletionConditionParams) error {
	_, err := db.ExecContext(ctx, createRecipeStepCompletionCondition,
		arg.ID,
		arg.BelongsToRecipeStep,
		arg.IngredientState,
		arg.Optional,
		arg.Notes,
	)
	return err
}

const createRecipeStepCompletionConditionIngredient = `-- name: CreateRecipeStepCompletionConditionIngredient :exec

INSERT INTO recipe_step_completion_condition_ingredients (
	id,
	belongs_to_recipe_step_completion_condition,
	recipe_step_ingredient
) VALUES ($1,$2,$3)
`

type CreateRecipeStepCompletionConditionIngredientParams struct {
	ID                                     string
	BelongsToRecipeStepCompletionCondition string
	RecipeStepIngredient                   string
}

func (q *Queries) CreateRecipeStepCompletionConditionIngredient(ctx context.Context, db DBTX, arg *CreateRecipeStepCompletionConditionIngredientParams) error {
	_, err := db.ExecContext(ctx, createRecipeStepCompletionConditionIngredient, arg.ID, arg.BelongsToRecipeStepCompletionCondition, arg.RecipeStepIngredient)
	return err
}

const createRecipeStepIngredient = `-- name: CreateRecipeStepIngredient :exec

INSERT INTO recipe_step_ingredients (
	id,
	"name",
	optional,
	ingredient_id,
	measurement_unit,
	minimum_quantity_value,
	maximum_quantity_value,
	quantity_notes,
	recipe_step_product_id,
	ingredient_notes,
	option_index,
	to_taste,
	product_percentage_to_use,
    vessel_index,
    recipe_step_product_recipe_id,
	belongs_to_recipe_step
) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16)
`

type CreateRecipeStepIngredientParams struct {
	QuantityNotes             string
	Name                      string
	BelongsToRecipeStep       string
	IngredientNotes           string
	ID                        string
	MinimumQuantityValue      string
	RecipeStepProductID       sql.NullString
	MaximumQuantityValue      sql.NullString
	MeasurementUnit           sql.NullString
	IngredientID              sql.NullString
	ProductPercentageToUse    sql.NullString
	RecipeStepProductRecipeID sql.NullString
	VesselIndex               sql.NullInt32
	OptionIndex               int32
	ToTaste                   bool
	Optional                  bool
}

func (q *Queries) CreateRecipeStepIngredient(ctx context.Context, db DBTX, arg *CreateRecipeStepIngredientParams) error {
	_, err := db.ExecContext(ctx, createRecipeStepIngredient,
		arg.ID,
		arg.Name,
		arg.Optional,
		arg.IngredientID,
		arg.MeasurementUnit,
		arg.MinimumQuantityValue,
		arg.MaximumQuantityValue,
		arg.QuantityNotes,
		arg.RecipeStepProductID,
		arg.IngredientNotes,
		arg.OptionIndex,
		arg.ToTaste,
		arg.ProductPercentageToUse,
		arg.VesselIndex,
		arg.RecipeStepProductRecipeID,
		arg.BelongsToRecipeStep,
	)
	return err
}

const createRecipeStepInstrument = `-- name: CreateRecipeStepInstrument :exec

INSERT INTO recipe_step_instruments
(id,instrument_id,recipe_step_product_id,"name",notes,preference_rank,optional,option_index,minimum_quantity,maximum_quantity,belongs_to_recipe_step)
VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11)
`

type CreateRecipeStepInstrumentParams struct {
	ID                  string
	Name                string
	Notes               string
	BelongsToRecipeStep string
	InstrumentID        sql.NullString
	RecipeStepProductID sql.NullString
	MaximumQuantity     sql.NullInt32
	PreferenceRank      int32
	OptionIndex         int32
	MinimumQuantity     int32
	Optional            bool
}

func (q *Queries) CreateRecipeStepInstrument(ctx context.Context, db DBTX, arg *CreateRecipeStepInstrumentParams) error {
	_, err := db.ExecContext(ctx, createRecipeStepInstrument,
		arg.ID,
		arg.InstrumentID,
		arg.RecipeStepProductID,
		arg.Name,
		arg.Notes,
		arg.PreferenceRank,
		arg.Optional,
		arg.OptionIndex,
		arg.MinimumQuantity,
		arg.MaximumQuantity,
		arg.BelongsToRecipeStep,
	)
	return err
}

const createRecipeStepProduct = `-- name: CreateRecipeStepProduct :exec

INSERT INTO recipe_step_products
(id,"name","type",measurement_unit,minimum_quantity_value,maximum_quantity_value,quantity_notes,compostable,maximum_storage_duration_in_seconds,minimum_storage_temperature_in_celsius,maximum_storage_temperature_in_celsius,storage_instructions,belongs_to_recipe_step,is_liquid,is_waste,"index",contained_in_vessel_index)
VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17)
`

type CreateRecipeStepProductParams struct {
	QuantityNotes                      string
	Name                               string
	Type                               RecipeStepProductType
	BelongsToRecipeStep                string
	ID                                 string
	StorageInstructions                string
	MinimumQuantityValue               sql.NullString
	MinimumStorageTemperatureInCelsius sql.NullString
	MaximumStorageTemperatureInCelsius sql.NullString
	MaximumQuantityValue               sql.NullString
	MeasurementUnit                    sql.NullString
	MaximumStorageDurationInSeconds    sql.NullInt32
	ContainedInVesselIndex             sql.NullInt32
	Index                              int32
	Compostable                        bool
	IsLiquid                           bool
	IsWaste                            bool
}

func (q *Queries) CreateRecipeStepProduct(ctx context.Context, db DBTX, arg *CreateRecipeStepProductParams) error {
	_, err := db.ExecContext(ctx, createRecipeStepProduct,
		arg.ID,
		arg.Name,
		arg.Type,
		arg.MeasurementUnit,
		arg.MinimumQuantityValue,
		arg.MaximumQuantityValue,
		arg.QuantityNotes,
		arg.Compostable,
		arg.MaximumStorageDurationInSeconds,
		arg.MinimumStorageTemperatureInCelsius,
		arg.MaximumStorageTemperatureInCelsius,
		arg.StorageInstructions,
		arg.BelongsToRecipeStep,
		arg.IsLiquid,
		arg.IsWaste,
		arg.Index,
		arg.ContainedInVesselIndex,
	)
	return err
}

const createRecipeStepVessel = `-- name: CreateRecipeStepVessel :exec

INSERT INTO recipe_step_vessels
(id,"name",notes,belongs_to_recipe_step,recipe_step_product_id,valid_vessel_id,vessel_predicate,minimum_quantity,maximum_quantity,unavailable_after_step)
VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10)
`

type CreateRecipeStepVesselParams struct {
	ID                   string
	Name                 string
	Notes                string
	BelongsToRecipeStep  string
	VesselPredicate      string
	RecipeStepProductID  sql.NullString
	ValidVesselID        sql.NullString
	MaximumQuantity      sql.NullInt32
	MinimumQuantity      int32
	UnavailableAfterStep bool
}

func (q *Queries) CreateRecipeStepVessel(ctx context.Context, db DBTX, arg *CreateRecipeStepVesselParams) error {
	_, err := db.ExecContext(ctx, createRecipeStepVessel,
		arg.ID,
		arg.Name,
		arg.Notes,
		arg.BelongsToRecipeStep,
		arg.RecipeStepProductID,
		arg.ValidVesselID,
		arg.VesselPredicate,
		arg.MinimumQuantity,
		arg.MaximumQuantity,
		arg.UnavailableAfterStep,
	)
	return err
}

const createServiceSetting = `-- name: CreateServiceSetting :exec

INSERT INTO service_settings (id,name,type,description,default_value,admins_only,enumeration) VALUES
($1,$2,$3,$4,$5,$6,$7)
`

type CreateServiceSettingParams struct {
	ID           string
	Name         string
	Type         SettingType
	Description  string
	Enumeration  string
	DefaultValue sql.NullString
	AdminsOnly   bool
}

func (q *Queries) CreateServiceSetting(ctx context.Context, db DBTX, arg *CreateServiceSettingParams) error {
	_, err := db.ExecContext(ctx, createServiceSetting,
		arg.ID,
		arg.Name,
		arg.Type,
		arg.Description,
		arg.DefaultValue,
		arg.AdminsOnly,
		arg.Enumeration,
	)
	return err
}

const createServiceSettingConfiguration = `-- name: CreateServiceSettingConfiguration :exec

INSERT INTO service_setting_configurations (id,value,notes,service_setting_id,belongs_to_user,belongs_to_household) VALUES ($1,$2,$3,$4,$5,$6)
`

type CreateServiceSettingConfigurationParams struct {
	ID                 string
	Value              string
	Notes              string
	ServiceSettingID   string
	BelongsToUser      string
	BelongsToHousehold string
}

func (q *Queries) CreateServiceSettingConfiguration(ctx context.Context, db DBTX, arg *CreateServiceSettingConfigurationParams) error {
	_, err := db.ExecContext(ctx, createServiceSettingConfiguration,
		arg.ID,
		arg.Value,
		arg.Notes,
		arg.ServiceSettingID,
		arg.BelongsToUser,
		arg.BelongsToHousehold,
	)
	return err
}

const createUser = `-- name: CreateUser :exec

INSERT INTO users (id,first_name,last_name,username,email_address,hashed_password,two_factor_secret,avatar_src,user_account_status,birthday,service_role,email_address_verification_token) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12)
`

type CreateUserParams struct {
	ID                            string
	FirstName                     string
	LastName                      string
	Username                      string
	EmailAddress                  string
	HashedPassword                string
	TwoFactorSecret               string
	AvatarSrc                     sql.NullString
	UserAccountStatus             string
	Birthday                      sql.NullTime
	ServiceRole                   string
	EmailAddressVerificationToken sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, db DBTX, arg *CreateUserParams) error {
	_, err := db.ExecContext(ctx, createUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Username,
		arg.EmailAddress,
		arg.HashedPassword,
		arg.TwoFactorSecret,
		arg.AvatarSrc,
		arg.UserAccountStatus,
		arg.Birthday,
		arg.ServiceRole,
		arg.EmailAddressVerificationToken,
	)
	return err
}

const createUserIngredientPreference = `-- name: CreateUserIngredientPreference :exec

INSERT INTO user_ingredient_preferences (id,ingredient,rating,notes,allergy,belongs_to_user) VALUES ($1,$2,$3,$4,$5,$6)
`

type CreateUserIngredientPreferenceParams struct {
	ID            string
	Ingredient    string
	Notes         string
	BelongsToUser string
	Rating        int16
	Allergy       bool
}

func (q *Queries) CreateUserIngredientPreference(ctx context.Context, db DBTX, arg *CreateUserIngredientPreferenceParams) error {
	_, err := db.ExecContext(ctx, createUserIngredientPreference,
		arg.ID,
		arg.Ingredient,
		arg.Rating,
		arg.Notes,
		arg.Allergy,
		arg.BelongsToUser,
	)
	return err
}

const createValidIngredient = `-- name: CreateValidIngredient :exec

INSERT INTO valid_ingredients
(
	id,
	"name",
	description,
	warning,
	contains_egg,
	contains_dairy,
	contains_peanut,
	contains_tree_nut,
	contains_soy,
	contains_wheat,
	contains_shellfish,
	contains_sesame,
	contains_fish,
	contains_gluten,
	animal_flesh,
	volumetric,
	is_liquid,
	icon_path,
	animal_derived,
	plural_name,
	restrict_to_preparations,
	minimum_ideal_storage_temperature_in_celsius,
	maximum_ideal_storage_temperature_in_celsius,
	storage_instructions,
	slug,
	contains_alcohol,
	shopping_suggestions,
    is_starch,
    is_protein,
    is_grain,
    is_fruit,
    is_salt,
    is_fat,
    is_acid,
    is_heat
) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35)
`

type CreateValidIngredientParams struct {
	ID                                      string
	Name                                    string
	Description                             string
	Warning                                 string
	ShoppingSuggestions                     string
	Slug                                    string
	StorageInstructions                     string
	PluralName                              string
	IconPath                                string
	MaximumIdealStorageTemperatureInCelsius sql.NullString
	MinimumIdealStorageTemperatureInCelsius sql.NullString
	IsLiquid                                sql.NullBool
	ContainsTreeNut                         bool
	IsHeat                                  bool
	ContainsFish                            bool
	Volumetric                              bool
	ContainsSesame                          bool
	ContainsShellfish                       bool
	AnimalDerived                           bool
	ContainsWheat                           bool
	RestrictToPreparations                  bool
	ContainsDairy                           bool
	AnimalFlesh                             bool
	ContainsGluten                          bool
	ContainsSoy                             bool
	ContainsAlcohol                         bool
	ContainsEgg                             bool
	IsStarch                                bool
	IsProtein                               bool
	IsGrain                                 bool
	IsFruit                                 bool
	IsSalt                                  bool
	IsFat                                   bool
	IsAcid                                  bool
	ContainsPeanut                          bool
}

func (q *Queries) CreateValidIngredient(ctx context.Context, db DBTX, arg *CreateValidIngredientParams) error {
	_, err := db.ExecContext(ctx, createValidIngredient,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Warning,
		arg.ContainsEgg,
		arg.ContainsDairy,
		arg.ContainsPeanut,
		arg.ContainsTreeNut,
		arg.ContainsSoy,
		arg.ContainsWheat,
		arg.ContainsShellfish,
		arg.ContainsSesame,
		arg.ContainsFish,
		arg.ContainsGluten,
		arg.AnimalFlesh,
		arg.Volumetric,
		arg.IsLiquid,
		arg.IconPath,
		arg.AnimalDerived,
		arg.PluralName,
		arg.RestrictToPreparations,
		arg.MinimumIdealStorageTemperatureInCelsius,
		arg.MaximumIdealStorageTemperatureInCelsius,
		arg.StorageInstructions,
		arg.Slug,
		arg.ContainsAlcohol,
		arg.ShoppingSuggestions,
		arg.IsStarch,
		arg.IsProtein,
		arg.IsGrain,
		arg.IsFruit,
		arg.IsSalt,
		arg.IsFat,
		arg.IsAcid,
		arg.IsHeat,
	)
	return err
}

const createValidIngredientGroup = `-- name: CreateValidIngredientGroup :exec

INSERT INTO valid_ingredient_groups
(
	id,
	"name",
	description,
	slug
) VALUES ($1,$2,$3,$4)
`

type CreateValidIngredientGroupParams struct {
	ID          string
	Name        string
	Description string
	Slug        string
}

func (q *Queries) CreateValidIngredientGroup(ctx context.Context, db DBTX, arg *CreateValidIngredientGroupParams) error {
	_, err := db.ExecContext(ctx, createValidIngredientGroup,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Slug,
	)
	return err
}

const createValidIngredientMeasurementUnit = `-- name: CreateValidIngredientMeasurementUnit :exec

INSERT INTO valid_ingredient_measurement_units
(id,notes,valid_measurement_unit_id,valid_ingredient_id,minimum_allowable_quantity,maximum_allowable_quantity)
VALUES ($1,$2,$3,$4,$5,$6)
`

type CreateValidIngredientMeasurementUnitParams struct {
	ID                       string
	Notes                    string
	ValidMeasurementUnitID   string
	ValidIngredientID        string
	MinimumAllowableQuantity string
	MaximumAllowableQuantity sql.NullString
}

func (q *Queries) CreateValidIngredientMeasurementUnit(ctx context.Context, db DBTX, arg *CreateValidIngredientMeasurementUnitParams) error {
	_, err := db.ExecContext(ctx, createValidIngredientMeasurementUnit,
		arg.ID,
		arg.Notes,
		arg.ValidMeasurementUnitID,
		arg.ValidIngredientID,
		arg.MinimumAllowableQuantity,
		arg.MaximumAllowableQuantity,
	)
	return err
}

const createValidIngredientPreparation = `-- name: CreateValidIngredientPreparation :exec

INSERT INTO valid_ingredient_preparations (id,notes,valid_preparation_id,valid_ingredient_id) VALUES ($1,$2,$3,$4)
`

type CreateValidIngredientPreparationParams struct {
	ID                 string
	Notes              string
	ValidPreparationID string
	ValidIngredientID  string
}

func (q *Queries) CreateValidIngredientPreparation(ctx context.Context, db DBTX, arg *CreateValidIngredientPreparationParams) error {
	_, err := db.ExecContext(ctx, createValidIngredientPreparation,
		arg.ID,
		arg.Notes,
		arg.ValidPreparationID,
		arg.ValidIngredientID,
	)
	return err
}

const createValidIngredientState = `-- name: CreateValidIngredientState :exec

INSERT INTO valid_ingredient_states (id,"name",description,icon_path,past_tense,slug,attribute_type) VALUES ($1,$2,$3,$4,$5,$6,$7)
`

type CreateValidIngredientStateParams struct {
	ID            string
	Name          string
	Description   string
	IconPath      string
	PastTense     string
	Slug          string
	AttributeType IngredientAttributeType
}

func (q *Queries) CreateValidIngredientState(ctx context.Context, db DBTX, arg *CreateValidIngredientStateParams) error {
	_, err := db.ExecContext(ctx, createValidIngredientState,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.IconPath,
		arg.PastTense,
		arg.Slug,
		arg.AttributeType,
	)
	return err
}

const createValidIngredientStateIngredient = `-- name: CreateValidIngredientStateIngredient :exec

INSERT INTO valid_ingredient_state_ingredients (id,notes,valid_ingredient_state,valid_ingredient) VALUES ($1,$2,$3,$4)
`

type CreateValidIngredientStateIngredientParams struct {
	ID                   string
	Notes                string
	ValidIngredientState string
	ValidIngredient      string
}

func (q *Queries) CreateValidIngredientStateIngredient(ctx context.Context, db DBTX, arg *CreateValidIngredientStateIngredientParams) error {
	_, err := db.ExecContext(ctx, createValidIngredientStateIngredient,
		arg.ID,
		arg.Notes,
		arg.ValidIngredientState,
		arg.ValidIngredient,
	)
	return err
}

const createValidInstrument = `-- name: CreateValidInstrument :exec

INSERT INTO valid_instruments (id,"name",plural_name,description,icon_path,usable_for_storage,display_in_summary_lists,include_in_generated_instructions,slug) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9)
`

type CreateValidInstrumentParams struct {
	ID                             string
	Name                           string
	PluralName                     string
	Description                    string
	IconPath                       string
	Slug                           string
	UsableForStorage               bool
	DisplayInSummaryLists          bool
	IncludeInGeneratedInstructions bool
}

func (q *Queries) CreateValidInstrument(ctx context.Context, db DBTX, arg *CreateValidInstrumentParams) error {
	_, err := db.ExecContext(ctx, createValidInstrument,
		arg.ID,
		arg.Name,
		arg.PluralName,
		arg.Description,
		arg.IconPath,
		arg.UsableForStorage,
		arg.DisplayInSummaryLists,
		arg.IncludeInGeneratedInstructions,
		arg.Slug,
	)
	return err
}

const createValidMeasurementConversion = `-- name: CreateValidMeasurementConversion :exec

INSERT INTO valid_measurement_conversions (id,from_unit,to_unit,only_for_ingredient,modifier,notes)
VALUES ($1,$2,$3,$4,$5,$6)
`

type CreateValidMeasurementConversionParams struct {
	ID                string
	FromUnit          string
	ToUnit            string
	Modifier          string
	Notes             string
	OnlyForIngredient sql.NullString
}

func (q *Queries) CreateValidMeasurementConversion(ctx context.Context, db DBTX, arg *CreateValidMeasurementConversionParams) error {
	_, err := db.ExecContext(ctx, createValidMeasurementConversion,
		arg.ID,
		arg.FromUnit,
		arg.ToUnit,
		arg.OnlyForIngredient,
		arg.Modifier,
		arg.Notes,
	)
	return err
}

const createValidMeasurementUnit = `-- name: CreateValidMeasurementUnit :exec

INSERT INTO valid_measurement_units
(id,"name",description,volumetric,icon_path,universal,metric,imperial,plural_name,slug)
VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10)
`

type CreateValidMeasurementUnitParams struct {
	ID          string
	Name        string
	Description string
	IconPath    string
	PluralName  string
	Slug        string
	Volumetric  sql.NullBool
	Universal   bool
	Metric      bool
	Imperial    bool
}

func (q *Queries) CreateValidMeasurementUnit(ctx context.Context, db DBTX, arg *CreateValidMeasurementUnitParams) error {
	_, err := db.ExecContext(ctx, createValidMeasurementUnit,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Volumetric,
		arg.IconPath,
		arg.Universal,
		arg.Metric,
		arg.Imperial,
		arg.PluralName,
		arg.Slug,
	)
	return err
}

const createValidPreparation = `-- name: CreateValidPreparation :exec

INSERT INTO valid_preparations (id,"name",description,icon_path,yields_nothing,restrict_to_ingredients,minimum_ingredient_count,maximum_ingredient_count,minimum_instrument_count,maximum_instrument_count,temperature_required,time_estimate_required,condition_expression_required,consumes_vessel,only_for_vessels,minimum_vessel_count,maximum_vessel_count,past_tense,slug) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19)
`

type CreateValidPreparationParams struct {
	Name                        string
	Description                 string
	IconPath                    string
	ID                          string
	Slug                        string
	PastTense                   string
	MaximumIngredientCount      sql.NullInt32
	MaximumInstrumentCount      sql.NullInt32
	MaximumVesselCount          sql.NullInt32
	MinimumVesselCount          int32
	MinimumIngredientCount      int32
	MinimumInstrumentCount      int32
	YieldsNothing               bool
	ConsumesVessel              bool
	OnlyForVessels              bool
	ConditionExpressionRequired bool
	TimeEstimateRequired        bool
	TemperatureRequired         bool
	RestrictToIngredients       bool
}

func (q *Queries) CreateValidPreparation(ctx context.Context, db DBTX, arg *CreateValidPreparationParams) error {
	_, err := db.ExecContext(ctx, createValidPreparation,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.IconPath,
		arg.YieldsNothing,
		arg.RestrictToIngredients,
		arg.MinimumIngredientCount,
		arg.MaximumIngredientCount,
		arg.MinimumInstrumentCount,
		arg.MaximumInstrumentCount,
		arg.TemperatureRequired,
		arg.TimeEstimateRequired,
		arg.ConditionExpressionRequired,
		arg.ConsumesVessel,
		arg.OnlyForVessels,
		arg.MinimumVesselCount,
		arg.MaximumVesselCount,
		arg.PastTense,
		arg.Slug,
	)
	return err
}

const createValidPreparationInstrument = `-- name: CreateValidPreparationInstrument :exec

INSERT INTO valid_preparation_instruments (id,notes,valid_preparation_id,valid_instrument_id) VALUES ($1,$2,$3,$4)
`

type CreateValidPreparationInstrumentParams struct {
	ID                 string
	Notes              string
	ValidPreparationID string
	ValidInstrumentID  string
}

func (q *Queries) CreateValidPreparationInstrument(ctx context.Context, db DBTX, arg *CreateValidPreparationInstrumentParams) error {
	_, err := db.ExecContext(ctx, createValidPreparationInstrument,
		arg.ID,
		arg.Notes,
		arg.ValidPreparationID,
		arg.ValidInstrumentID,
	)
	return err
}

const createValidPreparationVessel = `-- name: CreateValidPreparationVessel :exec

INSERT INTO valid_preparation_vessels (id,notes,valid_preparation_id,valid_vessel_id) VALUES ($1,$2,$3,$4)
`

type CreateValidPreparationVesselParams struct {
	ID                 string
	Notes              string
	ValidPreparationID string
	ValidVesselID      string
}

func (q *Queries) CreateValidPreparationVessel(ctx context.Context, db DBTX, arg *CreateValidPreparationVesselParams) error {
	_, err := db.ExecContext(ctx, createValidPreparationVessel,
		arg.ID,
		arg.Notes,
		arg.ValidPreparationID,
		arg.ValidVesselID,
	)
	return err
}

const createValidVessel = `-- name: CreateValidVessel :exec

INSERT INTO valid_vessels (id,"name",plural_name,description,icon_path,usable_for_storage,slug,display_in_summary_lists,include_in_generated_instructions,capacity,capacity_unit,width_in_millimeters,length_in_millimeters,height_in_millimeters,shape)
    VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10::float,$11,$12::float,$13::float,$14::float,$15)
`

type CreateValidVesselParams struct {
	Slug                           string
	ID                             string
	PluralName                     string
	Description                    string
	IconPath                       string
	Shape                          VesselShape
	Name                           string
	CapacityUnit                   sql.NullString
	Capacity                       float64
	WidthInMillimeters             float64
	LengthInMillimeters            float64
	HeightInMillimeters            float64
	IncludeInGeneratedInstructions bool
	DisplayInSummaryLists          bool
	UsableForStorage               bool
}

func (q *Queries) CreateValidVessel(ctx context.Context, db DBTX, arg *CreateValidVesselParams) error {
	_, err := db.ExecContext(ctx, createValidVessel,
		arg.ID,
		arg.Name,
		arg.PluralName,
		arg.Description,
		arg.IconPath,
		arg.UsableForStorage,
		arg.Slug,
		arg.DisplayInSummaryLists,
		arg.IncludeInGeneratedInstructions,
		arg.Capacity,
		arg.CapacityUnit,
		arg.WidthInMillimeters,
		arg.LengthInMillimeters,
		arg.HeightInMillimeters,
		arg.Shape,
	)
	return err
}

const createWebhook = `-- name: CreateWebhook :exec

INSERT INTO webhooks (
	id,
	"name",
	content_type,
	url,
	"method",
	belongs_to_household
)
VALUES
	($1, $2, $3, $4, $5, $6)
`

type CreateWebhookParams struct {
	ID                 string
	Name               string
	ContentType        string
	URL                string
	Method             string
	BelongsToHousehold string
}

func (q *Queries) CreateWebhook(ctx context.Context, db DBTX, arg *CreateWebhookParams) error {
	_, err := db.ExecContext(ctx, createWebhook,
		arg.ID,
		arg.Name,
		arg.ContentType,
		arg.URL,
		arg.Method,
		arg.BelongsToHousehold,
	)
	return err
}

const createWebhookTriggerEvent = `-- name: CreateWebhookTriggerEvent :exec

INSERT INTO webhook_trigger_events (
	id,
	trigger_event,
	belongs_to_webhook
) VALUES ($1, $2, $3)
`

type CreateWebhookTriggerEventParams struct {
	ID               string
	TriggerEvent     WebhookEvent
	BelongsToWebhook string
}

func (q *Queries) CreateWebhookTriggerEvent(ctx context.Context, db DBTX, arg *CreateWebhookTriggerEventParams) error {
	_, err := db.ExecContext(ctx, createWebhookTriggerEvent, arg.ID, arg.TriggerEvent, arg.BelongsToWebhook)
	return err
}
