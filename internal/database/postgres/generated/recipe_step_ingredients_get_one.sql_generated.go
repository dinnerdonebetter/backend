// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: recipe_step_ingredients_get_one.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const GetRecipeStepIngredient = `-- name: GetRecipeStepIngredient :exec
SELECT
	recipe_step_ingredients.id,
	recipe_step_ingredients.name,
	recipe_step_ingredients.optional,
	valid_ingredients.id,
	valid_ingredients.name,
	valid_ingredients.description,
	valid_ingredients.warning,
	valid_ingredients.contains_egg,
	valid_ingredients.contains_dairy,
	valid_ingredients.contains_peanut,
	valid_ingredients.contains_tree_nut,
	valid_ingredients.contains_soy,
	valid_ingredients.contains_wheat,
	valid_ingredients.contains_shellfish,
	valid_ingredients.contains_sesame,
	valid_ingredients.contains_fish,
	valid_ingredients.contains_gluten,
	valid_ingredients.animal_flesh,
	valid_ingredients.volumetric,
	valid_ingredients.is_liquid,
	valid_ingredients.icon_path,
	valid_ingredients.animal_derived,
	valid_ingredients.plural_name,
	valid_ingredients.restrict_to_preparations,
	valid_ingredients.minimum_ideal_storage_temperature_in_celsius,
	valid_ingredients.maximum_ideal_storage_temperature_in_celsius,
	valid_ingredients.storage_instructions,
	valid_ingredients.created_at,
	valid_ingredients.last_updated_at,
	valid_ingredients.archived_at,
	valid_measurement_units.id,
	valid_measurement_units.name,
	valid_measurement_units.description,
	valid_measurement_units.volumetric,
	valid_measurement_units.icon_path,
	valid_measurement_units.universal,
	valid_measurement_units.metric,
	valid_measurement_units.imperial,
	valid_measurement_units.plural_name,
	valid_measurement_units.created_at,
	valid_measurement_units.last_updated_at,
	valid_measurement_units.archived_at,
	recipe_step_ingredients.minimum_quantity_value,
	recipe_step_ingredients.maximum_quantity_value,
	recipe_step_ingredients.quantity_notes,
	recipe_step_ingredients.product_of_recipe_step,
	recipe_step_ingredients.recipe_step_product_id,
	recipe_step_ingredients.ingredient_notes,
	recipe_step_ingredients.created_at,
	recipe_step_ingredients.last_updated_at,
	recipe_step_ingredients.archived_at,
	recipe_step_ingredients.belongs_to_recipe_step
FROM recipe_step_ingredients
	 JOIN recipe_steps ON recipe_step_ingredients.belongs_to_recipe_step=recipe_steps.id
	 JOIN recipes ON recipe_steps.belongs_to_recipe=recipes.id
	 JOIN valid_ingredients ON recipe_step_ingredients.ingredient_id=valid_ingredients.id
	 JOIN valid_measurement_units ON recipe_step_ingredients.measurement_unit=valid_measurement_units.id
WHERE recipe_step_ingredients.archived_at IS NULL
	AND recipe_step_ingredients.belongs_to_recipe_step = $1
	AND recipe_step_ingredients.id = $2
	AND recipe_steps.archived_at IS NULL
	AND recipe_steps.belongs_to_recipe = $3
	AND recipe_steps.id = $4
	AND recipes.archived_at IS NULL
	AND recipes.id = $5
`

type GetRecipeStepIngredientParams struct {
	BelongsToRecipeStep string `db:"belongs_to_recipe_step"`
	ID                  string `db:"id"`
	BelongsToRecipe     string `db:"belongs_to_recipe"`
	ID_2                string `db:"id_2"`
	ID_3                string `db:"id_3"`
}

type GetRecipeStepIngredientRow struct {
	CreatedAt_2                             time.Time      `db:"created_at_2"`
	CreatedAt_3                             time.Time      `db:"created_at_3"`
	CreatedAt                               time.Time      `db:"created_at"`
	LastUpdatedAt                           sql.NullTime   `db:"last_updated_at"`
	ArchivedAt                              sql.NullTime   `db:"archived_at"`
	LastUpdatedAt_2                         sql.NullTime   `db:"last_updated_at_2"`
	ArchivedAt_2                            sql.NullTime   `db:"archived_at_2"`
	LastUpdatedAt_3                         sql.NullTime   `db:"last_updated_at_3"`
	ArchivedAt_3                            sql.NullTime   `db:"archived_at_3"`
	MinimumQuantityValue                    string         `db:"minimum_quantity_value"`
	IngredientNotes                         string         `db:"ingredient_notes"`
	QuantityNotes                           string         `db:"quantity_notes"`
	MaximumQuantityValue                    string         `db:"maximum_quantity_value"`
	Warning                                 string         `db:"warning"`
	Description                             string         `db:"description"`
	Name_2                                  string         `db:"name_2"`
	PluralName_2                            string         `db:"plural_name_2"`
	IconPath_2                              string         `db:"icon_path_2"`
	Description_2                           string         `db:"description_2"`
	Name_3                                  string         `db:"name_3"`
	IconPath                                string         `db:"icon_path"`
	ID_3                                    string         `db:"id_3"`
	PluralName                              string         `db:"plural_name"`
	ID_2                                    string         `db:"id_2"`
	Name                                    string         `db:"name"`
	StorageInstructions                     string         `db:"storage_instructions"`
	ID                                      string         `db:"id"`
	BelongsToRecipeStep                     string         `db:"belongs_to_recipe_step"`
	MinimumIdealStorageTemperatureInCelsius sql.NullString `db:"minimum_ideal_storage_temperature_in_celsius"`
	RecipeStepProductID                     sql.NullString `db:"recipe_step_product_id"`
	MaximumIdealStorageTemperatureInCelsius sql.NullString `db:"maximum_ideal_storage_temperature_in_celsius"`
	Volumetric_2                            sql.NullBool   `db:"volumetric_2"`
	IsLiquid                                sql.NullBool   `db:"is_liquid"`
	ContainsSesame                          bool           `db:"contains_sesame"`
	AnimalFlesh                             bool           `db:"animal_flesh"`
	Universal                               bool           `db:"universal"`
	Metric                                  bool           `db:"metric"`
	Imperial                                bool           `db:"imperial"`
	ContainsGluten                          bool           `db:"contains_gluten"`
	AnimalDerived                           bool           `db:"animal_derived"`
	ContainsFish                            bool           `db:"contains_fish"`
	Volumetric                              bool           `db:"volumetric"`
	ContainsShellfish                       bool           `db:"contains_shellfish"`
	ContainsWheat                           bool           `db:"contains_wheat"`
	ContainsSoy                             bool           `db:"contains_soy"`
	ContainsTreeNut                         bool           `db:"contains_tree_nut"`
	RestrictToPreparations                  bool           `db:"restrict_to_preparations"`
	ContainsPeanut                          bool           `db:"contains_peanut"`
	ContainsDairy                           bool           `db:"contains_dairy"`
	ContainsEgg                             bool           `db:"contains_egg"`
	Optional                                bool           `db:"optional"`
	ProductOfRecipeStep                     bool           `db:"product_of_recipe_step"`
}

func (q *Queries) GetRecipeStepIngredient(ctx context.Context, arg *GetRecipeStepIngredientParams) error {
	_, err := q.exec(ctx, q.getRecipeStepIngredientStmt, GetRecipeStepIngredient,
		arg.BelongsToRecipeStep,
		arg.ID,
		arg.BelongsToRecipe,
		arg.ID_2,
		arg.ID_3,
	)
	return err
}
