// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: valid_ingredient_preparations.sql

package generated

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
)

const archiveValidIngredientPreparation = `-- name: ArchiveValidIngredientPreparation :exec

UPDATE valid_ingredient_preparations SET archived_at = NOW() WHERE archived_at IS NULL AND id = $1
`

func (q *Queries) ArchiveValidIngredientPreparation(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, archiveValidIngredientPreparation, id)
	return err
}

const checkValidIngredientPreparationExistence = `-- name: CheckValidIngredientPreparationExistence :one

SELECT EXISTS ( SELECT valid_ingredient_preparations.id FROM valid_ingredient_preparations WHERE valid_ingredient_preparations.archived_at IS NULL AND valid_ingredient_preparations.id = $1 )
`

func (q *Queries) CheckValidIngredientPreparationExistence(ctx context.Context, db DBTX, id string) (bool, error) {
	row := db.QueryRowContext(ctx, checkValidIngredientPreparationExistence, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createValidIngredientPreparation = `-- name: CreateValidIngredientPreparation :exec

INSERT INTO valid_ingredient_preparations (id,notes,valid_preparation_id,valid_ingredient_id) VALUES ($1,$2,$3,$4)
`

type CreateValidIngredientPreparationParams struct {
	ID                 string
	Notes              string
	ValidPreparationID string
	ValidIngredientID  string
}

func (q *Queries) CreateValidIngredientPreparation(ctx context.Context, db DBTX, arg *CreateValidIngredientPreparationParams) error {
	_, err := db.ExecContext(ctx, createValidIngredientPreparation,
		arg.ID,
		arg.Notes,
		arg.ValidPreparationID,
		arg.ValidIngredientID,
	)
	return err
}

const getValidIngredientPreparation = `-- name: GetValidIngredientPreparation :one

SELECT
    valid_ingredient_preparations.id as valid_ingredient_preparation_id,
    valid_ingredient_preparations.notes as valid_ingredient_preparation_notes,
    valid_preparations.id as valid_preparation_id,
    valid_preparations.name as valid_preparation_name,
    valid_preparations.description as valid_preparation_description,
    valid_preparations.icon_path as valid_preparation_icon_path,
    valid_preparations.yields_nothing as valid_preparation_yields_nothing,
    valid_preparations.restrict_to_ingredients as valid_preparation_restrict_to_ingredients,
    valid_preparations.minimum_ingredient_count as valid_preparation_minimum_ingredient_count,
    valid_preparations.maximum_ingredient_count as valid_preparation_maximum_ingredient_count,
    valid_preparations.minimum_instrument_count as valid_preparation_minimum_instrument_count,
    valid_preparations.maximum_instrument_count as valid_preparation_maximum_instrument_count,
    valid_preparations.temperature_required as valid_preparation_temperature_required,
    valid_preparations.time_estimate_required as valid_preparation_time_estimate_required,
    valid_preparations.condition_expression_required as valid_preparation_condition_expression_required,
    valid_preparations.consumes_vessel as valid_preparation_consumes_vessel,
    valid_preparations.only_for_vessels as valid_preparation_only_for_vessels,
    valid_preparations.minimum_vessel_count as valid_preparation_minimum_vessel_count,
    valid_preparations.maximum_vessel_count as valid_preparation_maximum_vessel_count,
    valid_preparations.slug as valid_preparation_slug,
    valid_preparations.past_tense as valid_preparation_past_tense,
    valid_preparations.created_at as valid_preparation_created_at,
    valid_preparations.last_updated_at as valid_preparation_last_updated_at,
    valid_preparations.archived_at as valid_preparation_archived_at,
    valid_ingredients.id as valid_ingredient_id,
    valid_ingredients.name as valid_ingredient_name,
    valid_ingredients.description as valid_ingredient_description,
    valid_ingredients.warning as valid_ingredient_warning,
    valid_ingredients.contains_egg as valid_ingredient_contains_egg,
    valid_ingredients.contains_dairy as valid_ingredient_contains_dairy,
    valid_ingredients.contains_peanut as valid_ingredient_contains_peanut,
    valid_ingredients.contains_tree_nut as valid_ingredient_contains_tree_nut,
    valid_ingredients.contains_soy as valid_ingredient_contains_soy,
    valid_ingredients.contains_wheat as valid_ingredient_contains_wheat,
    valid_ingredients.contains_shellfish as valid_ingredient_contains_shellfish,
    valid_ingredients.contains_sesame as valid_ingredient_contains_sesame,
    valid_ingredients.contains_fish as valid_ingredient_contains_fish,
    valid_ingredients.contains_gluten as valid_ingredient_contains_gluten,
    valid_ingredients.animal_flesh as valid_ingredient_animal_flesh,
    valid_ingredients.volumetric as valid_ingredient_volumetric,
    valid_ingredients.is_liquid as valid_ingredient_is_liquid,
    valid_ingredients.icon_path as valid_ingredient_icon_path,
    valid_ingredients.animal_derived as valid_ingredient_animal_derived,
    valid_ingredients.plural_name as valid_ingredient_plural_name,
    valid_ingredients.restrict_to_preparations as valid_ingredient_restrict_to_preparations,
    valid_ingredients.minimum_ideal_storage_temperature_in_celsius as valid_ingredient_minimum_ideal_storage_temperature_in_celsius,
    valid_ingredients.maximum_ideal_storage_temperature_in_celsius as valid_ingredient_maximum_ideal_storage_temperature_in_celsius,
    valid_ingredients.storage_instructions as valid_ingredient_storage_instructions,
    valid_ingredients.slug as valid_ingredient_slug,
    valid_ingredients.contains_alcohol as valid_ingredient_contains_alcohol,
    valid_ingredients.shopping_suggestions as valid_ingredient_shopping_suggestions,
    valid_ingredients.is_starch as valid_ingredient_is_starch,
    valid_ingredients.is_protein as valid_ingredient_is_protein,
    valid_ingredients.is_grain as valid_ingredient_is_grain,
    valid_ingredients.is_fruit as valid_ingredient_is_fruit,
    valid_ingredients.is_salt as valid_ingredient_is_salt,
    valid_ingredients.is_fat as valid_ingredient_is_fat,
    valid_ingredients.is_acid as valid_ingredient_is_acid,
    valid_ingredients.is_heat as valid_ingredient_is_heat,
    valid_ingredients.created_at as valid_ingredient_created_at,
    valid_ingredients.last_updated_at as valid_ingredient_last_updated_at,
    valid_ingredients.archived_at as valid_ingredient_archived_at,
    valid_ingredient_preparations.created_at as valid_ingredient_preparation_created_at,
    valid_ingredient_preparations.last_updated_at as valid_ingredient_preparation_last_updated_at,
    valid_ingredient_preparations.archived_at as valid_ingredient_preparation_archived_at
FROM valid_ingredient_preparations
	JOIN valid_ingredients ON valid_ingredient_preparations.valid_ingredient_id = valid_ingredients.id
	JOIN valid_preparations ON valid_ingredient_preparations.valid_preparation_id = valid_preparations.id
WHERE valid_ingredient_preparations.archived_at IS NULL
	AND valid_ingredient_preparations.id = $1
`

type GetValidIngredientPreparationRow struct {
	ValidIngredientPreparationCreatedAt                    time.Time
	ValidPreparationCreatedAt                              time.Time
	ValidIngredientCreatedAt                               time.Time
	ValidPreparationArchivedAt                             sql.NullTime
	ValidPreparationLastUpdatedAt                          sql.NullTime
	ValidIngredientLastUpdatedAt                           sql.NullTime
	ValidIngredientPreparationArchivedAt                   sql.NullTime
	ValidIngredientPreparationLastUpdatedAt                sql.NullTime
	ValidIngredientArchivedAt                              sql.NullTime
	ValidIngredientID                                      string
	ValidPreparationID                                     string
	ValidIngredientIconPath                                string
	ValidIngredientPluralName                              string
	ValidIngredientStorageInstructions                     string
	ValidPreparationIconPath                               string
	ValidIngredientPreparationID                           string
	ValidPreparationDescription                            string
	ValidIngredientSlug                                    string
	ValidIngredientShoppingSuggestions                     string
	ValidPreparationSlug                                   string
	ValidPreparationPastTense                              string
	ValidPreparationName                                   string
	ValidIngredientWarning                                 string
	ValidIngredientPreparationNotes                        string
	ValidIngredientDescription                             string
	ValidIngredientName                                    string
	ValidIngredientMaximumIdealStorageTemperatureInCelsius sql.NullString
	ValidIngredientMinimumIdealStorageTemperatureInCelsius sql.NullString
	ValidPreparationMaximumVesselCount                     sql.NullInt32
	ValidPreparationMaximumIngredientCount                 sql.NullInt32
	ValidPreparationMaximumInstrumentCount                 sql.NullInt32
	ValidPreparationMinimumInstrumentCount                 int32
	ValidPreparationMinimumVesselCount                     int32
	ValidPreparationMinimumIngredientCount                 int32
	ValidIngredientIsLiquid                                sql.NullBool
	ValidPreparationConsumesVessel                         bool
	ValidIngredientContainsFish                            bool
	ValidIngredientContainsGluten                          bool
	ValidIngredientAnimalFlesh                             bool
	ValidIngredientVolumetric                              bool
	ValidIngredientContainsSesame                          bool
	ValidIngredientContainsShellfish                       bool
	ValidIngredientAnimalDerived                           bool
	ValidIngredientContainsWheat                           bool
	ValidIngredientRestrictToPreparations                  bool
	ValidIngredientContainsSoy                             bool
	ValidIngredientContainsTreeNut                         bool
	ValidIngredientContainsPeanut                          bool
	ValidIngredientContainsDairy                           bool
	ValidIngredientContainsAlcohol                         bool
	ValidIngredientContainsEgg                             bool
	ValidIngredientIsStarch                                bool
	ValidIngredientIsProtein                               bool
	ValidIngredientIsGrain                                 bool
	ValidIngredientIsFruit                                 bool
	ValidIngredientIsSalt                                  bool
	ValidIngredientIsFat                                   bool
	ValidIngredientIsAcid                                  bool
	ValidIngredientIsHeat                                  bool
	ValidPreparationOnlyForVessels                         bool
	ValidPreparationConditionExpressionRequired            bool
	ValidPreparationTimeEstimateRequired                   bool
	ValidPreparationTemperatureRequired                    bool
	ValidPreparationRestrictToIngredients                  bool
	ValidPreparationYieldsNothing                          bool
}

func (q *Queries) GetValidIngredientPreparation(ctx context.Context, db DBTX, id string) (*GetValidIngredientPreparationRow, error) {
	row := db.QueryRowContext(ctx, getValidIngredientPreparation, id)
	var i GetValidIngredientPreparationRow
	err := row.Scan(
		&i.ValidIngredientPreparationID,
		&i.ValidIngredientPreparationNotes,
		&i.ValidPreparationID,
		&i.ValidPreparationName,
		&i.ValidPreparationDescription,
		&i.ValidPreparationIconPath,
		&i.ValidPreparationYieldsNothing,
		&i.ValidPreparationRestrictToIngredients,
		&i.ValidPreparationMinimumIngredientCount,
		&i.ValidPreparationMaximumIngredientCount,
		&i.ValidPreparationMinimumInstrumentCount,
		&i.ValidPreparationMaximumInstrumentCount,
		&i.ValidPreparationTemperatureRequired,
		&i.ValidPreparationTimeEstimateRequired,
		&i.ValidPreparationConditionExpressionRequired,
		&i.ValidPreparationConsumesVessel,
		&i.ValidPreparationOnlyForVessels,
		&i.ValidPreparationMinimumVesselCount,
		&i.ValidPreparationMaximumVesselCount,
		&i.ValidPreparationSlug,
		&i.ValidPreparationPastTense,
		&i.ValidPreparationCreatedAt,
		&i.ValidPreparationLastUpdatedAt,
		&i.ValidPreparationArchivedAt,
		&i.ValidIngredientID,
		&i.ValidIngredientName,
		&i.ValidIngredientDescription,
		&i.ValidIngredientWarning,
		&i.ValidIngredientContainsEgg,
		&i.ValidIngredientContainsDairy,
		&i.ValidIngredientContainsPeanut,
		&i.ValidIngredientContainsTreeNut,
		&i.ValidIngredientContainsSoy,
		&i.ValidIngredientContainsWheat,
		&i.ValidIngredientContainsShellfish,
		&i.ValidIngredientContainsSesame,
		&i.ValidIngredientContainsFish,
		&i.ValidIngredientContainsGluten,
		&i.ValidIngredientAnimalFlesh,
		&i.ValidIngredientVolumetric,
		&i.ValidIngredientIsLiquid,
		&i.ValidIngredientIconPath,
		&i.ValidIngredientAnimalDerived,
		&i.ValidIngredientPluralName,
		&i.ValidIngredientRestrictToPreparations,
		&i.ValidIngredientMinimumIdealStorageTemperatureInCelsius,
		&i.ValidIngredientMaximumIdealStorageTemperatureInCelsius,
		&i.ValidIngredientStorageInstructions,
		&i.ValidIngredientSlug,
		&i.ValidIngredientContainsAlcohol,
		&i.ValidIngredientShoppingSuggestions,
		&i.ValidIngredientIsStarch,
		&i.ValidIngredientIsProtein,
		&i.ValidIngredientIsGrain,
		&i.ValidIngredientIsFruit,
		&i.ValidIngredientIsSalt,
		&i.ValidIngredientIsFat,
		&i.ValidIngredientIsAcid,
		&i.ValidIngredientIsHeat,
		&i.ValidIngredientCreatedAt,
		&i.ValidIngredientLastUpdatedAt,
		&i.ValidIngredientArchivedAt,
		&i.ValidIngredientPreparationCreatedAt,
		&i.ValidIngredientPreparationLastUpdatedAt,
		&i.ValidIngredientPreparationArchivedAt,
	)
	return &i, err
}

const getValidIngredientPreparations = `-- name: GetValidIngredientPreparations :many

SELECT
    valid_ingredient_preparations.id as valid_ingredient_preparation_id,
    valid_ingredient_preparations.notes as valid_ingredient_preparation_notes,
    valid_preparations.id as valid_preparation_id,
    valid_preparations.name as valid_preparation_name,
    valid_preparations.description as valid_preparation_description,
    valid_preparations.icon_path as valid_preparation_icon_path,
    valid_preparations.yields_nothing as valid_preparation_yields_nothing,
    valid_preparations.restrict_to_ingredients as valid_preparation_restrict_to_ingredients,
    valid_preparations.minimum_ingredient_count as valid_preparation_minimum_ingredient_count,
    valid_preparations.maximum_ingredient_count as valid_preparation_maximum_ingredient_count,
    valid_preparations.minimum_instrument_count as valid_preparation_minimum_instrument_count,
    valid_preparations.maximum_instrument_count as valid_preparation_maximum_instrument_count,
    valid_preparations.temperature_required as valid_preparation_temperature_required,
    valid_preparations.time_estimate_required as valid_preparation_time_estimate_required,
    valid_preparations.condition_expression_required as valid_preparation_condition_expression_required,
    valid_preparations.consumes_vessel as valid_preparation_consumes_vessel,
    valid_preparations.only_for_vessels as valid_preparation_only_for_vessels,
    valid_preparations.minimum_vessel_count as valid_preparation_minimum_vessel_count,
    valid_preparations.maximum_vessel_count as valid_preparation_maximum_vessel_count,
    valid_preparations.slug as valid_preparation_slug,
    valid_preparations.past_tense as valid_preparation_past_tense,
    valid_preparations.created_at as valid_preparation_created_at,
    valid_preparations.last_updated_at as valid_preparation_last_updated_at,
    valid_preparations.archived_at as valid_preparation_archived_at,
    valid_ingredients.id as valid_ingredient_id,
    valid_ingredients.name as valid_ingredient_name,
    valid_ingredients.description as valid_ingredient_description,
    valid_ingredients.warning as valid_ingredient_warning,
    valid_ingredients.contains_egg as valid_ingredient_contains_egg,
    valid_ingredients.contains_dairy as valid_ingredient_contains_dairy,
    valid_ingredients.contains_peanut as valid_ingredient_contains_peanut,
    valid_ingredients.contains_tree_nut as valid_ingredient_contains_tree_nut,
    valid_ingredients.contains_soy as valid_ingredient_contains_soy,
    valid_ingredients.contains_wheat as valid_ingredient_contains_wheat,
    valid_ingredients.contains_shellfish as valid_ingredient_contains_shellfish,
    valid_ingredients.contains_sesame as valid_ingredient_contains_sesame,
    valid_ingredients.contains_fish as valid_ingredient_contains_fish,
    valid_ingredients.contains_gluten as valid_ingredient_contains_gluten,
    valid_ingredients.animal_flesh as valid_ingredient_animal_flesh,
    valid_ingredients.volumetric as valid_ingredient_volumetric,
    valid_ingredients.is_liquid as valid_ingredient_is_liquid,
    valid_ingredients.icon_path as valid_ingredient_icon_path,
    valid_ingredients.animal_derived as valid_ingredient_animal_derived,
    valid_ingredients.plural_name as valid_ingredient_plural_name,
    valid_ingredients.restrict_to_preparations as valid_ingredient_restrict_to_preparations,
    valid_ingredients.minimum_ideal_storage_temperature_in_celsius as valid_ingredient_minimum_ideal_storage_temperature_in_celsius,
    valid_ingredients.maximum_ideal_storage_temperature_in_celsius as valid_ingredient_maximum_ideal_storage_temperature_in_celsius,
    valid_ingredients.storage_instructions as valid_ingredient_storage_instructions,
    valid_ingredients.slug as valid_ingredient_slug,
    valid_ingredients.contains_alcohol as valid_ingredient_contains_alcohol,
    valid_ingredients.shopping_suggestions as valid_ingredient_shopping_suggestions,
    valid_ingredients.is_starch as valid_ingredient_is_starch,
    valid_ingredients.is_protein as valid_ingredient_is_protein,
    valid_ingredients.is_grain as valid_ingredient_is_grain,
    valid_ingredients.is_fruit as valid_ingredient_is_fruit,
    valid_ingredients.is_salt as valid_ingredient_is_salt,
    valid_ingredients.is_fat as valid_ingredient_is_fat,
    valid_ingredients.is_acid as valid_ingredient_is_acid,
    valid_ingredients.is_heat as valid_ingredient_is_heat,
    valid_ingredients.created_at as valid_ingredient_created_at,
    valid_ingredients.last_updated_at as valid_ingredient_last_updated_at,
    valid_ingredients.archived_at as valid_ingredient_archived_at,
    valid_ingredient_preparations.created_at as valid_ingredient_preparation_created_at,
    valid_ingredient_preparations.last_updated_at as valid_ingredient_preparation_last_updated_at,
    valid_ingredient_preparations.archived_at as valid_ingredient_preparation_archived_at,
    (
        SELECT
            COUNT(valid_ingredient_preparations.id)
        FROM
            valid_ingredient_preparations
        WHERE
            valid_ingredient_preparations.archived_at IS NULL
          AND valid_ingredient_preparations.created_at > COALESCE($1, (SELECT NOW() - interval '999 years'))
          AND valid_ingredient_preparations.created_at < COALESCE($2, (SELECT NOW() + interval '999 years'))
          AND (valid_ingredient_preparations.last_updated_at IS NULL OR valid_ingredient_preparations.last_updated_at > COALESCE($3, (SELECT NOW() - interval '999 years')))
          AND (valid_ingredient_preparations.last_updated_at IS NULL OR valid_ingredient_preparations.last_updated_at < COALESCE($4, (SELECT NOW() + interval '999 years')))
    ) as filtered_count,
    (
        SELECT
            COUNT(valid_ingredient_preparations.id)
        FROM
            valid_ingredient_preparations
        WHERE
            valid_ingredient_preparations.archived_at IS NULL
    ) as total_count
FROM
    valid_ingredient_preparations
        JOIN valid_ingredients ON valid_ingredient_preparations.valid_ingredient_id = valid_ingredients.id
        JOIN valid_preparations ON valid_ingredient_preparations.valid_preparation_id = valid_preparations.id
WHERE
    valid_ingredient_preparations.archived_at IS NULL
  AND valid_ingredient_preparations.created_at > COALESCE($1, (SELECT NOW() - interval '999 years'))
  AND valid_ingredient_preparations.created_at < COALESCE($2, (SELECT NOW() + interval '999 years'))
  AND (valid_ingredient_preparations.last_updated_at IS NULL OR valid_ingredient_preparations.last_updated_at > COALESCE($3, (SELECT NOW() - interval '999 years')))
  AND (valid_ingredient_preparations.last_updated_at IS NULL OR valid_ingredient_preparations.last_updated_at < COALESCE($4, (SELECT NOW() + interval '999 years')))
OFFSET $5
    LIMIT $6
`

type GetValidIngredientPreparationsParams struct {
	CreatedAfter  sql.NullTime
	CreatedBefore sql.NullTime
	UpdatedAfter  sql.NullTime
	UpdatedBefore sql.NullTime
	QueryOffset   sql.NullInt32
	QueryLimit    sql.NullInt32
}

type GetValidIngredientPreparationsRow struct {
	ValidPreparationCreatedAt                              time.Time
	ValidIngredientPreparationCreatedAt                    time.Time
	ValidIngredientCreatedAt                               time.Time
	ValidIngredientPreparationArchivedAt                   sql.NullTime
	ValidIngredientLastUpdatedAt                           sql.NullTime
	ValidPreparationArchivedAt                             sql.NullTime
	ValidPreparationLastUpdatedAt                          sql.NullTime
	ValidIngredientArchivedAt                              sql.NullTime
	ValidIngredientPreparationLastUpdatedAt                sql.NullTime
	ValidIngredientIconPath                                string
	ValidPreparationPastTense                              string
	ValidIngredientPreparationID                           string
	ValidIngredientPluralName                              string
	ValidIngredientPreparationNotes                        string
	ValidPreparationName                                   string
	ValidPreparationID                                     string
	ValidIngredientWarning                                 string
	ValidIngredientStorageInstructions                     string
	ValidIngredientSlug                                    string
	ValidPreparationSlug                                   string
	ValidIngredientDescription                             string
	ValidIngredientShoppingSuggestions                     string
	ValidPreparationIconPath                               string
	ValidPreparationDescription                            string
	ValidIngredientID                                      string
	ValidIngredientName                                    string
	ValidIngredientMinimumIdealStorageTemperatureInCelsius sql.NullString
	ValidIngredientMaximumIdealStorageTemperatureInCelsius sql.NullString
	TotalCount                                             int64
	FilteredCount                                          int64
	ValidPreparationMaximumIngredientCount                 sql.NullInt32
	ValidPreparationMaximumVesselCount                     sql.NullInt32
	ValidPreparationMaximumInstrumentCount                 sql.NullInt32
	ValidPreparationMinimumVesselCount                     int32
	ValidPreparationMinimumInstrumentCount                 int32
	ValidPreparationMinimumIngredientCount                 int32
	ValidIngredientIsLiquid                                sql.NullBool
	ValidPreparationConsumesVessel                         bool
	ValidIngredientAnimalFlesh                             bool
	ValidIngredientVolumetric                              bool
	ValidIngredientContainsGluten                          bool
	ValidIngredientContainsFish                            bool
	ValidIngredientAnimalDerived                           bool
	ValidIngredientContainsSesame                          bool
	ValidIngredientRestrictToPreparations                  bool
	ValidIngredientContainsShellfish                       bool
	ValidIngredientContainsWheat                           bool
	ValidIngredientContainsSoy                             bool
	ValidIngredientContainsTreeNut                         bool
	ValidIngredientContainsAlcohol                         bool
	ValidIngredientContainsPeanut                          bool
	ValidIngredientIsStarch                                bool
	ValidIngredientIsProtein                               bool
	ValidIngredientIsGrain                                 bool
	ValidIngredientIsFruit                                 bool
	ValidIngredientIsSalt                                  bool
	ValidIngredientIsFat                                   bool
	ValidIngredientIsAcid                                  bool
	ValidIngredientIsHeat                                  bool
	ValidIngredientContainsDairy                           bool
	ValidIngredientContainsEgg                             bool
	ValidPreparationOnlyForVessels                         bool
	ValidPreparationConditionExpressionRequired            bool
	ValidPreparationTimeEstimateRequired                   bool
	ValidPreparationTemperatureRequired                    bool
	ValidPreparationRestrictToIngredients                  bool
	ValidPreparationYieldsNothing                          bool
}

func (q *Queries) GetValidIngredientPreparations(ctx context.Context, db DBTX, arg *GetValidIngredientPreparationsParams) ([]*GetValidIngredientPreparationsRow, error) {
	rows, err := db.QueryContext(ctx, getValidIngredientPreparations,
		arg.CreatedAfter,
		arg.CreatedBefore,
		arg.UpdatedAfter,
		arg.UpdatedBefore,
		arg.QueryOffset,
		arg.QueryLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetValidIngredientPreparationsRow{}
	for rows.Next() {
		var i GetValidIngredientPreparationsRow
		if err := rows.Scan(
			&i.ValidIngredientPreparationID,
			&i.ValidIngredientPreparationNotes,
			&i.ValidPreparationID,
			&i.ValidPreparationName,
			&i.ValidPreparationDescription,
			&i.ValidPreparationIconPath,
			&i.ValidPreparationYieldsNothing,
			&i.ValidPreparationRestrictToIngredients,
			&i.ValidPreparationMinimumIngredientCount,
			&i.ValidPreparationMaximumIngredientCount,
			&i.ValidPreparationMinimumInstrumentCount,
			&i.ValidPreparationMaximumInstrumentCount,
			&i.ValidPreparationTemperatureRequired,
			&i.ValidPreparationTimeEstimateRequired,
			&i.ValidPreparationConditionExpressionRequired,
			&i.ValidPreparationConsumesVessel,
			&i.ValidPreparationOnlyForVessels,
			&i.ValidPreparationMinimumVesselCount,
			&i.ValidPreparationMaximumVesselCount,
			&i.ValidPreparationSlug,
			&i.ValidPreparationPastTense,
			&i.ValidPreparationCreatedAt,
			&i.ValidPreparationLastUpdatedAt,
			&i.ValidPreparationArchivedAt,
			&i.ValidIngredientID,
			&i.ValidIngredientName,
			&i.ValidIngredientDescription,
			&i.ValidIngredientWarning,
			&i.ValidIngredientContainsEgg,
			&i.ValidIngredientContainsDairy,
			&i.ValidIngredientContainsPeanut,
			&i.ValidIngredientContainsTreeNut,
			&i.ValidIngredientContainsSoy,
			&i.ValidIngredientContainsWheat,
			&i.ValidIngredientContainsShellfish,
			&i.ValidIngredientContainsSesame,
			&i.ValidIngredientContainsFish,
			&i.ValidIngredientContainsGluten,
			&i.ValidIngredientAnimalFlesh,
			&i.ValidIngredientVolumetric,
			&i.ValidIngredientIsLiquid,
			&i.ValidIngredientIconPath,
			&i.ValidIngredientAnimalDerived,
			&i.ValidIngredientPluralName,
			&i.ValidIngredientRestrictToPreparations,
			&i.ValidIngredientMinimumIdealStorageTemperatureInCelsius,
			&i.ValidIngredientMaximumIdealStorageTemperatureInCelsius,
			&i.ValidIngredientStorageInstructions,
			&i.ValidIngredientSlug,
			&i.ValidIngredientContainsAlcohol,
			&i.ValidIngredientShoppingSuggestions,
			&i.ValidIngredientIsStarch,
			&i.ValidIngredientIsProtein,
			&i.ValidIngredientIsGrain,
			&i.ValidIngredientIsFruit,
			&i.ValidIngredientIsSalt,
			&i.ValidIngredientIsFat,
			&i.ValidIngredientIsAcid,
			&i.ValidIngredientIsHeat,
			&i.ValidIngredientCreatedAt,
			&i.ValidIngredientLastUpdatedAt,
			&i.ValidIngredientArchivedAt,
			&i.ValidIngredientPreparationCreatedAt,
			&i.ValidIngredientPreparationLastUpdatedAt,
			&i.ValidIngredientPreparationArchivedAt,
			&i.FilteredCount,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getValidIngredientPreparationsForIngredient = `-- name: GetValidIngredientPreparationsForIngredient :many

SELECT
  valid_ingredient_preparations.id as valid_ingredient_preparation_id,
  valid_ingredient_preparations.notes as valid_ingredient_preparation_notes,
  valid_preparations.id as valid_preparation_id,
  valid_preparations.name as valid_preparation_name,
  valid_preparations.description as valid_preparation_description,
  valid_preparations.icon_path as valid_preparation_icon_path,
  valid_preparations.yields_nothing as valid_preparation_yields_nothing,
  valid_preparations.restrict_to_ingredients as valid_preparation_restrict_to_ingredients,
  valid_preparations.minimum_ingredient_count as valid_preparation_minimum_ingredient_count,
  valid_preparations.maximum_ingredient_count as valid_preparation_maximum_ingredient_count,
  valid_preparations.minimum_instrument_count as valid_preparation_minimum_instrument_count,
  valid_preparations.maximum_instrument_count as valid_preparation_maximum_instrument_count,
  valid_preparations.temperature_required as valid_preparation_temperature_required,
  valid_preparations.time_estimate_required as valid_preparation_time_estimate_required,
  valid_preparations.condition_expression_required as valid_preparation_condition_expression_required,
  valid_preparations.consumes_vessel as valid_preparation_consumes_vessel,
  valid_preparations.only_for_vessels as valid_preparation_only_for_vessels,
  valid_preparations.minimum_vessel_count as valid_preparation_minimum_vessel_count,
  valid_preparations.maximum_vessel_count as valid_preparation_maximum_vessel_count,
  valid_preparations.slug as valid_preparation_slug,
  valid_preparations.past_tense as valid_preparation_past_tense,
  valid_preparations.created_at as valid_preparation_created_at,
  valid_preparations.last_updated_at as valid_preparation_last_updated_at,
  valid_preparations.archived_at as valid_preparation_archived_at,
  valid_ingredients.id as valid_ingredient_id,
  valid_ingredients.name as valid_ingredient_name,
  valid_ingredients.description as valid_ingredient_description,
  valid_ingredients.warning as valid_ingredient_warning,
  valid_ingredients.contains_egg as valid_ingredient_contains_egg,
  valid_ingredients.contains_dairy as valid_ingredient_contains_dairy,
  valid_ingredients.contains_peanut as valid_ingredient_contains_peanut,
  valid_ingredients.contains_tree_nut as valid_ingredient_contains_tree_nut,
  valid_ingredients.contains_soy as valid_ingredient_contains_soy,
  valid_ingredients.contains_wheat as valid_ingredient_contains_wheat,
  valid_ingredients.contains_shellfish as valid_ingredient_contains_shellfish,
  valid_ingredients.contains_sesame as valid_ingredient_contains_sesame,
  valid_ingredients.contains_fish as valid_ingredient_contains_fish,
  valid_ingredients.contains_gluten as valid_ingredient_contains_gluten,
  valid_ingredients.animal_flesh as valid_ingredient_animal_flesh,
  valid_ingredients.volumetric as valid_ingredient_volumetric,
  valid_ingredients.is_liquid as valid_ingredient_is_liquid,
  valid_ingredients.icon_path as valid_ingredient_icon_path,
  valid_ingredients.animal_derived as valid_ingredient_animal_derived,
  valid_ingredients.plural_name as valid_ingredient_plural_name,
  valid_ingredients.restrict_to_preparations as valid_ingredient_restrict_to_preparations,
  valid_ingredients.minimum_ideal_storage_temperature_in_celsius as valid_ingredient_minimum_ideal_storage_temperature_in_celsius,
  valid_ingredients.maximum_ideal_storage_temperature_in_celsius as valid_ingredient_maximum_ideal_storage_temperature_in_celsius,
  valid_ingredients.storage_instructions as valid_ingredient_storage_instructions,
  valid_ingredients.slug as valid_ingredient_slug,
  valid_ingredients.contains_alcohol as valid_ingredient_contains_alcohol,
  valid_ingredients.shopping_suggestions as valid_ingredient_shopping_suggestions,
  valid_ingredients.is_starch as valid_ingredient_is_starch,
  valid_ingredients.is_protein as valid_ingredient_is_protein,
  valid_ingredients.is_grain as valid_ingredient_is_grain,
  valid_ingredients.is_fruit as valid_ingredient_is_fruit,
  valid_ingredients.is_salt as valid_ingredient_is_salt,
  valid_ingredients.is_fat as valid_ingredient_is_fat,
  valid_ingredients.is_acid as valid_ingredient_is_acid,
  valid_ingredients.is_heat as valid_ingredient_is_heat,
  valid_ingredients.created_at as valid_ingredient_created_at,
  valid_ingredients.last_updated_at as valid_ingredient_last_updated_at,
  valid_ingredients.archived_at as valid_ingredient_archived_at,
  valid_ingredient_preparations.created_at as valid_ingredient_preparation_created_at,
  valid_ingredient_preparations.last_updated_at as valid_ingredient_preparation_last_updated_at,
  valid_ingredient_preparations.archived_at as valid_ingredient_preparation_archived_at,
  (
      SELECT
          COUNT(valid_ingredient_preparations.id)
      FROM
          valid_ingredient_preparations
      WHERE
          valid_ingredient_preparations.archived_at IS NULL
        AND valid_ingredient_preparations.created_at > COALESCE($1, (SELECT NOW() - interval '999 years'))
        AND valid_ingredient_preparations.created_at < COALESCE($2, (SELECT NOW() + interval '999 years'))
        AND (valid_ingredient_preparations.last_updated_at IS NULL OR valid_ingredient_preparations.last_updated_at > COALESCE($3, (SELECT NOW() - interval '999 years')))
        AND (valid_ingredient_preparations.last_updated_at IS NULL OR valid_ingredient_preparations.last_updated_at < COALESCE($4, (SELECT NOW() + interval '999 years')))
        AND valid_ingredient_preparations.valid_ingredient_id = ANY($5::text[])
  ) as filtered_count,
  (
      SELECT
          COUNT(valid_ingredient_preparations.id)
      FROM
          valid_ingredient_preparations
      WHERE
          valid_ingredient_preparations.archived_at IS NULL
  ) as total_count
FROM
  valid_ingredient_preparations
  JOIN valid_ingredients ON valid_ingredient_preparations.valid_ingredient_id = valid_ingredients.id
  JOIN valid_preparations ON valid_ingredient_preparations.valid_preparation_id = valid_preparations.id
WHERE
    valid_ingredient_preparations.archived_at IS NULL
  AND valid_ingredient_preparations.created_at > COALESCE($1, (SELECT NOW() - interval '999 years'))
  AND valid_ingredient_preparations.created_at < COALESCE($2, (SELECT NOW() + interval '999 years'))
  AND (valid_ingredient_preparations.last_updated_at IS NULL OR valid_ingredient_preparations.last_updated_at > COALESCE($3, (SELECT NOW() - interval '999 years')))
  AND (valid_ingredient_preparations.last_updated_at IS NULL OR valid_ingredient_preparations.last_updated_at < COALESCE($4, (SELECT NOW() + interval '999 years')))
  AND valid_ingredient_preparations.valid_ingredient_id = ANY($5::text[])
OFFSET $6
LIMIT $7
`

type GetValidIngredientPreparationsForIngredientParams struct {
	CreatedAfter  sql.NullTime
	CreatedBefore sql.NullTime
	UpdatedAfter  sql.NullTime
	UpdatedBefore sql.NullTime
	IDs           []string
	QueryOffset   sql.NullInt32
	QueryLimit    sql.NullInt32
}

type GetValidIngredientPreparationsForIngredientRow struct {
	ValidPreparationCreatedAt                              time.Time
	ValidIngredientPreparationCreatedAt                    time.Time
	ValidIngredientCreatedAt                               time.Time
	ValidIngredientPreparationArchivedAt                   sql.NullTime
	ValidIngredientLastUpdatedAt                           sql.NullTime
	ValidPreparationArchivedAt                             sql.NullTime
	ValidPreparationLastUpdatedAt                          sql.NullTime
	ValidIngredientArchivedAt                              sql.NullTime
	ValidIngredientPreparationLastUpdatedAt                sql.NullTime
	ValidIngredientIconPath                                string
	ValidPreparationPastTense                              string
	ValidIngredientPreparationID                           string
	ValidIngredientPluralName                              string
	ValidIngredientPreparationNotes                        string
	ValidPreparationName                                   string
	ValidPreparationID                                     string
	ValidIngredientWarning                                 string
	ValidIngredientStorageInstructions                     string
	ValidIngredientSlug                                    string
	ValidPreparationSlug                                   string
	ValidIngredientDescription                             string
	ValidIngredientShoppingSuggestions                     string
	ValidPreparationIconPath                               string
	ValidPreparationDescription                            string
	ValidIngredientID                                      string
	ValidIngredientName                                    string
	ValidIngredientMinimumIdealStorageTemperatureInCelsius sql.NullString
	ValidIngredientMaximumIdealStorageTemperatureInCelsius sql.NullString
	TotalCount                                             int64
	FilteredCount                                          int64
	ValidPreparationMaximumIngredientCount                 sql.NullInt32
	ValidPreparationMaximumVesselCount                     sql.NullInt32
	ValidPreparationMaximumInstrumentCount                 sql.NullInt32
	ValidPreparationMinimumVesselCount                     int32
	ValidPreparationMinimumInstrumentCount                 int32
	ValidPreparationMinimumIngredientCount                 int32
	ValidIngredientIsLiquid                                sql.NullBool
	ValidPreparationConsumesVessel                         bool
	ValidIngredientAnimalFlesh                             bool
	ValidIngredientVolumetric                              bool
	ValidIngredientContainsGluten                          bool
	ValidIngredientContainsFish                            bool
	ValidIngredientAnimalDerived                           bool
	ValidIngredientContainsSesame                          bool
	ValidIngredientRestrictToPreparations                  bool
	ValidIngredientContainsShellfish                       bool
	ValidIngredientContainsWheat                           bool
	ValidIngredientContainsSoy                             bool
	ValidIngredientContainsTreeNut                         bool
	ValidIngredientContainsAlcohol                         bool
	ValidIngredientContainsPeanut                          bool
	ValidIngredientIsStarch                                bool
	ValidIngredientIsProtein                               bool
	ValidIngredientIsGrain                                 bool
	ValidIngredientIsFruit                                 bool
	ValidIngredientIsSalt                                  bool
	ValidIngredientIsFat                                   bool
	ValidIngredientIsAcid                                  bool
	ValidIngredientIsHeat                                  bool
	ValidIngredientContainsDairy                           bool
	ValidIngredientContainsEgg                             bool
	ValidPreparationOnlyForVessels                         bool
	ValidPreparationConditionExpressionRequired            bool
	ValidPreparationTimeEstimateRequired                   bool
	ValidPreparationTemperatureRequired                    bool
	ValidPreparationRestrictToIngredients                  bool
	ValidPreparationYieldsNothing                          bool
}

func (q *Queries) GetValidIngredientPreparationsForIngredient(ctx context.Context, db DBTX, arg *GetValidIngredientPreparationsForIngredientParams) ([]*GetValidIngredientPreparationsForIngredientRow, error) {
	rows, err := db.QueryContext(ctx, getValidIngredientPreparationsForIngredient,
		arg.CreatedAfter,
		arg.CreatedBefore,
		arg.UpdatedAfter,
		arg.UpdatedBefore,
		pq.Array(arg.IDs),
		arg.QueryOffset,
		arg.QueryLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetValidIngredientPreparationsForIngredientRow{}
	for rows.Next() {
		var i GetValidIngredientPreparationsForIngredientRow
		if err := rows.Scan(
			&i.ValidIngredientPreparationID,
			&i.ValidIngredientPreparationNotes,
			&i.ValidPreparationID,
			&i.ValidPreparationName,
			&i.ValidPreparationDescription,
			&i.ValidPreparationIconPath,
			&i.ValidPreparationYieldsNothing,
			&i.ValidPreparationRestrictToIngredients,
			&i.ValidPreparationMinimumIngredientCount,
			&i.ValidPreparationMaximumIngredientCount,
			&i.ValidPreparationMinimumInstrumentCount,
			&i.ValidPreparationMaximumInstrumentCount,
			&i.ValidPreparationTemperatureRequired,
			&i.ValidPreparationTimeEstimateRequired,
			&i.ValidPreparationConditionExpressionRequired,
			&i.ValidPreparationConsumesVessel,
			&i.ValidPreparationOnlyForVessels,
			&i.ValidPreparationMinimumVesselCount,
			&i.ValidPreparationMaximumVesselCount,
			&i.ValidPreparationSlug,
			&i.ValidPreparationPastTense,
			&i.ValidPreparationCreatedAt,
			&i.ValidPreparationLastUpdatedAt,
			&i.ValidPreparationArchivedAt,
			&i.ValidIngredientID,
			&i.ValidIngredientName,
			&i.ValidIngredientDescription,
			&i.ValidIngredientWarning,
			&i.ValidIngredientContainsEgg,
			&i.ValidIngredientContainsDairy,
			&i.ValidIngredientContainsPeanut,
			&i.ValidIngredientContainsTreeNut,
			&i.ValidIngredientContainsSoy,
			&i.ValidIngredientContainsWheat,
			&i.ValidIngredientContainsShellfish,
			&i.ValidIngredientContainsSesame,
			&i.ValidIngredientContainsFish,
			&i.ValidIngredientContainsGluten,
			&i.ValidIngredientAnimalFlesh,
			&i.ValidIngredientVolumetric,
			&i.ValidIngredientIsLiquid,
			&i.ValidIngredientIconPath,
			&i.ValidIngredientAnimalDerived,
			&i.ValidIngredientPluralName,
			&i.ValidIngredientRestrictToPreparations,
			&i.ValidIngredientMinimumIdealStorageTemperatureInCelsius,
			&i.ValidIngredientMaximumIdealStorageTemperatureInCelsius,
			&i.ValidIngredientStorageInstructions,
			&i.ValidIngredientSlug,
			&i.ValidIngredientContainsAlcohol,
			&i.ValidIngredientShoppingSuggestions,
			&i.ValidIngredientIsStarch,
			&i.ValidIngredientIsProtein,
			&i.ValidIngredientIsGrain,
			&i.ValidIngredientIsFruit,
			&i.ValidIngredientIsSalt,
			&i.ValidIngredientIsFat,
			&i.ValidIngredientIsAcid,
			&i.ValidIngredientIsHeat,
			&i.ValidIngredientCreatedAt,
			&i.ValidIngredientLastUpdatedAt,
			&i.ValidIngredientArchivedAt,
			&i.ValidIngredientPreparationCreatedAt,
			&i.ValidIngredientPreparationLastUpdatedAt,
			&i.ValidIngredientPreparationArchivedAt,
			&i.FilteredCount,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getValidIngredientPreparationsForPreparation = `-- name: GetValidIngredientPreparationsForPreparation :many

SELECT
    valid_ingredient_preparations.id as valid_ingredient_preparation_id,
    valid_ingredient_preparations.notes as valid_ingredient_preparation_notes,
    valid_preparations.id as valid_preparation_id,
    valid_preparations.name as valid_preparation_name,
    valid_preparations.description as valid_preparation_description,
    valid_preparations.icon_path as valid_preparation_icon_path,
    valid_preparations.yields_nothing as valid_preparation_yields_nothing,
    valid_preparations.restrict_to_ingredients as valid_preparation_restrict_to_ingredients,
    valid_preparations.minimum_ingredient_count as valid_preparation_minimum_ingredient_count,
    valid_preparations.maximum_ingredient_count as valid_preparation_maximum_ingredient_count,
    valid_preparations.minimum_instrument_count as valid_preparation_minimum_instrument_count,
    valid_preparations.maximum_instrument_count as valid_preparation_maximum_instrument_count,
    valid_preparations.temperature_required as valid_preparation_temperature_required,
    valid_preparations.time_estimate_required as valid_preparation_time_estimate_required,
    valid_preparations.condition_expression_required as valid_preparation_condition_expression_required,
    valid_preparations.consumes_vessel as valid_preparation_consumes_vessel,
    valid_preparations.only_for_vessels as valid_preparation_only_for_vessels,
    valid_preparations.minimum_vessel_count as valid_preparation_minimum_vessel_count,
    valid_preparations.maximum_vessel_count as valid_preparation_maximum_vessel_count,
    valid_preparations.slug as valid_preparation_slug,
    valid_preparations.past_tense as valid_preparation_past_tense,
    valid_preparations.created_at as valid_preparation_created_at,
    valid_preparations.last_updated_at as valid_preparation_last_updated_at,
    valid_preparations.archived_at as valid_preparation_archived_at,
    valid_ingredients.id as valid_ingredient_id,
    valid_ingredients.name as valid_ingredient_name,
    valid_ingredients.description as valid_ingredient_description,
    valid_ingredients.warning as valid_ingredient_warning,
    valid_ingredients.contains_egg as valid_ingredient_contains_egg,
    valid_ingredients.contains_dairy as valid_ingredient_contains_dairy,
    valid_ingredients.contains_peanut as valid_ingredient_contains_peanut,
    valid_ingredients.contains_tree_nut as valid_ingredient_contains_tree_nut,
    valid_ingredients.contains_soy as valid_ingredient_contains_soy,
    valid_ingredients.contains_wheat as valid_ingredient_contains_wheat,
    valid_ingredients.contains_shellfish as valid_ingredient_contains_shellfish,
    valid_ingredients.contains_sesame as valid_ingredient_contains_sesame,
    valid_ingredients.contains_fish as valid_ingredient_contains_fish,
    valid_ingredients.contains_gluten as valid_ingredient_contains_gluten,
    valid_ingredients.animal_flesh as valid_ingredient_animal_flesh,
    valid_ingredients.volumetric as valid_ingredient_volumetric,
    valid_ingredients.is_liquid as valid_ingredient_is_liquid,
    valid_ingredients.icon_path as valid_ingredient_icon_path,
    valid_ingredients.animal_derived as valid_ingredient_animal_derived,
    valid_ingredients.plural_name as valid_ingredient_plural_name,
    valid_ingredients.restrict_to_preparations as valid_ingredient_restrict_to_preparations,
    valid_ingredients.minimum_ideal_storage_temperature_in_celsius as valid_ingredient_minimum_ideal_storage_temperature_in_celsius,
    valid_ingredients.maximum_ideal_storage_temperature_in_celsius as valid_ingredient_maximum_ideal_storage_temperature_in_celsius,
    valid_ingredients.storage_instructions as valid_ingredient_storage_instructions,
    valid_ingredients.slug as valid_ingredient_slug,
    valid_ingredients.contains_alcohol as valid_ingredient_contains_alcohol,
    valid_ingredients.shopping_suggestions as valid_ingredient_shopping_suggestions,
    valid_ingredients.is_starch as valid_ingredient_is_starch,
    valid_ingredients.is_protein as valid_ingredient_is_protein,
    valid_ingredients.is_grain as valid_ingredient_is_grain,
    valid_ingredients.is_fruit as valid_ingredient_is_fruit,
    valid_ingredients.is_salt as valid_ingredient_is_salt,
    valid_ingredients.is_fat as valid_ingredient_is_fat,
    valid_ingredients.is_acid as valid_ingredient_is_acid,
    valid_ingredients.is_heat as valid_ingredient_is_heat,
    valid_ingredients.created_at as valid_ingredient_created_at,
    valid_ingredients.last_updated_at as valid_ingredient_last_updated_at,
    valid_ingredients.archived_at as valid_ingredient_archived_at,
    valid_ingredient_preparations.created_at as valid_ingredient_preparation_created_at,
    valid_ingredient_preparations.last_updated_at as valid_ingredient_preparation_last_updated_at,
    valid_ingredient_preparations.archived_at as valid_ingredient_preparation_archived_at,
    (
        SELECT
            COUNT(valid_ingredient_preparations.id)
        FROM
            valid_ingredient_preparations
        WHERE
            valid_ingredient_preparations.archived_at IS NULL
          AND valid_ingredient_preparations.created_at > COALESCE($1, (SELECT NOW() - interval '999 years'))
          AND valid_ingredient_preparations.created_at < COALESCE($2, (SELECT NOW() + interval '999 years'))
          AND (valid_ingredient_preparations.last_updated_at IS NULL OR valid_ingredient_preparations.last_updated_at > COALESCE($3, (SELECT NOW() - interval '999 years')))
          AND (valid_ingredient_preparations.last_updated_at IS NULL OR valid_ingredient_preparations.last_updated_at < COALESCE($4, (SELECT NOW() + interval '999 years')))
          AND valid_ingredient_preparations.valid_preparation_id = ANY($5::text[])
    ) as filtered_count,
    (
        SELECT
            COUNT(valid_ingredient_preparations.id)
        FROM
            valid_ingredient_preparations
        WHERE
            valid_ingredient_preparations.archived_at IS NULL
    ) as total_count
FROM
    valid_ingredient_preparations
        JOIN valid_ingredients ON valid_ingredient_preparations.valid_ingredient_id = valid_ingredients.id
        JOIN valid_preparations ON valid_ingredient_preparations.valid_preparation_id = valid_preparations.id
WHERE
    valid_ingredient_preparations.archived_at IS NULL
  AND valid_ingredient_preparations.created_at > COALESCE($1, (SELECT NOW() - interval '999 years'))
  AND valid_ingredient_preparations.created_at < COALESCE($2, (SELECT NOW() + interval '999 years'))
  AND (valid_ingredient_preparations.last_updated_at IS NULL OR valid_ingredient_preparations.last_updated_at > COALESCE($3, (SELECT NOW() - interval '999 years')))
  AND (valid_ingredient_preparations.last_updated_at IS NULL OR valid_ingredient_preparations.last_updated_at < COALESCE($4, (SELECT NOW() + interval '999 years')))
  AND valid_ingredient_preparations.valid_preparation_id = ANY($5::text[])
OFFSET $6
LIMIT $7
`

type GetValidIngredientPreparationsForPreparationParams struct {
	CreatedAfter  sql.NullTime
	CreatedBefore sql.NullTime
	UpdatedAfter  sql.NullTime
	UpdatedBefore sql.NullTime
	IDs           []string
	QueryOffset   sql.NullInt32
	QueryLimit    sql.NullInt32
}

type GetValidIngredientPreparationsForPreparationRow struct {
	ValidPreparationCreatedAt                              time.Time
	ValidIngredientPreparationCreatedAt                    time.Time
	ValidIngredientCreatedAt                               time.Time
	ValidIngredientPreparationArchivedAt                   sql.NullTime
	ValidIngredientLastUpdatedAt                           sql.NullTime
	ValidPreparationArchivedAt                             sql.NullTime
	ValidPreparationLastUpdatedAt                          sql.NullTime
	ValidIngredientArchivedAt                              sql.NullTime
	ValidIngredientPreparationLastUpdatedAt                sql.NullTime
	ValidIngredientIconPath                                string
	ValidPreparationPastTense                              string
	ValidIngredientPreparationID                           string
	ValidIngredientPluralName                              string
	ValidIngredientPreparationNotes                        string
	ValidPreparationName                                   string
	ValidPreparationID                                     string
	ValidIngredientWarning                                 string
	ValidIngredientStorageInstructions                     string
	ValidIngredientSlug                                    string
	ValidPreparationSlug                                   string
	ValidIngredientDescription                             string
	ValidIngredientShoppingSuggestions                     string
	ValidPreparationIconPath                               string
	ValidPreparationDescription                            string
	ValidIngredientID                                      string
	ValidIngredientName                                    string
	ValidIngredientMinimumIdealStorageTemperatureInCelsius sql.NullString
	ValidIngredientMaximumIdealStorageTemperatureInCelsius sql.NullString
	TotalCount                                             int64
	FilteredCount                                          int64
	ValidPreparationMaximumIngredientCount                 sql.NullInt32
	ValidPreparationMaximumVesselCount                     sql.NullInt32
	ValidPreparationMaximumInstrumentCount                 sql.NullInt32
	ValidPreparationMinimumVesselCount                     int32
	ValidPreparationMinimumInstrumentCount                 int32
	ValidPreparationMinimumIngredientCount                 int32
	ValidIngredientIsLiquid                                sql.NullBool
	ValidPreparationConsumesVessel                         bool
	ValidIngredientAnimalFlesh                             bool
	ValidIngredientVolumetric                              bool
	ValidIngredientContainsGluten                          bool
	ValidIngredientContainsFish                            bool
	ValidIngredientAnimalDerived                           bool
	ValidIngredientContainsSesame                          bool
	ValidIngredientRestrictToPreparations                  bool
	ValidIngredientContainsShellfish                       bool
	ValidIngredientContainsWheat                           bool
	ValidIngredientContainsSoy                             bool
	ValidIngredientContainsTreeNut                         bool
	ValidIngredientContainsAlcohol                         bool
	ValidIngredientContainsPeanut                          bool
	ValidIngredientIsStarch                                bool
	ValidIngredientIsProtein                               bool
	ValidIngredientIsGrain                                 bool
	ValidIngredientIsFruit                                 bool
	ValidIngredientIsSalt                                  bool
	ValidIngredientIsFat                                   bool
	ValidIngredientIsAcid                                  bool
	ValidIngredientIsHeat                                  bool
	ValidIngredientContainsDairy                           bool
	ValidIngredientContainsEgg                             bool
	ValidPreparationOnlyForVessels                         bool
	ValidPreparationConditionExpressionRequired            bool
	ValidPreparationTimeEstimateRequired                   bool
	ValidPreparationTemperatureRequired                    bool
	ValidPreparationRestrictToIngredients                  bool
	ValidPreparationYieldsNothing                          bool
}

func (q *Queries) GetValidIngredientPreparationsForPreparation(ctx context.Context, db DBTX, arg *GetValidIngredientPreparationsForPreparationParams) ([]*GetValidIngredientPreparationsForPreparationRow, error) {
	rows, err := db.QueryContext(ctx, getValidIngredientPreparationsForPreparation,
		arg.CreatedAfter,
		arg.CreatedBefore,
		arg.UpdatedAfter,
		arg.UpdatedBefore,
		pq.Array(arg.IDs),
		arg.QueryOffset,
		arg.QueryLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetValidIngredientPreparationsForPreparationRow{}
	for rows.Next() {
		var i GetValidIngredientPreparationsForPreparationRow
		if err := rows.Scan(
			&i.ValidIngredientPreparationID,
			&i.ValidIngredientPreparationNotes,
			&i.ValidPreparationID,
			&i.ValidPreparationName,
			&i.ValidPreparationDescription,
			&i.ValidPreparationIconPath,
			&i.ValidPreparationYieldsNothing,
			&i.ValidPreparationRestrictToIngredients,
			&i.ValidPreparationMinimumIngredientCount,
			&i.ValidPreparationMaximumIngredientCount,
			&i.ValidPreparationMinimumInstrumentCount,
			&i.ValidPreparationMaximumInstrumentCount,
			&i.ValidPreparationTemperatureRequired,
			&i.ValidPreparationTimeEstimateRequired,
			&i.ValidPreparationConditionExpressionRequired,
			&i.ValidPreparationConsumesVessel,
			&i.ValidPreparationOnlyForVessels,
			&i.ValidPreparationMinimumVesselCount,
			&i.ValidPreparationMaximumVesselCount,
			&i.ValidPreparationSlug,
			&i.ValidPreparationPastTense,
			&i.ValidPreparationCreatedAt,
			&i.ValidPreparationLastUpdatedAt,
			&i.ValidPreparationArchivedAt,
			&i.ValidIngredientID,
			&i.ValidIngredientName,
			&i.ValidIngredientDescription,
			&i.ValidIngredientWarning,
			&i.ValidIngredientContainsEgg,
			&i.ValidIngredientContainsDairy,
			&i.ValidIngredientContainsPeanut,
			&i.ValidIngredientContainsTreeNut,
			&i.ValidIngredientContainsSoy,
			&i.ValidIngredientContainsWheat,
			&i.ValidIngredientContainsShellfish,
			&i.ValidIngredientContainsSesame,
			&i.ValidIngredientContainsFish,
			&i.ValidIngredientContainsGluten,
			&i.ValidIngredientAnimalFlesh,
			&i.ValidIngredientVolumetric,
			&i.ValidIngredientIsLiquid,
			&i.ValidIngredientIconPath,
			&i.ValidIngredientAnimalDerived,
			&i.ValidIngredientPluralName,
			&i.ValidIngredientRestrictToPreparations,
			&i.ValidIngredientMinimumIdealStorageTemperatureInCelsius,
			&i.ValidIngredientMaximumIdealStorageTemperatureInCelsius,
			&i.ValidIngredientStorageInstructions,
			&i.ValidIngredientSlug,
			&i.ValidIngredientContainsAlcohol,
			&i.ValidIngredientShoppingSuggestions,
			&i.ValidIngredientIsStarch,
			&i.ValidIngredientIsProtein,
			&i.ValidIngredientIsGrain,
			&i.ValidIngredientIsFruit,
			&i.ValidIngredientIsSalt,
			&i.ValidIngredientIsFat,
			&i.ValidIngredientIsAcid,
			&i.ValidIngredientIsHeat,
			&i.ValidIngredientCreatedAt,
			&i.ValidIngredientLastUpdatedAt,
			&i.ValidIngredientArchivedAt,
			&i.ValidIngredientPreparationCreatedAt,
			&i.ValidIngredientPreparationLastUpdatedAt,
			&i.ValidIngredientPreparationArchivedAt,
			&i.FilteredCount,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchValidIngredientPreparationsByPreparationAndIngredientName = `-- name: SearchValidIngredientPreparationsByPreparationAndIngredientName :many

SELECT
	valid_ingredient_preparations.id,
	valid_ingredient_preparations.notes,
	valid_preparations.id,
	valid_preparations.name,
	valid_preparations.description,
	valid_preparations.icon_path,
	valid_preparations.yields_nothing,
	valid_preparations.restrict_to_ingredients,
	valid_preparations.minimum_ingredient_count,
	valid_preparations.maximum_ingredient_count,
	valid_preparations.minimum_instrument_count,
	valid_preparations.maximum_instrument_count,
	valid_preparations.temperature_required,
	valid_preparations.time_estimate_required,
	valid_preparations.condition_expression_required,
	valid_preparations.consumes_vessel,
	valid_preparations.only_for_vessels,
	valid_preparations.minimum_vessel_count,
	valid_preparations.maximum_vessel_count,
	valid_preparations.slug,
	valid_preparations.past_tense,
	valid_preparations.created_at,
	valid_preparations.last_updated_at,
	valid_preparations.archived_at,
	valid_ingredients.id,
	valid_ingredients.name,
	valid_ingredients.description,
	valid_ingredients.warning,
	valid_ingredients.contains_egg,
	valid_ingredients.contains_dairy,
	valid_ingredients.contains_peanut,
	valid_ingredients.contains_tree_nut,
	valid_ingredients.contains_soy,
	valid_ingredients.contains_wheat,
	valid_ingredients.contains_shellfish,
	valid_ingredients.contains_sesame,
	valid_ingredients.contains_fish,
	valid_ingredients.contains_gluten,
	valid_ingredients.animal_flesh,
	valid_ingredients.volumetric,
	valid_ingredients.is_liquid,
	valid_ingredients.icon_path,
	valid_ingredients.animal_derived,
	valid_ingredients.plural_name,
	valid_ingredients.restrict_to_preparations,
	valid_ingredients.minimum_ideal_storage_temperature_in_celsius,
	valid_ingredients.maximum_ideal_storage_temperature_in_celsius,
	valid_ingredients.storage_instructions,
	valid_ingredients.slug,
	valid_ingredients.contains_alcohol,
	valid_ingredients.shopping_suggestions,
    valid_ingredients.is_starch,
    valid_ingredients.is_protein,
    valid_ingredients.is_grain,
    valid_ingredients.is_fruit,
    valid_ingredients.is_salt,
    valid_ingredients.is_fat,
    valid_ingredients.is_acid,
    valid_ingredients.is_heat,
	valid_ingredients.created_at,
	valid_ingredients.last_updated_at,
	valid_ingredients.archived_at,
	valid_ingredient_preparations.created_at,
	valid_ingredient_preparations.last_updated_at,
	valid_ingredient_preparations.archived_at
FROM valid_ingredient_preparations
	JOIN valid_ingredients ON valid_ingredient_preparations.valid_ingredient_id = valid_ingredients.id
	JOIN valid_preparations ON valid_ingredient_preparations.valid_preparation_id = valid_preparations.id
WHERE valid_ingredient_preparations.archived_at IS NULL
	AND valid_preparations.archived_at IS NULL
	AND valid_ingredients.archived_at IS NULL
	AND valid_preparations.id = $1
	AND valid_ingredients.name ILIKE $2
`

type SearchValidIngredientPreparationsByPreparationAndIngredientNameParams struct {
	ID   string
	Name string
}

type SearchValidIngredientPreparationsByPreparationAndIngredientNameRow struct {
	CreatedAt_3                             time.Time
	CreatedAt                               time.Time
	CreatedAt_2                             time.Time
	ArchivedAt                              sql.NullTime
	LastUpdatedAt                           sql.NullTime
	LastUpdatedAt_2                         sql.NullTime
	ArchivedAt_3                            sql.NullTime
	LastUpdatedAt_3                         sql.NullTime
	ArchivedAt_2                            sql.NullTime
	ID_3                                    string
	ID_2                                    string
	IconPath_2                              string
	PluralName                              string
	StorageInstructions                     string
	IconPath                                string
	ID                                      string
	Description                             string
	Slug_2                                  string
	ShoppingSuggestions                     string
	Slug                                    string
	PastTense                               string
	Name                                    string
	Warning                                 string
	Notes                                   string
	Description_2                           string
	Name_2                                  string
	MaximumIdealStorageTemperatureInCelsius sql.NullString
	MinimumIdealStorageTemperatureInCelsius sql.NullString
	MaximumVesselCount                      sql.NullInt32
	MaximumIngredientCount                  sql.NullInt32
	MaximumInstrumentCount                  sql.NullInt32
	MinimumInstrumentCount                  int32
	MinimumVesselCount                      int32
	MinimumIngredientCount                  int32
	IsLiquid                                sql.NullBool
	ConsumesVessel                          bool
	ContainsFish                            bool
	ContainsGluten                          bool
	AnimalFlesh                             bool
	Volumetric                              bool
	ContainsSesame                          bool
	ContainsShellfish                       bool
	AnimalDerived                           bool
	ContainsWheat                           bool
	RestrictToPreparations                  bool
	ContainsSoy                             bool
	ContainsTreeNut                         bool
	ContainsPeanut                          bool
	ContainsDairy                           bool
	ContainsAlcohol                         bool
	ContainsEgg                             bool
	IsStarch                                bool
	IsProtein                               bool
	IsGrain                                 bool
	IsFruit                                 bool
	IsSalt                                  bool
	IsFat                                   bool
	IsAcid                                  bool
	IsHeat                                  bool
	OnlyForVessels                          bool
	ConditionExpressionRequired             bool
	TimeEstimateRequired                    bool
	TemperatureRequired                     bool
	RestrictToIngredients                   bool
	YieldsNothing                           bool
}

func (q *Queries) SearchValidIngredientPreparationsByPreparationAndIngredientName(ctx context.Context, db DBTX, arg *SearchValidIngredientPreparationsByPreparationAndIngredientNameParams) ([]*SearchValidIngredientPreparationsByPreparationAndIngredientNameRow, error) {
	rows, err := db.QueryContext(ctx, searchValidIngredientPreparationsByPreparationAndIngredientName, arg.ID, arg.Name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*SearchValidIngredientPreparationsByPreparationAndIngredientNameRow{}
	for rows.Next() {
		var i SearchValidIngredientPreparationsByPreparationAndIngredientNameRow
		if err := rows.Scan(
			&i.ID,
			&i.Notes,
			&i.ID_2,
			&i.Name,
			&i.Description,
			&i.IconPath,
			&i.YieldsNothing,
			&i.RestrictToIngredients,
			&i.MinimumIngredientCount,
			&i.MaximumIngredientCount,
			&i.MinimumInstrumentCount,
			&i.MaximumInstrumentCount,
			&i.TemperatureRequired,
			&i.TimeEstimateRequired,
			&i.ConditionExpressionRequired,
			&i.ConsumesVessel,
			&i.OnlyForVessels,
			&i.MinimumVesselCount,
			&i.MaximumVesselCount,
			&i.Slug,
			&i.PastTense,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.ID_3,
			&i.Name_2,
			&i.Description_2,
			&i.Warning,
			&i.ContainsEgg,
			&i.ContainsDairy,
			&i.ContainsPeanut,
			&i.ContainsTreeNut,
			&i.ContainsSoy,
			&i.ContainsWheat,
			&i.ContainsShellfish,
			&i.ContainsSesame,
			&i.ContainsFish,
			&i.ContainsGluten,
			&i.AnimalFlesh,
			&i.Volumetric,
			&i.IsLiquid,
			&i.IconPath_2,
			&i.AnimalDerived,
			&i.PluralName,
			&i.RestrictToPreparations,
			&i.MinimumIdealStorageTemperatureInCelsius,
			&i.MaximumIdealStorageTemperatureInCelsius,
			&i.StorageInstructions,
			&i.Slug_2,
			&i.ContainsAlcohol,
			&i.ShoppingSuggestions,
			&i.IsStarch,
			&i.IsProtein,
			&i.IsGrain,
			&i.IsFruit,
			&i.IsSalt,
			&i.IsFat,
			&i.IsAcid,
			&i.IsHeat,
			&i.CreatedAt_2,
			&i.LastUpdatedAt_2,
			&i.ArchivedAt_2,
			&i.CreatedAt_3,
			&i.LastUpdatedAt_3,
			&i.ArchivedAt_3,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateValidIngredientPreparation = `-- name: UpdateValidIngredientPreparation :exec

UPDATE valid_ingredient_preparations SET notes = $1, valid_preparation_id = $2, valid_ingredient_id = $3, last_updated_at = NOW() WHERE archived_at IS NULL AND id = $4
`

type UpdateValidIngredientPreparationParams struct {
	Notes              string
	ValidPreparationID string
	ValidIngredientID  string
	ID                 string
}

func (q *Queries) UpdateValidIngredientPreparation(ctx context.Context, db DBTX, arg *UpdateValidIngredientPreparationParams) error {
	_, err := db.ExecContext(ctx, updateValidIngredientPreparation,
		arg.Notes,
		arg.ValidPreparationID,
		arg.ValidIngredientID,
		arg.ID,
	)
	return err
}

const validIngredientPreparationPairIsValid = `-- name: ValidIngredientPreparationPairIsValid :one

SELECT EXISTS(
	SELECT id
	FROM valid_ingredient_preparations
	WHERE valid_ingredient_id = $1
	AND valid_preparation_id = $2
	AND archived_at IS NULL
)
`

type ValidIngredientPreparationPairIsValidParams struct {
	ValidIngredientID  string
	ValidPreparationID string
}

func (q *Queries) ValidIngredientPreparationPairIsValid(ctx context.Context, db DBTX, arg *ValidIngredientPreparationPairIsValidParams) (bool, error) {
	row := db.QueryRowContext(ctx, validIngredientPreparationPairIsValid, arg.ValidIngredientID, arg.ValidPreparationID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
