// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: search_by_username.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const SearchUsersByUsername = `-- name: SearchUsersByUsername :many

SELECT
	users.id,
	users.first_name,
	users.last_name,
	users.username,
	users.email_address,
	users.email_address_verified_at,
	users.avatar_src,
	users.hashed_password,
	users.requires_password_change,
	users.password_last_changed_at,
	users.two_factor_secret,
	users.two_factor_secret_verified_at,
	users.service_role,
	users.user_account_status,
	users.user_account_status_explanation,
	users.birthday,
	users.last_accepted_terms_of_service,
    users.last_accepted_privacy_policy,
	users.created_at,
	users.last_updated_at,
	users.archived_at
FROM users
WHERE users.username ILIKE $1
AND users.archived_at IS NULL
AND users.two_factor_secret_verified_at IS NOT NULL
`

type SearchUsersByUsernameRow struct {
	ID                           string         `db:"id"`
	FirstName                    string         `db:"first_name"`
	LastName                     string         `db:"last_name"`
	Username                     string         `db:"username"`
	EmailAddress                 string         `db:"email_address"`
	EmailAddressVerifiedAt       sql.NullTime   `db:"email_address_verified_at"`
	AvatarSrc                    sql.NullString `db:"avatar_src"`
	HashedPassword               string         `db:"hashed_password"`
	RequiresPasswordChange       bool           `db:"requires_password_change"`
	PasswordLastChangedAt        sql.NullTime   `db:"password_last_changed_at"`
	TwoFactorSecret              string         `db:"two_factor_secret"`
	TwoFactorSecretVerifiedAt    sql.NullTime   `db:"two_factor_secret_verified_at"`
	ServiceRole                  string         `db:"service_role"`
	UserAccountStatus            string         `db:"user_account_status"`
	UserAccountStatusExplanation string         `db:"user_account_status_explanation"`
	Birthday                     sql.NullTime   `db:"birthday"`
	LastAcceptedTermsOfService   sql.NullTime   `db:"last_accepted_terms_of_service"`
	LastAcceptedPrivacyPolicy    sql.NullTime   `db:"last_accepted_privacy_policy"`
	CreatedAt                    time.Time      `db:"created_at"`
	LastUpdatedAt                sql.NullTime   `db:"last_updated_at"`
	ArchivedAt                   sql.NullTime   `db:"archived_at"`
}

func (q *Queries) SearchUsersByUsername(ctx context.Context, db DBTX, username string) ([]*SearchUsersByUsernameRow, error) {
	rows, err := db.QueryContext(ctx, SearchUsersByUsername, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*SearchUsersByUsernameRow{}
	for rows.Next() {
		var i SearchUsersByUsernameRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Username,
			&i.EmailAddress,
			&i.EmailAddressVerifiedAt,
			&i.AvatarSrc,
			&i.HashedPassword,
			&i.RequiresPasswordChange,
			&i.PasswordLastChangedAt,
			&i.TwoFactorSecret,
			&i.TwoFactorSecretVerifiedAt,
			&i.ServiceRole,
			&i.UserAccountStatus,
			&i.UserAccountStatusExplanation,
			&i.Birthday,
			&i.LastAcceptedTermsOfService,
			&i.LastAcceptedPrivacyPolicy,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
