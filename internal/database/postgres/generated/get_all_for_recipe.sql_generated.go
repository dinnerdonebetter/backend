// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: get_all_for_recipe.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const getAllRecipeStepCompletionConditionsForRecipe = `-- name: GetAllRecipeStepCompletionConditionsForRecipe :many

SELECT
	recipe_step_completion_condition_ingredients.id,
	recipe_step_completion_condition_ingredients.belongs_to_recipe_step_completion_condition,
	recipe_step_completion_condition_ingredients.recipe_step_ingredient,
	recipe_step_completion_conditions.id,
	recipe_step_completion_conditions.belongs_to_recipe_step,
	valid_ingredient_states.id,
	valid_ingredient_states.name,
	valid_ingredient_states.description,
	valid_ingredient_states.icon_path,
	valid_ingredient_states.slug,
	valid_ingredient_states.past_tense,
	valid_ingredient_states.attribute_type,
	valid_ingredient_states.created_at,
	valid_ingredient_states.last_updated_at,
	valid_ingredient_states.archived_at,
	recipe_step_completion_conditions.optional,
	recipe_step_completion_conditions.notes,
	recipe_step_completion_conditions.created_at,
	recipe_step_completion_conditions.last_updated_at,
	recipe_step_completion_conditions.archived_at
FROM recipe_step_completion_condition_ingredients
	JOIN recipe_step_completion_conditions ON recipe_step_completion_condition_ingredients.belongs_to_recipe_step_completion_condition = recipe_step_completion_conditions.id
	JOIN recipe_steps ON recipe_step_completion_conditions.belongs_to_recipe_step = recipe_steps.id
	JOIN recipes ON recipe_steps.belongs_to_recipe = recipes.id
	JOIN valid_ingredient_states ON recipe_step_completion_conditions.ingredient_state = valid_ingredient_states.id
WHERE recipe_step_completion_conditions.archived_at IS NULL
	AND recipe_step_completion_condition_ingredients.archived_at IS NULL
	AND recipe_steps.archived_at IS NULL
	AND recipes.archived_at IS NULL
	AND recipes.id = $1
GROUP BY recipe_step_completion_conditions.id,
	     recipe_step_completion_condition_ingredients.id,
	     valid_ingredient_states.id
`

type GetAllRecipeStepCompletionConditionsForRecipeRow struct {
	CreatedAt                              time.Time
	CreatedAt_2                            time.Time
	ArchivedAt_2                           sql.NullTime
	LastUpdatedAt_2                        sql.NullTime
	ArchivedAt                             sql.NullTime
	LastUpdatedAt                          sql.NullTime
	PastTense                              string
	ID_3                                   string
	IconPath                               string
	Slug                                   string
	ID                                     string
	AttributeType                          IngredientAttributeType
	Name                                   string
	Description                            string
	BelongsToRecipeStep                    string
	BelongsToRecipeStepCompletionCondition string
	Notes                                  string
	ID_2                                   string
	RecipeStepIngredient                   string
	Optional                               bool
}

func (q *Queries) GetAllRecipeStepCompletionConditionsForRecipe(ctx context.Context, db DBTX, id string) ([]*GetAllRecipeStepCompletionConditionsForRecipeRow, error) {
	rows, err := db.QueryContext(ctx, getAllRecipeStepCompletionConditionsForRecipe, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetAllRecipeStepCompletionConditionsForRecipeRow{}
	for rows.Next() {
		var i GetAllRecipeStepCompletionConditionsForRecipeRow
		if err := rows.Scan(
			&i.ID,
			&i.BelongsToRecipeStepCompletionCondition,
			&i.RecipeStepIngredient,
			&i.ID_2,
			&i.BelongsToRecipeStep,
			&i.ID_3,
			&i.Name,
			&i.Description,
			&i.IconPath,
			&i.Slug,
			&i.PastTense,
			&i.AttributeType,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.Optional,
			&i.Notes,
			&i.CreatedAt_2,
			&i.LastUpdatedAt_2,
			&i.ArchivedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
