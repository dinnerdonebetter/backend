// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: household_user_memberships.sql

package generated

import (
	"context"
	"database/sql"
)

const AddUserToHouseholdQuery = `-- name: addUserToHouseholdQuery :exec
INSERT INTO household_user_memberships (id,belongs_to_user,belongs_to_household,household_roles)
	VALUES ($1,$2,$3,$4)
`

type addUserToHouseholdQueryParams struct {
	ID                 string
	BelongsToUser      string
	BelongsToHousehold string
	HouseholdRoles     string
}

func (q *Queries) addUserToHouseholdQuery(ctx context.Context, arg *addUserToHouseholdQueryParams) error {
	_, err := q.db.ExecContext(ctx, AddUserToHouseholdQuery,
		arg.ID,
		arg.BelongsToUser,
		arg.BelongsToHousehold,
		arg.HouseholdRoles,
	)
	return err
}

const GetDefaultHouseholdIDForUserQuery = `-- name: getDefaultHouseholdIDForUserQuery :one
SELECT households.id
    FROM households
    JOIN household_user_memberships ON household_user_memberships.belongs_to_household = households.id
    WHERE household_user_memberships.belongs_to_user = $1
    AND household_user_memberships.default_household = $2
`

type getDefaultHouseholdIDForUserQueryParams struct {
	BelongsToUser    string
	DefaultHousehold bool
}

func (q *Queries) getDefaultHouseholdIDForUserQuery(ctx context.Context, arg *getDefaultHouseholdIDForUserQueryParams) (string, error) {
	row := q.db.QueryRowContext(ctx, GetDefaultHouseholdIDForUserQuery, arg.BelongsToUser, arg.DefaultHousehold)
	var id string
	err := row.Scan(&id)
	return id, err
}

const GetHouseholdMembershipsForUserQuery = `-- name: getHouseholdMembershipsForUserQuery :many
SELECT
    household_user_memberships.id,
    household_user_memberships.belongs_to_user,
    household_user_memberships.belongs_to_household,
    household_user_memberships.household_roles,
    household_user_memberships.default_household,
    household_user_memberships.created_on,
    household_user_memberships.last_updated_on,
    household_user_memberships.archived_on
FROM household_user_memberships
JOIN households ON households.id = household_user_memberships.belongs_to_household
WHERE household_user_memberships.archived_on IS NULL
AND household_user_memberships.belongs_to_user = $1
`

type getHouseholdMembershipsForUserQueryRow struct {
	ID                 string
	BelongsToUser      string
	BelongsToHousehold string
	HouseholdRoles     string
	DefaultHousehold   bool
	CreatedOn          int64
	LastUpdatedOn      sql.NullInt64
	ArchivedOn         sql.NullInt64
}

func (q *Queries) getHouseholdMembershipsForUserQuery(ctx context.Context, belongsToUser string) ([]*getHouseholdMembershipsForUserQueryRow, error) {
	rows, err := q.db.QueryContext(ctx, GetHouseholdMembershipsForUserQuery, belongsToUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*getHouseholdMembershipsForUserQueryRow
	for rows.Next() {
		var i getHouseholdMembershipsForUserQueryRow
		if err := rows.Scan(
			&i.ID,
			&i.BelongsToUser,
			&i.BelongsToHousehold,
			&i.HouseholdRoles,
			&i.DefaultHousehold,
			&i.CreatedOn,
			&i.LastUpdatedOn,
			&i.ArchivedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const MarkHouseholdAsUserDefaultQuery = `-- name: markHouseholdAsUserDefaultQuery :exec
UPDATE household_user_memberships
	SET default_household = (belongs_to_user = $1 AND belongs_to_household = $2)
	WHERE archived_on IS NULL
	AND belongs_to_user = $3
`

type markHouseholdAsUserDefaultQueryParams struct {
	BelongsToUser      string
	BelongsToHousehold string
	BelongsToUser_2    string
}

func (q *Queries) markHouseholdAsUserDefaultQuery(ctx context.Context, arg *markHouseholdAsUserDefaultQueryParams) error {
	_, err := q.db.ExecContext(ctx, MarkHouseholdAsUserDefaultQuery, arg.BelongsToUser, arg.BelongsToHousehold, arg.BelongsToUser_2)
	return err
}

const ModifyUserPermissionsQuery = `-- name: modifyUserPermissionsQuery :exec
UPDATE household_user_memberships SET household_roles = $1 WHERE belongs_to_household = $2 AND belongs_to_user = $3
`

type modifyUserPermissionsQueryParams struct {
	HouseholdRoles     string
	BelongsToHousehold string
	BelongsToUser      string
}

func (q *Queries) modifyUserPermissionsQuery(ctx context.Context, arg *modifyUserPermissionsQueryParams) error {
	_, err := q.db.ExecContext(ctx, ModifyUserPermissionsQuery, arg.HouseholdRoles, arg.BelongsToHousehold, arg.BelongsToUser)
	return err
}

const RemoveUserFromHouseholdQuery = `-- name: removeUserFromHouseholdQuery :exec
UPDATE household_user_memberships
	SET archived_on = extract(epoch from NOW()),
		default_household = 'false'
	WHERE household_user_memberships.archived_on IS NULL
	AND household_user_memberships.belongs_to_household = $1
	AND household_user_memberships.belongs_to_user = $2
`

type removeUserFromHouseholdQueryParams struct {
	BelongsToHousehold string
	BelongsToUser      string
}

func (q *Queries) removeUserFromHouseholdQuery(ctx context.Context, arg *removeUserFromHouseholdQueryParams) error {
	_, err := q.db.ExecContext(ctx, RemoveUserFromHouseholdQuery, arg.BelongsToHousehold, arg.BelongsToUser)
	return err
}

const TransferHouseholdMembershipQuery = `-- name: transferHouseholdMembershipQuery :exec
UPDATE household_user_memberships SET belongs_to_user = $1 WHERE archived_on IS NULL AND belongs_to_household = $2 AND belongs_to_user = $3
`

type transferHouseholdMembershipQueryParams struct {
	BelongsToUser      string
	BelongsToHousehold string
	BelongsToUser_2    string
}

func (q *Queries) transferHouseholdMembershipQuery(ctx context.Context, arg *transferHouseholdMembershipQueryParams) error {
	_, err := q.db.ExecContext(ctx, TransferHouseholdMembershipQuery, arg.BelongsToUser, arg.BelongsToHousehold, arg.BelongsToUser_2)
	return err
}

const TransferHouseholdOwnershipQuery = `-- name: transferHouseholdOwnershipQuery :exec
UPDATE households SET belongs_to_user = $1 WHERE archived_on IS NULL AND belongs_to_user = $2 AND id = $3
`

type transferHouseholdOwnershipQueryParams struct {
	BelongsToUser   string
	BelongsToUser_2 string
	ID              string
}

func (q *Queries) transferHouseholdOwnershipQuery(ctx context.Context, arg *transferHouseholdOwnershipQueryParams) error {
	_, err := q.db.ExecContext(ctx, TransferHouseholdOwnershipQuery, arg.BelongsToUser, arg.BelongsToUser_2, arg.ID)
	return err
}

const UserIsMemberOfHouseholdQuery = `-- name: userIsMemberOfHouseholdQuery :one
SELECT EXISTS (
    SELECT household_user_memberships.id
    FROM household_user_memberships
    WHERE household_user_memberships.archived_on IS NULL
    AND household_user_memberships.belongs_to_household = $1
    AND household_user_memberships.belongs_to_user = $2
)
`

type userIsMemberOfHouseholdQueryParams struct {
	BelongsToHousehold string
	BelongsToUser      string
}

func (q *Queries) userIsMemberOfHouseholdQuery(ctx context.Context, arg *userIsMemberOfHouseholdQueryParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, UserIsMemberOfHouseholdQuery, arg.BelongsToHousehold, arg.BelongsToUser)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
