// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: recipe_step_ingredients.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const archiveRecipeStepIngredient = `-- name: ArchiveRecipeStepIngredient :exec

UPDATE recipe_step_ingredients SET archived_at = NOW() WHERE archived_at IS NULL AND belongs_to_recipe_step = $1 AND id = $2
`

type ArchiveRecipeStepIngredientParams struct {
	BelongsToRecipeStep string
	ID                  string
}

func (q *Queries) ArchiveRecipeStepIngredient(ctx context.Context, db DBTX, arg *ArchiveRecipeStepIngredientParams) error {
	_, err := db.ExecContext(ctx, archiveRecipeStepIngredient, arg.BelongsToRecipeStep, arg.ID)
	return err
}

const checkRecipeStepIngredientExistence = `-- name: CheckRecipeStepIngredientExistence :one

SELECT EXISTS ( SELECT recipe_step_ingredients.id FROM recipe_step_ingredients JOIN recipe_steps ON recipe_step_ingredients.belongs_to_recipe_step=recipe_steps.id JOIN recipes ON recipe_steps.belongs_to_recipe=recipes.id WHERE recipe_step_ingredients.archived_at IS NULL AND recipe_step_ingredients.belongs_to_recipe_step = $1 AND recipe_step_ingredients.id = $2 AND recipe_steps.archived_at IS NULL AND recipe_steps.belongs_to_recipe = $3 AND recipe_steps.id = $1 AND recipes.archived_at IS NULL AND recipes.id = $3 )
`

type CheckRecipeStepIngredientExistenceParams struct {
	RecipeStepID           string
	RecipeStepIngredientID string
	RecipeID               string
}

func (q *Queries) CheckRecipeStepIngredientExistence(ctx context.Context, db DBTX, arg *CheckRecipeStepIngredientExistenceParams) (bool, error) {
	row := db.QueryRowContext(ctx, checkRecipeStepIngredientExistence, arg.RecipeStepID, arg.RecipeStepIngredientID, arg.RecipeID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createRecipeStepIngredient = `-- name: CreateRecipeStepIngredient :exec

INSERT INTO recipe_step_ingredients (
	id,
	"name",
	optional,
	ingredient_id,
	measurement_unit,
	minimum_quantity_value,
	maximum_quantity_value,
	quantity_notes,
	recipe_step_product_id,
	ingredient_notes,
	option_index,
	to_taste,
	product_percentage_to_use,
    vessel_index,
    recipe_step_product_recipe_id,
	belongs_to_recipe_step
) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16)
`

type CreateRecipeStepIngredientParams struct {
	QuantityNotes             string
	Name                      string
	BelongsToRecipeStep       string
	IngredientNotes           string
	ID                        string
	MinimumQuantityValue      string
	RecipeStepProductID       sql.NullString
	MaximumQuantityValue      sql.NullString
	MeasurementUnit           sql.NullString
	IngredientID              sql.NullString
	ProductPercentageToUse    sql.NullString
	RecipeStepProductRecipeID sql.NullString
	VesselIndex               sql.NullInt32
	OptionIndex               int32
	ToTaste                   bool
	Optional                  bool
}

func (q *Queries) CreateRecipeStepIngredient(ctx context.Context, db DBTX, arg *CreateRecipeStepIngredientParams) error {
	_, err := db.ExecContext(ctx, createRecipeStepIngredient,
		arg.ID,
		arg.Name,
		arg.Optional,
		arg.IngredientID,
		arg.MeasurementUnit,
		arg.MinimumQuantityValue,
		arg.MaximumQuantityValue,
		arg.QuantityNotes,
		arg.RecipeStepProductID,
		arg.IngredientNotes,
		arg.OptionIndex,
		arg.ToTaste,
		arg.ProductPercentageToUse,
		arg.VesselIndex,
		arg.RecipeStepProductRecipeID,
		arg.BelongsToRecipeStep,
	)
	return err
}

const getRecipeStepIngredient = `-- name: GetRecipeStepIngredient :one

SELECT
	recipe_step_ingredients.id,
	recipe_step_ingredients.name,
	recipe_step_ingredients.optional,
	valid_ingredients.id,
	valid_ingredients.name,
	valid_ingredients.description,
	valid_ingredients.warning,
	valid_ingredients.contains_egg,
	valid_ingredients.contains_dairy,
	valid_ingredients.contains_peanut,
	valid_ingredients.contains_tree_nut,
	valid_ingredients.contains_soy,
	valid_ingredients.contains_wheat,
	valid_ingredients.contains_shellfish,
	valid_ingredients.contains_sesame,
	valid_ingredients.contains_fish,
	valid_ingredients.contains_gluten,
	valid_ingredients.animal_flesh,
	valid_ingredients.volumetric,
	valid_ingredients.is_liquid,
	valid_ingredients.icon_path,
	valid_ingredients.animal_derived,
	valid_ingredients.plural_name,
	valid_ingredients.restrict_to_preparations,
	valid_ingredients.minimum_ideal_storage_temperature_in_celsius,
	valid_ingredients.maximum_ideal_storage_temperature_in_celsius,
	valid_ingredients.storage_instructions,
	valid_ingredients.slug,
	valid_ingredients.contains_alcohol,
	valid_ingredients.shopping_suggestions,
    valid_ingredients.is_starch,
    valid_ingredients.is_protein,
    valid_ingredients.is_grain,
    valid_ingredients.is_fruit,
    valid_ingredients.is_salt,
    valid_ingredients.is_fat,
    valid_ingredients.is_acid,
    valid_ingredients.is_heat,
	valid_ingredients.created_at,
	valid_ingredients.last_updated_at,
	valid_ingredients.archived_at,
	valid_measurement_units.id,
	valid_measurement_units.name,
	valid_measurement_units.description,
	valid_measurement_units.volumetric,
	valid_measurement_units.icon_path,
	valid_measurement_units.universal,
	valid_measurement_units.metric,
	valid_measurement_units.imperial,
	valid_measurement_units.slug,
	valid_measurement_units.plural_name,
	valid_measurement_units.created_at,
	valid_measurement_units.last_updated_at,
	valid_measurement_units.archived_at,
	recipe_step_ingredients.minimum_quantity_value,
	recipe_step_ingredients.maximum_quantity_value,
	recipe_step_ingredients.quantity_notes,
	recipe_step_ingredients.recipe_step_product_id,
	recipe_step_ingredients.ingredient_notes,
	recipe_step_ingredients.option_index,
	recipe_step_ingredients.to_taste,
	recipe_step_ingredients.product_percentage_to_use,
    recipe_step_ingredients.vessel_index,
    recipe_step_ingredients.recipe_step_product_recipe_id,
	recipe_step_ingredients.created_at,
	recipe_step_ingredients.last_updated_at,
	recipe_step_ingredients.archived_at,
	recipe_step_ingredients.belongs_to_recipe_step
FROM recipe_step_ingredients
	 JOIN recipe_steps ON recipe_step_ingredients.belongs_to_recipe_step=recipe_steps.id
	 JOIN recipes ON recipe_steps.belongs_to_recipe=recipes.id
	 JOIN valid_ingredients ON recipe_step_ingredients.ingredient_id=valid_ingredients.id
	 JOIN valid_measurement_units ON recipe_step_ingredients.measurement_unit=valid_measurement_units.id
WHERE recipe_step_ingredients.archived_at IS NULL
	AND recipe_step_ingredients.belongs_to_recipe_step = $1
	AND recipe_step_ingredients.id = $2
	AND recipe_steps.archived_at IS NULL
	AND recipe_steps.belongs_to_recipe = $3
	AND recipe_steps.id = $4
	AND recipes.archived_at IS NULL
	AND recipes.id = $5
`

type GetRecipeStepIngredientParams struct {
	BelongsToRecipeStep string
	ID                  string
	BelongsToRecipe     string
	ID_2                string
	ID_3                string
}

type GetRecipeStepIngredientRow struct {
	CreatedAt_3                             time.Time
	CreatedAt                               time.Time
	CreatedAt_2                             time.Time
	LastUpdatedAt                           sql.NullTime
	LastUpdatedAt_2                         sql.NullTime
	ArchivedAt_2                            sql.NullTime
	ArchivedAt                              sql.NullTime
	ArchivedAt_3                            sql.NullTime
	LastUpdatedAt_3                         sql.NullTime
	IconPath                                string
	PluralName_2                            string
	Name                                    string
	BelongsToRecipeStep                     string
	ID_3                                    string
	IngredientNotes                         string
	Name_3                                  string
	QuantityNotes                           string
	ID                                      string
	Description_2                           string
	IconPath_2                              string
	Warning                                 string
	MinimumQuantityValue                    string
	PluralName                              string
	Description                             string
	Slug_2                                  string
	ID_2                                    string
	StorageInstructions                     string
	Slug                                    string
	Name_2                                  string
	ShoppingSuggestions                     string
	MaximumIdealStorageTemperatureInCelsius sql.NullString
	RecipeStepProductRecipeID               sql.NullString
	MinimumIdealStorageTemperatureInCelsius sql.NullString
	MaximumQuantityValue                    sql.NullString
	RecipeStepProductID                     sql.NullString
	ProductPercentageToUse                  sql.NullString
	VesselIndex                             sql.NullInt32
	OptionIndex                             int32
	IsLiquid                                sql.NullBool
	Volumetric_2                            sql.NullBool
	AnimalFlesh                             bool
	IsHeat                                  bool
	IsAcid                                  bool
	IsFat                                   bool
	IsSalt                                  bool
	IsFruit                                 bool
	Universal                               bool
	Metric                                  bool
	Imperial                                bool
	IsGrain                                 bool
	IsProtein                               bool
	IsStarch                                bool
	ContainsAlcohol                         bool
	RestrictToPreparations                  bool
	AnimalDerived                           bool
	Volumetric                              bool
	ContainsGluten                          bool
	ContainsFish                            bool
	ContainsSesame                          bool
	ContainsShellfish                       bool
	ToTaste                                 bool
	ContainsWheat                           bool
	ContainsSoy                             bool
	ContainsTreeNut                         bool
	ContainsPeanut                          bool
	ContainsDairy                           bool
	ContainsEgg                             bool
	Optional                                bool
}

func (q *Queries) GetRecipeStepIngredient(ctx context.Context, db DBTX, arg *GetRecipeStepIngredientParams) (*GetRecipeStepIngredientRow, error) {
	row := db.QueryRowContext(ctx, getRecipeStepIngredient,
		arg.BelongsToRecipeStep,
		arg.ID,
		arg.BelongsToRecipe,
		arg.ID_2,
		arg.ID_3,
	)
	var i GetRecipeStepIngredientRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Optional,
		&i.ID_2,
		&i.Name_2,
		&i.Description,
		&i.Warning,
		&i.ContainsEgg,
		&i.ContainsDairy,
		&i.ContainsPeanut,
		&i.ContainsTreeNut,
		&i.ContainsSoy,
		&i.ContainsWheat,
		&i.ContainsShellfish,
		&i.ContainsSesame,
		&i.ContainsFish,
		&i.ContainsGluten,
		&i.AnimalFlesh,
		&i.Volumetric,
		&i.IsLiquid,
		&i.IconPath,
		&i.AnimalDerived,
		&i.PluralName,
		&i.RestrictToPreparations,
		&i.MinimumIdealStorageTemperatureInCelsius,
		&i.MaximumIdealStorageTemperatureInCelsius,
		&i.StorageInstructions,
		&i.Slug,
		&i.ContainsAlcohol,
		&i.ShoppingSuggestions,
		&i.IsStarch,
		&i.IsProtein,
		&i.IsGrain,
		&i.IsFruit,
		&i.IsSalt,
		&i.IsFat,
		&i.IsAcid,
		&i.IsHeat,
		&i.CreatedAt,
		&i.LastUpdatedAt,
		&i.ArchivedAt,
		&i.ID_3,
		&i.Name_3,
		&i.Description_2,
		&i.Volumetric_2,
		&i.IconPath_2,
		&i.Universal,
		&i.Metric,
		&i.Imperial,
		&i.Slug_2,
		&i.PluralName_2,
		&i.CreatedAt_2,
		&i.LastUpdatedAt_2,
		&i.ArchivedAt_2,
		&i.MinimumQuantityValue,
		&i.MaximumQuantityValue,
		&i.QuantityNotes,
		&i.RecipeStepProductID,
		&i.IngredientNotes,
		&i.OptionIndex,
		&i.ToTaste,
		&i.ProductPercentageToUse,
		&i.VesselIndex,
		&i.RecipeStepProductRecipeID,
		&i.CreatedAt_3,
		&i.LastUpdatedAt_3,
		&i.ArchivedAt_3,
		&i.BelongsToRecipeStep,
	)
	return &i, err
}

const getRecipeStepIngredientsForRecipe = `-- name: GetRecipeStepIngredientsForRecipe :many

SELECT
	recipe_step_ingredients.id,
	recipe_step_ingredients.name,
	recipe_step_ingredients.optional,
	valid_ingredients.id,
	valid_ingredients.name,
	valid_ingredients.description,
	valid_ingredients.warning,
	valid_ingredients.contains_egg,
	valid_ingredients.contains_dairy,
	valid_ingredients.contains_peanut,
	valid_ingredients.contains_tree_nut,
	valid_ingredients.contains_soy,
	valid_ingredients.contains_wheat,
	valid_ingredients.contains_shellfish,
	valid_ingredients.contains_sesame,
	valid_ingredients.contains_fish,
	valid_ingredients.contains_gluten,
	valid_ingredients.animal_flesh,
	valid_ingredients.volumetric,
	valid_ingredients.is_liquid,
	valid_ingredients.icon_path,
	valid_ingredients.animal_derived,
	valid_ingredients.plural_name,
	valid_ingredients.restrict_to_preparations,
	valid_ingredients.minimum_ideal_storage_temperature_in_celsius,
	valid_ingredients.maximum_ideal_storage_temperature_in_celsius,
	valid_ingredients.storage_instructions,
	valid_ingredients.slug,
	valid_ingredients.contains_alcohol,
	valid_ingredients.shopping_suggestions,
    valid_ingredients.is_starch,
    valid_ingredients.is_protein,
    valid_ingredients.is_grain,
    valid_ingredients.is_fruit,
    valid_ingredients.is_salt,
    valid_ingredients.is_fat,
    valid_ingredients.is_acid,
    valid_ingredients.is_heat,
	valid_ingredients.created_at,
	valid_ingredients.last_updated_at,
	valid_ingredients.archived_at,
	valid_measurement_units.id,
	valid_measurement_units.name,
	valid_measurement_units.description,
	valid_measurement_units.volumetric,
	valid_measurement_units.icon_path,
	valid_measurement_units.universal,
	valid_measurement_units.metric,
	valid_measurement_units.imperial,
	valid_measurement_units.slug,
	valid_measurement_units.plural_name,
	valid_measurement_units.created_at,
	valid_measurement_units.last_updated_at,
	valid_measurement_units.archived_at,
	recipe_step_ingredients.minimum_quantity_value,
	recipe_step_ingredients.maximum_quantity_value,
	recipe_step_ingredients.quantity_notes,
	recipe_step_ingredients.recipe_step_product_id,
	recipe_step_ingredients.ingredient_notes,
	recipe_step_ingredients.option_index,
	recipe_step_ingredients.to_taste,
	recipe_step_ingredients.product_percentage_to_use,
    recipe_step_ingredients.vessel_index,
    recipe_step_ingredients.recipe_step_product_recipe_id,
	recipe_step_ingredients.created_at,
	recipe_step_ingredients.last_updated_at,
	recipe_step_ingredients.archived_at,
	recipe_step_ingredients.belongs_to_recipe_step
FROM
	recipe_step_ingredients
	JOIN recipe_steps ON recipe_step_ingredients.belongs_to_recipe_step = recipe_steps.id
	JOIN recipes ON recipe_steps.belongs_to_recipe = recipes.id
	LEFT JOIN valid_ingredients ON recipe_step_ingredients.ingredient_id = valid_ingredients.id
	JOIN valid_measurement_units ON recipe_step_ingredients.measurement_unit = valid_measurement_units.id
WHERE
	recipe_step_ingredients.archived_at IS NULL
	AND recipes.id = $1
GROUP BY
	recipe_step_ingredients.id,
	valid_measurement_units.id,
	valid_ingredients.id
ORDER BY
	recipe_step_ingredients.id
`

type GetRecipeStepIngredientsForRecipeRow struct {
	CreatedAt_3                             time.Time
	CreatedAt_2                             time.Time
	LastUpdatedAt_2                         sql.NullTime
	CreatedAt                               sql.NullTime
	LastUpdatedAt                           sql.NullTime
	ArchivedAt                              sql.NullTime
	ArchivedAt_2                            sql.NullTime
	ArchivedAt_3                            sql.NullTime
	LastUpdatedAt_3                         sql.NullTime
	ID_3                                    string
	Description_2                           string
	IconPath_2                              string
	Slug_2                                  string
	PluralName_2                            string
	IngredientNotes                         string
	Name_3                                  string
	QuantityNotes                           string
	ID                                      string
	BelongsToRecipeStep                     string
	MinimumQuantityValue                    string
	Name                                    string
	MaximumQuantityValue                    sql.NullString
	Warning                                 sql.NullString
	IconPath                                sql.NullString
	MinimumIdealStorageTemperatureInCelsius sql.NullString
	MaximumIdealStorageTemperatureInCelsius sql.NullString
	StorageInstructions                     sql.NullString
	Slug                                    sql.NullString
	RecipeStepProductID                     sql.NullString
	ShoppingSuggestions                     sql.NullString
	ID_2                                    sql.NullString
	ProductPercentageToUse                  sql.NullString
	Name_2                                  sql.NullString
	RecipeStepProductRecipeID               sql.NullString
	PluralName                              sql.NullString
	Description                             sql.NullString
	VesselIndex                             sql.NullInt32
	OptionIndex                             int32
	AnimalFlesh                             sql.NullBool
	ContainsAlcohol                         sql.NullBool
	IsAcid                                  sql.NullBool
	IsFat                                   sql.NullBool
	IsSalt                                  sql.NullBool
	IsFruit                                 sql.NullBool
	Volumetric_2                            sql.NullBool
	IsGrain                                 sql.NullBool
	IsHeat                                  sql.NullBool
	ContainsEgg                             sql.NullBool
	ContainsDairy                           sql.NullBool
	IsProtein                               sql.NullBool
	IsStarch                                sql.NullBool
	ContainsTreeNut                         sql.NullBool
	RestrictToPreparations                  sql.NullBool
	AnimalDerived                           sql.NullBool
	IsLiquid                                sql.NullBool
	Volumetric                              sql.NullBool
	ContainsGluten                          sql.NullBool
	ContainsFish                            sql.NullBool
	ContainsSesame                          sql.NullBool
	ContainsShellfish                       sql.NullBool
	ContainsPeanut                          sql.NullBool
	ContainsWheat                           sql.NullBool
	ContainsSoy                             sql.NullBool
	Universal                               bool
	ToTaste                                 bool
	Imperial                                bool
	Metric                                  bool
	Optional                                bool
}

func (q *Queries) GetRecipeStepIngredientsForRecipe(ctx context.Context, db DBTX, id string) ([]*GetRecipeStepIngredientsForRecipeRow, error) {
	rows, err := db.QueryContext(ctx, getRecipeStepIngredientsForRecipe, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetRecipeStepIngredientsForRecipeRow{}
	for rows.Next() {
		var i GetRecipeStepIngredientsForRecipeRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Optional,
			&i.ID_2,
			&i.Name_2,
			&i.Description,
			&i.Warning,
			&i.ContainsEgg,
			&i.ContainsDairy,
			&i.ContainsPeanut,
			&i.ContainsTreeNut,
			&i.ContainsSoy,
			&i.ContainsWheat,
			&i.ContainsShellfish,
			&i.ContainsSesame,
			&i.ContainsFish,
			&i.ContainsGluten,
			&i.AnimalFlesh,
			&i.Volumetric,
			&i.IsLiquid,
			&i.IconPath,
			&i.AnimalDerived,
			&i.PluralName,
			&i.RestrictToPreparations,
			&i.MinimumIdealStorageTemperatureInCelsius,
			&i.MaximumIdealStorageTemperatureInCelsius,
			&i.StorageInstructions,
			&i.Slug,
			&i.ContainsAlcohol,
			&i.ShoppingSuggestions,
			&i.IsStarch,
			&i.IsProtein,
			&i.IsGrain,
			&i.IsFruit,
			&i.IsSalt,
			&i.IsFat,
			&i.IsAcid,
			&i.IsHeat,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.ID_3,
			&i.Name_3,
			&i.Description_2,
			&i.Volumetric_2,
			&i.IconPath_2,
			&i.Universal,
			&i.Metric,
			&i.Imperial,
			&i.Slug_2,
			&i.PluralName_2,
			&i.CreatedAt_2,
			&i.LastUpdatedAt_2,
			&i.ArchivedAt_2,
			&i.MinimumQuantityValue,
			&i.MaximumQuantityValue,
			&i.QuantityNotes,
			&i.RecipeStepProductID,
			&i.IngredientNotes,
			&i.OptionIndex,
			&i.ToTaste,
			&i.ProductPercentageToUse,
			&i.VesselIndex,
			&i.RecipeStepProductRecipeID,
			&i.CreatedAt_3,
			&i.LastUpdatedAt_3,
			&i.ArchivedAt_3,
			&i.BelongsToRecipeStep,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRecipeStepIngredient = `-- name: UpdateRecipeStepIngredient :exec

UPDATE recipe_step_ingredients SET
	ingredient_id = $1,
	name = $2,
	optional = $3,
	measurement_unit = $4,
	minimum_quantity_value = $5,
	maximum_quantity_value = $6,
	quantity_notes = $7,
	recipe_step_product_id = $8,
	ingredient_notes = $9,
	option_index = $10,
	to_taste = $11,
	product_percentage_to_use = $12,
    vessel_index = $13,
    recipe_step_product_recipe_id = $14,
	last_updated_at = NOW()
WHERE archived_at IS NULL AND belongs_to_recipe_step = $15
	AND id = $16
`

type UpdateRecipeStepIngredientParams struct {
	IngredientNotes           string
	Name                      string
	ID                        string
	BelongsToRecipeStep       string
	MinimumQuantityValue      string
	QuantityNotes             string
	IngredientID              sql.NullString
	MaximumQuantityValue      sql.NullString
	RecipeStepProductID       sql.NullString
	ProductPercentageToUse    sql.NullString
	RecipeStepProductRecipeID sql.NullString
	MeasurementUnit           sql.NullString
	VesselIndex               sql.NullInt32
	OptionIndex               int32
	ToTaste                   bool
	Optional                  bool
}

func (q *Queries) UpdateRecipeStepIngredient(ctx context.Context, db DBTX, arg *UpdateRecipeStepIngredientParams) error {
	_, err := db.ExecContext(ctx, updateRecipeStepIngredient,
		arg.IngredientID,
		arg.Name,
		arg.Optional,
		arg.MeasurementUnit,
		arg.MinimumQuantityValue,
		arg.MaximumQuantityValue,
		arg.QuantityNotes,
		arg.RecipeStepProductID,
		arg.IngredientNotes,
		arg.OptionIndex,
		arg.ToTaste,
		arg.ProductPercentageToUse,
		arg.VesselIndex,
		arg.RecipeStepProductRecipeID,
		arg.BelongsToRecipeStep,
		arg.ID,
	)
	return err
}
