// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: valid_measurement_units_search.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const SearchForValidMeasurementUnits = `-- name: SearchForValidMeasurementUnits :many
SELECT
	valid_measurement_units.id,
	valid_measurement_units.name,
	valid_measurement_units.description,
	valid_measurement_units.volumetric,
	valid_measurement_units.icon_path,
	valid_measurement_units.universal,
	valid_measurement_units.metric,
	valid_measurement_units.imperial,
	valid_measurement_units.plural_name,
	valid_measurement_units.created_at,
	valid_measurement_units.last_updated_at,
	valid_measurement_units.archived_at
FROM valid_measurement_units
WHERE (valid_measurement_units.name ILIKE $1 OR valid_measurement_units.universal is TRUE)
AND valid_measurement_units.archived_at IS NULL
LIMIT 50
`

type SearchForValidMeasurementUnitsRow struct {
	CreatedAt     time.Time    `db:"created_at"`
	LastUpdatedAt sql.NullTime `db:"last_updated_at"`
	ArchivedAt    sql.NullTime `db:"archived_at"`
	ID            string       `db:"id"`
	Name          string       `db:"name"`
	Description   string       `db:"description"`
	PluralName    string       `db:"plural_name"`
	IconPath      string       `db:"icon_path"`
	Volumetric    sql.NullBool `db:"volumetric"`
	Metric        bool         `db:"metric"`
	Imperial      bool         `db:"imperial"`
	Universal     bool         `db:"universal"`
}

func (q *Queries) SearchForValidMeasurementUnits(ctx context.Context, db DBTX, name string) ([]*SearchForValidMeasurementUnitsRow, error) {
	rows, err := db.QueryContext(ctx, SearchForValidMeasurementUnits, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*SearchForValidMeasurementUnitsRow{}
	for rows.Next() {
		var i SearchForValidMeasurementUnitsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Volumetric,
			&i.IconPath,
			&i.Universal,
			&i.Metric,
			&i.Imperial,
			&i.PluralName,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
