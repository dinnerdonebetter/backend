// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: get_for_ingredient.sql

package generated

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
)

const getValidIngredientPreparationsForIngredient = `-- name: GetValidIngredientPreparationsForIngredient :many

SELECT
  valid_ingredient_preparations.id as valid_ingredient_preparation_id,
  valid_ingredient_preparations.notes as valid_ingredient_preparation_notes,
  valid_preparations.id as valid_preparation_id,
  valid_preparations.name as valid_preparation_name,
  valid_preparations.description as valid_preparation_description,
  valid_preparations.icon_path as valid_preparation_icon_path,
  valid_preparations.yields_nothing as valid_preparation_yields_nothing,
  valid_preparations.restrict_to_ingredients as valid_preparation_restrict_to_ingredients,
  valid_preparations.minimum_ingredient_count as valid_preparation_minimum_ingredient_count,
  valid_preparations.maximum_ingredient_count as valid_preparation_maximum_ingredient_count,
  valid_preparations.minimum_instrument_count as valid_preparation_minimum_instrument_count,
  valid_preparations.maximum_instrument_count as valid_preparation_maximum_instrument_count,
  valid_preparations.temperature_required as valid_preparation_temperature_required,
  valid_preparations.time_estimate_required as valid_preparation_time_estimate_required,
  valid_preparations.condition_expression_required as valid_preparation_condition_expression_required,
  valid_preparations.consumes_vessel as valid_preparation_consumes_vessel,
  valid_preparations.only_for_vessels as valid_preparation_only_for_vessels,
  valid_preparations.minimum_vessel_count as valid_preparation_minimum_vessel_count,
  valid_preparations.maximum_vessel_count as valid_preparation_maximum_vessel_count,
  valid_preparations.slug as valid_preparation_slug,
  valid_preparations.past_tense as valid_preparation_past_tense,
  valid_preparations.created_at as valid_preparation_created_at,
  valid_preparations.last_updated_at as valid_preparation_last_updated_at,
  valid_preparations.archived_at as valid_preparation_archived_at,
  valid_ingredients.id as valid_ingredient_id,
  valid_ingredients.name as valid_ingredient_name,
  valid_ingredients.description as valid_ingredient_description,
  valid_ingredients.warning as valid_ingredient_warning,
  valid_ingredients.contains_egg as valid_ingredient_contains_egg,
  valid_ingredients.contains_dairy as valid_ingredient_contains_dairy,
  valid_ingredients.contains_peanut as valid_ingredient_contains_peanut,
  valid_ingredients.contains_tree_nut as valid_ingredient_contains_tree_nut,
  valid_ingredients.contains_soy as valid_ingredient_contains_soy,
  valid_ingredients.contains_wheat as valid_ingredient_contains_wheat,
  valid_ingredients.contains_shellfish as valid_ingredient_contains_shellfish,
  valid_ingredients.contains_sesame as valid_ingredient_contains_sesame,
  valid_ingredients.contains_fish as valid_ingredient_contains_fish,
  valid_ingredients.contains_gluten as valid_ingredient_contains_gluten,
  valid_ingredients.animal_flesh as valid_ingredient_animal_flesh,
  valid_ingredients.volumetric as valid_ingredient_volumetric,
  valid_ingredients.is_liquid as valid_ingredient_is_liquid,
  valid_ingredients.icon_path as valid_ingredient_icon_path,
  valid_ingredients.animal_derived as valid_ingredient_animal_derived,
  valid_ingredients.plural_name as valid_ingredient_plural_name,
  valid_ingredients.restrict_to_preparations as valid_ingredient_restrict_to_preparations,
  valid_ingredients.minimum_ideal_storage_temperature_in_celsius as valid_ingredient_minimum_ideal_storage_temperature_in_celsius,
  valid_ingredients.maximum_ideal_storage_temperature_in_celsius as valid_ingredient_maximum_ideal_storage_temperature_in_celsius,
  valid_ingredients.storage_instructions as valid_ingredient_storage_instructions,
  valid_ingredients.slug as valid_ingredient_slug,
  valid_ingredients.contains_alcohol as valid_ingredient_contains_alcohol,
  valid_ingredients.shopping_suggestions as valid_ingredient_shopping_suggestions,
  valid_ingredients.is_starch as valid_ingredient_is_starch,
  valid_ingredients.is_protein as valid_ingredient_is_protein,
  valid_ingredients.is_grain as valid_ingredient_is_grain,
  valid_ingredients.is_fruit as valid_ingredient_is_fruit,
  valid_ingredients.is_salt as valid_ingredient_is_salt,
  valid_ingredients.is_fat as valid_ingredient_is_fat,
  valid_ingredients.is_acid as valid_ingredient_is_acid,
  valid_ingredients.is_heat as valid_ingredient_is_heat,
  valid_ingredients.created_at as valid_ingredient_created_at,
  valid_ingredients.last_updated_at as valid_ingredient_last_updated_at,
  valid_ingredients.archived_at as valid_ingredient_archived_at,
  valid_ingredient_preparations.created_at as valid_ingredient_preparation_created_at,
  valid_ingredient_preparations.last_updated_at as valid_ingredient_preparation_last_updated_at,
  valid_ingredient_preparations.archived_at as valid_ingredient_preparation_archived_at,
  (
      SELECT
          COUNT(valid_ingredient_preparations.id)
      FROM
          valid_ingredient_preparations
      WHERE
          valid_ingredient_preparations.archived_at IS NULL
        AND valid_ingredient_preparations.created_at > COALESCE($1, (SELECT NOW() - interval '999 years'))
        AND valid_ingredient_preparations.created_at < COALESCE($2, (SELECT NOW() + interval '999 years'))
        AND (valid_ingredient_preparations.last_updated_at IS NULL OR valid_ingredient_preparations.last_updated_at > COALESCE($3, (SELECT NOW() - interval '999 years')))
        AND (valid_ingredient_preparations.last_updated_at IS NULL OR valid_ingredient_preparations.last_updated_at < COALESCE($4, (SELECT NOW() + interval '999 years')))
        AND valid_ingredient_preparations.valid_ingredient_id = ANY($5::text[])
  ) as filtered_count,
  (
      SELECT
          COUNT(valid_ingredient_preparations.id)
      FROM
          valid_ingredient_preparations
      WHERE
          valid_ingredient_preparations.archived_at IS NULL
  ) as total_count
FROM
  valid_ingredient_preparations
  JOIN valid_ingredients ON valid_ingredient_preparations.valid_ingredient_id = valid_ingredients.id
  JOIN valid_preparations ON valid_ingredient_preparations.valid_preparation_id = valid_preparations.id
WHERE
    valid_ingredient_preparations.archived_at IS NULL
  AND valid_ingredient_preparations.created_at > COALESCE($1, (SELECT NOW() - interval '999 years'))
  AND valid_ingredient_preparations.created_at < COALESCE($2, (SELECT NOW() + interval '999 years'))
  AND (valid_ingredient_preparations.last_updated_at IS NULL OR valid_ingredient_preparations.last_updated_at > COALESCE($3, (SELECT NOW() - interval '999 years')))
  AND (valid_ingredient_preparations.last_updated_at IS NULL OR valid_ingredient_preparations.last_updated_at < COALESCE($4, (SELECT NOW() + interval '999 years')))
  AND valid_ingredient_preparations.valid_ingredient_id = ANY($5::text[])
OFFSET $6
LIMIT $7
`

type GetValidIngredientPreparationsForIngredientParams struct {
	CreatedAfter  sql.NullTime
	CreatedBefore sql.NullTime
	UpdatedAfter  sql.NullTime
	UpdatedBefore sql.NullTime
	IDs           []string
	QueryOffset   sql.NullInt32
	QueryLimit    sql.NullInt32
}

type GetValidIngredientPreparationsForIngredientRow struct {
	ValidPreparationCreatedAt                              time.Time
	ValidIngredientPreparationCreatedAt                    time.Time
	ValidIngredientCreatedAt                               time.Time
	ValidIngredientPreparationArchivedAt                   sql.NullTime
	ValidIngredientLastUpdatedAt                           sql.NullTime
	ValidPreparationArchivedAt                             sql.NullTime
	ValidPreparationLastUpdatedAt                          sql.NullTime
	ValidIngredientArchivedAt                              sql.NullTime
	ValidIngredientPreparationLastUpdatedAt                sql.NullTime
	ValidIngredientIconPath                                string
	ValidPreparationPastTense                              string
	ValidIngredientPreparationID                           string
	ValidIngredientPluralName                              string
	ValidIngredientPreparationNotes                        string
	ValidPreparationName                                   string
	ValidPreparationID                                     string
	ValidIngredientWarning                                 string
	ValidIngredientStorageInstructions                     string
	ValidIngredientSlug                                    string
	ValidPreparationSlug                                   string
	ValidIngredientDescription                             string
	ValidIngredientShoppingSuggestions                     string
	ValidPreparationIconPath                               string
	ValidPreparationDescription                            string
	ValidIngredientID                                      string
	ValidIngredientName                                    string
	ValidIngredientMinimumIdealStorageTemperatureInCelsius sql.NullString
	ValidIngredientMaximumIdealStorageTemperatureInCelsius sql.NullString
	TotalCount                                             int64
	FilteredCount                                          int64
	ValidPreparationMaximumIngredientCount                 sql.NullInt32
	ValidPreparationMaximumVesselCount                     sql.NullInt32
	ValidPreparationMaximumInstrumentCount                 sql.NullInt32
	ValidPreparationMinimumVesselCount                     int32
	ValidPreparationMinimumInstrumentCount                 int32
	ValidPreparationMinimumIngredientCount                 int32
	ValidIngredientIsLiquid                                sql.NullBool
	ValidPreparationConsumesVessel                         bool
	ValidIngredientAnimalFlesh                             bool
	ValidIngredientVolumetric                              bool
	ValidIngredientContainsGluten                          bool
	ValidIngredientContainsFish                            bool
	ValidIngredientAnimalDerived                           bool
	ValidIngredientContainsSesame                          bool
	ValidIngredientRestrictToPreparations                  bool
	ValidIngredientContainsShellfish                       bool
	ValidIngredientContainsWheat                           bool
	ValidIngredientContainsSoy                             bool
	ValidIngredientContainsTreeNut                         bool
	ValidIngredientContainsAlcohol                         bool
	ValidIngredientContainsPeanut                          bool
	ValidIngredientIsStarch                                bool
	ValidIngredientIsProtein                               bool
	ValidIngredientIsGrain                                 bool
	ValidIngredientIsFruit                                 bool
	ValidIngredientIsSalt                                  bool
	ValidIngredientIsFat                                   bool
	ValidIngredientIsAcid                                  bool
	ValidIngredientIsHeat                                  bool
	ValidIngredientContainsDairy                           bool
	ValidIngredientContainsEgg                             bool
	ValidPreparationOnlyForVessels                         bool
	ValidPreparationConditionExpressionRequired            bool
	ValidPreparationTimeEstimateRequired                   bool
	ValidPreparationTemperatureRequired                    bool
	ValidPreparationRestrictToIngredients                  bool
	ValidPreparationYieldsNothing                          bool
}

func (q *Queries) GetValidIngredientPreparationsForIngredient(ctx context.Context, db DBTX, arg *GetValidIngredientPreparationsForIngredientParams) ([]*GetValidIngredientPreparationsForIngredientRow, error) {
	rows, err := db.QueryContext(ctx, getValidIngredientPreparationsForIngredient,
		arg.CreatedAfter,
		arg.CreatedBefore,
		arg.UpdatedAfter,
		arg.UpdatedBefore,
		pq.Array(arg.IDs),
		arg.QueryOffset,
		arg.QueryLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetValidIngredientPreparationsForIngredientRow{}
	for rows.Next() {
		var i GetValidIngredientPreparationsForIngredientRow
		if err := rows.Scan(
			&i.ValidIngredientPreparationID,
			&i.ValidIngredientPreparationNotes,
			&i.ValidPreparationID,
			&i.ValidPreparationName,
			&i.ValidPreparationDescription,
			&i.ValidPreparationIconPath,
			&i.ValidPreparationYieldsNothing,
			&i.ValidPreparationRestrictToIngredients,
			&i.ValidPreparationMinimumIngredientCount,
			&i.ValidPreparationMaximumIngredientCount,
			&i.ValidPreparationMinimumInstrumentCount,
			&i.ValidPreparationMaximumInstrumentCount,
			&i.ValidPreparationTemperatureRequired,
			&i.ValidPreparationTimeEstimateRequired,
			&i.ValidPreparationConditionExpressionRequired,
			&i.ValidPreparationConsumesVessel,
			&i.ValidPreparationOnlyForVessels,
			&i.ValidPreparationMinimumVesselCount,
			&i.ValidPreparationMaximumVesselCount,
			&i.ValidPreparationSlug,
			&i.ValidPreparationPastTense,
			&i.ValidPreparationCreatedAt,
			&i.ValidPreparationLastUpdatedAt,
			&i.ValidPreparationArchivedAt,
			&i.ValidIngredientID,
			&i.ValidIngredientName,
			&i.ValidIngredientDescription,
			&i.ValidIngredientWarning,
			&i.ValidIngredientContainsEgg,
			&i.ValidIngredientContainsDairy,
			&i.ValidIngredientContainsPeanut,
			&i.ValidIngredientContainsTreeNut,
			&i.ValidIngredientContainsSoy,
			&i.ValidIngredientContainsWheat,
			&i.ValidIngredientContainsShellfish,
			&i.ValidIngredientContainsSesame,
			&i.ValidIngredientContainsFish,
			&i.ValidIngredientContainsGluten,
			&i.ValidIngredientAnimalFlesh,
			&i.ValidIngredientVolumetric,
			&i.ValidIngredientIsLiquid,
			&i.ValidIngredientIconPath,
			&i.ValidIngredientAnimalDerived,
			&i.ValidIngredientPluralName,
			&i.ValidIngredientRestrictToPreparations,
			&i.ValidIngredientMinimumIdealStorageTemperatureInCelsius,
			&i.ValidIngredientMaximumIdealStorageTemperatureInCelsius,
			&i.ValidIngredientStorageInstructions,
			&i.ValidIngredientSlug,
			&i.ValidIngredientContainsAlcohol,
			&i.ValidIngredientShoppingSuggestions,
			&i.ValidIngredientIsStarch,
			&i.ValidIngredientIsProtein,
			&i.ValidIngredientIsGrain,
			&i.ValidIngredientIsFruit,
			&i.ValidIngredientIsSalt,
			&i.ValidIngredientIsFat,
			&i.ValidIngredientIsAcid,
			&i.ValidIngredientIsHeat,
			&i.ValidIngredientCreatedAt,
			&i.ValidIngredientLastUpdatedAt,
			&i.ValidIngredientArchivedAt,
			&i.ValidIngredientPreparationCreatedAt,
			&i.ValidIngredientPreparationLastUpdatedAt,
			&i.ValidIngredientPreparationArchivedAt,
			&i.FilteredCount,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getValidIngredientStateIngredientsForIngredient = `-- name: GetValidIngredientStateIngredientsForIngredient :many

SELECT
	valid_ingredient_state_ingredients.id as valid_ingredient_state_ingredient_id,
	valid_ingredient_state_ingredients.notes as valid_ingredient_state_ingredient_notes,
	valid_ingredient_states.id as valid_ingredient_state_id,
	valid_ingredient_states.name as valid_ingredient_state_name,
    valid_ingredient_states.description as valid_ingredient_state_description,
	valid_ingredient_states.icon_path as valid_ingredient_state_icon_path,
	valid_ingredient_states.slug as valid_ingredient_state_slug,
	valid_ingredient_states.past_tense as valid_ingredient_state_past_tense,
	valid_ingredient_states.attribute_type as valid_ingredient_state_attribute_type,
	valid_ingredient_states.created_at as valid_ingredient_state_created_at,
	valid_ingredient_states.last_updated_at as valid_ingredient_state_last_updated_at,
	valid_ingredient_states.archived_at as valid_ingredient_state_archived_at,
	valid_ingredients.id as valid_ingredient_id,
	valid_ingredients.name as valid_ingredient_name,
	valid_ingredients.description as valid_ingredient_description,
	valid_ingredients.warning as valid_ingredient_warning,
	valid_ingredients.contains_egg as valid_ingredient_contains_egg,
	valid_ingredients.contains_dairy as valid_ingredient_contains_dairy,
	valid_ingredients.contains_peanut as valid_ingredient_contains_peanut,
	valid_ingredients.contains_tree_nut as valid_ingredient_contains_tree_nut,
	valid_ingredients.contains_soy as valid_ingredient_contains_soy,
	valid_ingredients.contains_wheat as valid_ingredient_contains_wheat,
	valid_ingredients.contains_shellfish as valid_ingredient_contains_shellfish,
	valid_ingredients.contains_sesame as valid_ingredient_contains_sesame,
	valid_ingredients.contains_fish as valid_ingredient_contains_fish,
	valid_ingredients.contains_gluten as valid_ingredient_contains_gluten,
	valid_ingredients.animal_flesh as valid_ingredient_animal_flesh,
	valid_ingredients.volumetric as valid_ingredient_volumetric,
	valid_ingredients.is_liquid as valid_ingredient_is_liquid,
	valid_ingredients.icon_path as valid_ingredient_icon_path,
	valid_ingredients.animal_derived as valid_ingredient_animal_derived,
	valid_ingredients.plural_name as valid_ingredient_plural_name,
	valid_ingredients.restrict_to_preparations as valid_ingredient_restrict_to_preparations,
	valid_ingredients.minimum_ideal_storage_temperature_in_celsius as valid_ingredient_minimum_ideal_storage_temperature_in_celsius,
	valid_ingredients.maximum_ideal_storage_temperature_in_celsius as valid_ingredient_maximum_ideal_storage_temperature_in_celsius,
	valid_ingredients.storage_instructions as valid_ingredient_storage_instructions,
	valid_ingredients.slug as valid_ingredient_slug,
	valid_ingredients.contains_alcohol as valid_ingredient_contains_alcohol,
	valid_ingredients.shopping_suggestions as valid_ingredient_shopping_suggestions,
    valid_ingredients.is_starch as valid_ingredient_is_starch,
    valid_ingredients.is_protein as valid_ingredient_is_protein,
    valid_ingredients.is_grain as valid_ingredient_is_grain,
    valid_ingredients.is_fruit as valid_ingredient_is_fruit,
    valid_ingredients.is_salt as valid_ingredient_is_salt,
    valid_ingredients.is_fat as valid_ingredient_is_fat,
    valid_ingredients.is_acid as valid_ingredient_is_acid,
    valid_ingredients.is_heat as valid_ingredient_is_heat,
	valid_ingredients.created_at as valid_ingredient_created_at,
	valid_ingredients.last_updated_at as valid_ingredient_last_updated_at,
	valid_ingredients.archived_at as valid_ingredient_archived_at,
	valid_ingredient_state_ingredients.created_at as valid_ingredient_state_ingredient_created_at,
	valid_ingredient_state_ingredients.last_updated_at as valid_ingredient_state_ingredient_last_updated_at,
	valid_ingredient_state_ingredients.archived_at as valid_ingredient_state_ingredient_archived_at,
    (
        SELECT
            COUNT(valid_ingredient_state_ingredients.id)
        FROM
            valid_ingredient_state_ingredients
        WHERE
            valid_ingredient_state_ingredients.archived_at IS NULL
          AND valid_ingredient_state_ingredients.created_at > COALESCE($1, (SELECT NOW() - interval '999 years'))
          AND valid_ingredient_state_ingredients.created_at < COALESCE($2, (SELECT NOW() + interval '999 years'))
          AND (valid_ingredient_state_ingredients.last_updated_at IS NULL OR valid_ingredient_state_ingredients.last_updated_at > COALESCE($3, (SELECT NOW() - interval '999 years')))
          AND (valid_ingredient_state_ingredients.last_updated_at IS NULL OR valid_ingredient_state_ingredients.last_updated_at < COALESCE($4, (SELECT NOW() + interval '999 years')))
    ) as filtered_count,
    (
        SELECT
            COUNT(valid_ingredient_state_ingredients.id)
        FROM
            valid_ingredient_state_ingredients
        WHERE
            valid_ingredient_state_ingredients.archived_at IS NULL
    ) as total_count
FROM valid_ingredient_state_ingredients
	JOIN valid_ingredients ON valid_ingredient_state_ingredients.valid_ingredient = valid_ingredients.id
	JOIN valid_ingredient_states ON valid_ingredient_state_ingredients.valid_ingredient_state = valid_ingredient_states.id
WHERE valid_ingredient_state_ingredients.archived_at IS NULL
  AND valid_ingredient_state_ingredients.created_at > COALESCE($1, (SELECT NOW() - interval '999 years'))
  AND valid_ingredient_state_ingredients.created_at < COALESCE($2, (SELECT NOW() + interval '999 years'))
  AND (valid_ingredient_state_ingredients.last_updated_at IS NULL OR valid_ingredient_state_ingredients.last_updated_at > COALESCE($3, (SELECT NOW() - interval '999 years')))
  AND (valid_ingredient_state_ingredients.last_updated_at IS NULL OR valid_ingredient_state_ingredients.last_updated_at < COALESCE($4, (SELECT NOW() + interval '999 years')))
  AND valid_ingredient_state_ingredients.valid_ingredient = $5
OFFSET $6
LIMIT $7
`

type GetValidIngredientStateIngredientsForIngredientParams struct {
	CreatedAfter    sql.NullTime
	CreatedBefore   sql.NullTime
	UpdatedAfter    sql.NullTime
	UpdatedBefore   sql.NullTime
	ValidIngredient string
	QueryOffset     sql.NullInt32
	QueryLimit      sql.NullInt32
}

type GetValidIngredientStateIngredientsForIngredientRow struct {
	ValidIngredientStateCreatedAt                          time.Time
	ValidIngredientCreatedAt                               time.Time
	ValidIngredientStateIngredientCreatedAt                time.Time
	ValidIngredientStateIngredientArchivedAt               sql.NullTime
	ValidIngredientStateLastUpdatedAt                      sql.NullTime
	ValidIngredientStateArchivedAt                         sql.NullTime
	ValidIngredientLastUpdatedAt                           sql.NullTime
	ValidIngredientArchivedAt                              sql.NullTime
	ValidIngredientStateIngredientLastUpdatedAt            sql.NullTime
	ValidIngredientStateIconPath                           string
	ValidIngredientStateSlug                               string
	ValidIngredientStateAttributeType                      IngredientAttributeType
	ValidIngredientID                                      string
	ValidIngredientName                                    string
	ValidIngredientDescription                             string
	ValidIngredientWarning                                 string
	ValidIngredientIconPath                                string
	ValidIngredientPluralName                              string
	ValidIngredientStorageInstructions                     string
	ValidIngredientSlug                                    string
	ValidIngredientStatePastTense                          string
	ValidIngredientShoppingSuggestions                     string
	ValidIngredientStateDescription                        string
	ValidIngredientStateName                               string
	ValidIngredientStateID                                 string
	ValidIngredientStateIngredientNotes                    string
	ValidIngredientStateIngredientID                       string
	ValidIngredientMinimumIdealStorageTemperatureInCelsius sql.NullString
	ValidIngredientMaximumIdealStorageTemperatureInCelsius sql.NullString
	FilteredCount                                          int64
	TotalCount                                             int64
	ValidIngredientIsLiquid                                sql.NullBool
	ValidIngredientContainsFish                            bool
	ValidIngredientRestrictToPreparations                  bool
	ValidIngredientAnimalDerived                           bool
	ValidIngredientVolumetric                              bool
	ValidIngredientAnimalFlesh                             bool
	ValidIngredientContainsAlcohol                         bool
	ValidIngredientContainsGluten                          bool
	ValidIngredientIsStarch                                bool
	ValidIngredientIsProtein                               bool
	ValidIngredientIsGrain                                 bool
	ValidIngredientIsFruit                                 bool
	ValidIngredientIsSalt                                  bool
	ValidIngredientIsFat                                   bool
	ValidIngredientIsAcid                                  bool
	ValidIngredientIsHeat                                  bool
	ValidIngredientContainsSesame                          bool
	ValidIngredientContainsShellfish                       bool
	ValidIngredientContainsWheat                           bool
	ValidIngredientContainsSoy                             bool
	ValidIngredientContainsTreeNut                         bool
	ValidIngredientContainsPeanut                          bool
	ValidIngredientContainsDairy                           bool
	ValidIngredientContainsEgg                             bool
}

func (q *Queries) GetValidIngredientStateIngredientsForIngredient(ctx context.Context, db DBTX, arg *GetValidIngredientStateIngredientsForIngredientParams) ([]*GetValidIngredientStateIngredientsForIngredientRow, error) {
	rows, err := db.QueryContext(ctx, getValidIngredientStateIngredientsForIngredient,
		arg.CreatedAfter,
		arg.CreatedBefore,
		arg.UpdatedAfter,
		arg.UpdatedBefore,
		arg.ValidIngredient,
		arg.QueryOffset,
		arg.QueryLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetValidIngredientStateIngredientsForIngredientRow{}
	for rows.Next() {
		var i GetValidIngredientStateIngredientsForIngredientRow
		if err := rows.Scan(
			&i.ValidIngredientStateIngredientID,
			&i.ValidIngredientStateIngredientNotes,
			&i.ValidIngredientStateID,
			&i.ValidIngredientStateName,
			&i.ValidIngredientStateDescription,
			&i.ValidIngredientStateIconPath,
			&i.ValidIngredientStateSlug,
			&i.ValidIngredientStatePastTense,
			&i.ValidIngredientStateAttributeType,
			&i.ValidIngredientStateCreatedAt,
			&i.ValidIngredientStateLastUpdatedAt,
			&i.ValidIngredientStateArchivedAt,
			&i.ValidIngredientID,
			&i.ValidIngredientName,
			&i.ValidIngredientDescription,
			&i.ValidIngredientWarning,
			&i.ValidIngredientContainsEgg,
			&i.ValidIngredientContainsDairy,
			&i.ValidIngredientContainsPeanut,
			&i.ValidIngredientContainsTreeNut,
			&i.ValidIngredientContainsSoy,
			&i.ValidIngredientContainsWheat,
			&i.ValidIngredientContainsShellfish,
			&i.ValidIngredientContainsSesame,
			&i.ValidIngredientContainsFish,
			&i.ValidIngredientContainsGluten,
			&i.ValidIngredientAnimalFlesh,
			&i.ValidIngredientVolumetric,
			&i.ValidIngredientIsLiquid,
			&i.ValidIngredientIconPath,
			&i.ValidIngredientAnimalDerived,
			&i.ValidIngredientPluralName,
			&i.ValidIngredientRestrictToPreparations,
			&i.ValidIngredientMinimumIdealStorageTemperatureInCelsius,
			&i.ValidIngredientMaximumIdealStorageTemperatureInCelsius,
			&i.ValidIngredientStorageInstructions,
			&i.ValidIngredientSlug,
			&i.ValidIngredientContainsAlcohol,
			&i.ValidIngredientShoppingSuggestions,
			&i.ValidIngredientIsStarch,
			&i.ValidIngredientIsProtein,
			&i.ValidIngredientIsGrain,
			&i.ValidIngredientIsFruit,
			&i.ValidIngredientIsSalt,
			&i.ValidIngredientIsFat,
			&i.ValidIngredientIsAcid,
			&i.ValidIngredientIsHeat,
			&i.ValidIngredientCreatedAt,
			&i.ValidIngredientLastUpdatedAt,
			&i.ValidIngredientArchivedAt,
			&i.ValidIngredientStateIngredientCreatedAt,
			&i.ValidIngredientStateIngredientLastUpdatedAt,
			&i.ValidIngredientStateIngredientArchivedAt,
			&i.FilteredCount,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
