// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: get_settings_for_household.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const getServiceSettingConfigurationsForHousehold = `-- name: GetServiceSettingConfigurationsForHousehold :many

SELECT
	service_setting_configurations.id,
    service_setting_configurations.value,
    service_setting_configurations.notes,
	service_settings.id,
    service_settings.name,
    service_settings.type,
    service_settings.description,
    service_settings.default_value,
    service_settings.enumeration,
    service_settings.admins_only,
    service_settings.created_at,
    service_settings.last_updated_at,
    service_settings.archived_at,
    service_setting_configurations.belongs_to_user,
    service_setting_configurations.belongs_to_household,
    service_setting_configurations.created_at,
    service_setting_configurations.last_updated_at,
    service_setting_configurations.archived_at
FROM service_setting_configurations
 JOIN service_settings ON service_setting_configurations.service_setting_id=service_settings.id
WHERE service_settings.archived_at IS NULL
  AND service_setting_configurations.archived_at IS NULL
  AND service_setting_configurations.belongs_to_household = $1
`

type GetServiceSettingConfigurationsForHouseholdRow struct {
	CreatedAt          time.Time
	CreatedAt_2        time.Time
	ArchivedAt_2       sql.NullTime
	LastUpdatedAt_2    sql.NullTime
	ArchivedAt         sql.NullTime
	LastUpdatedAt      sql.NullTime
	Name               string
	Enumeration        string
	Description        string
	Type               SettingType
	ID                 string
	BelongsToUser      string
	BelongsToHousehold string
	ID_2               string
	Notes              string
	Value              string
	DefaultValue       sql.NullString
	AdminsOnly         bool
}

func (q *Queries) GetServiceSettingConfigurationsForHousehold(ctx context.Context, db DBTX, belongsToHousehold string) ([]*GetServiceSettingConfigurationsForHouseholdRow, error) {
	rows, err := db.QueryContext(ctx, getServiceSettingConfigurationsForHousehold, belongsToHousehold)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetServiceSettingConfigurationsForHouseholdRow{}
	for rows.Next() {
		var i GetServiceSettingConfigurationsForHouseholdRow
		if err := rows.Scan(
			&i.ID,
			&i.Value,
			&i.Notes,
			&i.ID_2,
			&i.Name,
			&i.Type,
			&i.Description,
			&i.DefaultValue,
			&i.Enumeration,
			&i.AdminsOnly,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.BelongsToUser,
			&i.BelongsToHousehold,
			&i.CreatedAt_2,
			&i.LastUpdatedAt_2,
			&i.ArchivedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
