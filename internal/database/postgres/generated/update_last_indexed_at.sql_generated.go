// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: update_last_indexed_at.sql

package generated

import (
	"context"
)

const updateMealLastIndexedAt = `-- name: UpdateMealLastIndexedAt :exec

UPDATE meals SET last_indexed_at = NOW() WHERE id = $1 AND archived_at IS NULL
`

func (q *Queries) UpdateMealLastIndexedAt(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, updateMealLastIndexedAt, id)
	return err
}

const updateRecipeLastIndexedAt = `-- name: UpdateRecipeLastIndexedAt :exec

UPDATE recipes SET last_indexed_at = NOW() WHERE id = $1 AND archived_at IS NULL
`

func (q *Queries) UpdateRecipeLastIndexedAt(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, updateRecipeLastIndexedAt, id)
	return err
}

const updateUserLastIndexedAt = `-- name: UpdateUserLastIndexedAt :exec

UPDATE users SET last_indexed_at = NOW() WHERE id = $1 AND archived_at IS NULL
`

func (q *Queries) UpdateUserLastIndexedAt(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, updateUserLastIndexedAt, id)
	return err
}

const updateValidIngredientLastIndexedAt = `-- name: UpdateValidIngredientLastIndexedAt :exec

UPDATE valid_ingredients SET last_indexed_at = NOW() WHERE id = $1 AND archived_at IS NULL
`

func (q *Queries) UpdateValidIngredientLastIndexedAt(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, updateValidIngredientLastIndexedAt, id)
	return err
}

const updateValidIngredientStateLastIndexedAt = `-- name: UpdateValidIngredientStateLastIndexedAt :exec

UPDATE valid_ingredient_states SET last_indexed_at = NOW() WHERE id = $1 AND archived_at IS NULL
`

func (q *Queries) UpdateValidIngredientStateLastIndexedAt(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, updateValidIngredientStateLastIndexedAt, id)
	return err
}

const updateValidInstrumentLastIndexedAt = `-- name: UpdateValidInstrumentLastIndexedAt :exec

UPDATE valid_instruments SET last_indexed_at = NOW() WHERE id = $1 AND archived_at IS NULL
`

func (q *Queries) UpdateValidInstrumentLastIndexedAt(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, updateValidInstrumentLastIndexedAt, id)
	return err
}

const updateValidMeasurementUnitLastIndexedAt = `-- name: UpdateValidMeasurementUnitLastIndexedAt :exec

UPDATE valid_measurement_units SET last_indexed_at = NOW() WHERE id = $1 AND archived_at IS NULL
`

func (q *Queries) UpdateValidMeasurementUnitLastIndexedAt(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, updateValidMeasurementUnitLastIndexedAt, id)
	return err
}

const updateValidPreparationLastIndexedAt = `-- name: UpdateValidPreparationLastIndexedAt :exec

UPDATE valid_preparations SET last_indexed_at = NOW() WHERE id = $1 AND archived_at IS NULL
`

func (q *Queries) UpdateValidPreparationLastIndexedAt(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, updateValidPreparationLastIndexedAt, id)
	return err
}

const updateValidVesselLastIndexedAt = `-- name: UpdateValidVesselLastIndexedAt :exec

UPDATE valid_vessels SET last_indexed_at = NOW() WHERE id = $1 AND archived_at IS NULL
`

func (q *Queries) UpdateValidVesselLastIndexedAt(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, updateValidVesselLastIndexedAt, id)
	return err
}
