// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: update_last_indexed_at.sql

package generated

import (
	"context"
)

const UpdateMealLastIndexedAt = `-- name: UpdateMealLastIndexedAt :exec

UPDATE meals SET last_indexed_at = NOW() WHERE id = $1 AND archived_at IS NULL
`

func (q *Queries) UpdateMealLastIndexedAt(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, UpdateMealLastIndexedAt, id)
	return err
}

const UpdateRecipeLastIndexedAt = `-- name: UpdateRecipeLastIndexedAt :exec

UPDATE recipes SET last_indexed_at = NOW() WHERE id = $1 AND archived_at IS NULL
`

func (q *Queries) UpdateRecipeLastIndexedAt(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, UpdateRecipeLastIndexedAt, id)
	return err
}

const UpdateUserLastIndexedAt = `-- name: UpdateUserLastIndexedAt :exec

UPDATE users SET last_indexed_at = NOW() WHERE id = $1 AND archived_at IS NULL
`

func (q *Queries) UpdateUserLastIndexedAt(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, UpdateUserLastIndexedAt, id)
	return err
}

const UpdateValidIngredientLastIndexedAt = `-- name: UpdateValidIngredientLastIndexedAt :exec

UPDATE valid_ingredients SET last_indexed_at = NOW() WHERE id = $1 AND archived_at IS NULL
`

func (q *Queries) UpdateValidIngredientLastIndexedAt(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, UpdateValidIngredientLastIndexedAt, id)
	return err
}

const UpdateValidIngredientStateLastIndexedAt = `-- name: UpdateValidIngredientStateLastIndexedAt :exec

UPDATE valid_ingredient_states SET last_indexed_at = NOW() WHERE id = $1 AND archived_at IS NULL
`

func (q *Queries) UpdateValidIngredientStateLastIndexedAt(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, UpdateValidIngredientStateLastIndexedAt, id)
	return err
}

const UpdateValidInstrumentLastIndexedAt = `-- name: UpdateValidInstrumentLastIndexedAt :exec

UPDATE valid_instruments SET last_indexed_at = NOW() WHERE id = $1 AND archived_at IS NULL
`

func (q *Queries) UpdateValidInstrumentLastIndexedAt(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, UpdateValidInstrumentLastIndexedAt, id)
	return err
}

const UpdateValidMeasurementUnitLastIndexedAt = `-- name: UpdateValidMeasurementUnitLastIndexedAt :exec

UPDATE valid_measurement_units SET last_indexed_at = NOW() WHERE id = $1 AND archived_at IS NULL
`

func (q *Queries) UpdateValidMeasurementUnitLastIndexedAt(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, UpdateValidMeasurementUnitLastIndexedAt, id)
	return err
}

const UpdateValidPreparationLastIndexedAt = `-- name: UpdateValidPreparationLastIndexedAt :exec

UPDATE valid_preparations SET last_indexed_at = NOW() WHERE id = $1 AND archived_at IS NULL
`

func (q *Queries) UpdateValidPreparationLastIndexedAt(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, UpdateValidPreparationLastIndexedAt, id)
	return err
}

const UpdateValidVesselLastIndexedAt = `-- name: UpdateValidVesselLastIndexedAt :exec

UPDATE valid_vessels SET last_indexed_at = NOW() WHERE id = $1 AND archived_at IS NULL
`

func (q *Queries) UpdateValidVesselLastIndexedAt(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, UpdateValidVesselLastIndexedAt, id)
	return err
}
