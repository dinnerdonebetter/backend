// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: meals_get_one.sql

package generated

import (
	"context"
	"database/sql"
)

const GetMeal = `-- name: GetMeal :exec
SELECT
	meals.id,
	meals.name,
	meals.description,
	meals.created_at,
	meals.last_updated_at,
	meals.archived_at,
	meals.created_by_user,
	meal_recipes.recipe_id
FROM meals
	FULL OUTER JOIN meal_recipes ON meal_recipes.meal_id=meals.id
WHERE meals.archived_at IS NULL
	AND meal_recipes.archived_at IS NULL
	AND meals.id = $1
`

type GetMealRow struct {
	ID            sql.NullString `db:"id"`
	Name          sql.NullString `db:"name"`
	Description   sql.NullString `db:"description"`
	CreatedAt     sql.NullTime   `db:"created_at"`
	LastUpdatedAt sql.NullTime   `db:"last_updated_at"`
	ArchivedAt    sql.NullTime   `db:"archived_at"`
	CreatedByUser sql.NullString `db:"created_by_user"`
	RecipeID      sql.NullString `db:"recipe_id"`
}

func (q *Queries) GetMeal(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.getMealStmt, GetMeal, id)
	return err
}
