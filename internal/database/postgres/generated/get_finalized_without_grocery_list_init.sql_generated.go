// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: get_finalized_without_grocery_list_init.sql

package generated

import (
	"context"
)

const getFinalizedMealPlansWithoutGroceryListInit = `-- name: GetFinalizedMealPlansWithoutGroceryListInit :many

SELECT
	meal_plans.id,
	meal_plans.belongs_to_household
FROM meal_plans
WHERE meal_plans.archived_at IS NULL
	AND meal_plans.status = 'finalized'
	AND meal_plans.grocery_list_initialized IS FALSE
`

type GetFinalizedMealPlansWithoutGroceryListInitRow struct {
	ID                 string
	BelongsToHousehold string
}

func (q *Queries) GetFinalizedMealPlansWithoutGroceryListInit(ctx context.Context, db DBTX) ([]*GetFinalizedMealPlansWithoutGroceryListInitRow, error) {
	rows, err := db.QueryContext(ctx, getFinalizedMealPlansWithoutGroceryListInit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetFinalizedMealPlansWithoutGroceryListInitRow{}
	for rows.Next() {
		var i GetFinalizedMealPlansWithoutGroceryListInitRow
		if err := rows.Scan(&i.ID, &i.BelongsToHousehold); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
