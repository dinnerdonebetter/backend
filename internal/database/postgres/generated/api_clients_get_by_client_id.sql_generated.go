// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: api_clients_get_by_client_id.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const GetAPIClientByClientID = `-- name: GetAPIClientByClientID :one
SELECT
	api_clients.id,
	api_clients.name,
	api_clients.client_id,
	api_clients.secret_key,
	api_clients.created_at,
	api_clients.last_updated_at,
	api_clients.archived_at,
	api_clients.belongs_to_user
FROM api_clients
WHERE api_clients.archived_at IS NULL
	AND api_clients.client_id = $1
`

type GetAPIClientByClientIDRow struct {
	CreatedAt     time.Time      `db:"created_at"`
	ArchivedAt    sql.NullTime   `db:"archived_at"`
	LastUpdatedAt sql.NullTime   `db:"last_updated_at"`
	BelongsToUser string         `db:"belongs_to_user"`
	ClientID      string         `db:"client_id"`
	ID            string         `db:"id"`
	SecretKey     []byte         `db:"secret_key"`
	Name          sql.NullString `db:"name"`
}

func (q *Queries) GetAPIClientByClientID(ctx context.Context, db DBTX, clientID string) (*GetAPIClientByClientIDRow, error) {
	row := db.QueryRowContext(ctx, GetAPIClientByClientID, clientID)
	var i GetAPIClientByClientIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ClientID,
		&i.SecretKey,
		&i.CreatedAt,
		&i.LastUpdatedAt,
		&i.ArchivedAt,
		&i.BelongsToUser,
	)
	return &i, err
}
