// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0

package generated

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type GroceryListItemStatus string

const (
	GroceryListItemStatusUnknown      GroceryListItemStatus = "unknown"
	GroceryListItemStatusAlreadyowned GroceryListItemStatus = "already owned"
	GroceryListItemStatusNeeds        GroceryListItemStatus = "needs"
	GroceryListItemStatusUnavailable  GroceryListItemStatus = "unavailable"
	GroceryListItemStatusAcquired     GroceryListItemStatus = "acquired"
)

func (e *GroceryListItemStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GroceryListItemStatus(s)
	case string:
		*e = GroceryListItemStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for GroceryListItemStatus: %T", src)
	}
	return nil
}

type NullGroceryListItemStatus struct {
	GroceryListItemStatus GroceryListItemStatus
	Valid                 bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGroceryListItemStatus) Scan(value interface{}) error {
	if value == nil {
		ns.GroceryListItemStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GroceryListItemStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGroceryListItemStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.GroceryListItemStatus, nil
}

func (e GroceryListItemStatus) Valid() bool {
	switch e {
	case GroceryListItemStatusUnknown,
		GroceryListItemStatusAlreadyowned,
		GroceryListItemStatusNeeds,
		GroceryListItemStatusUnavailable,
		GroceryListItemStatusAcquired:
		return true
	}
	return false
}

func AllGroceryListItemStatusValues() []GroceryListItemStatus {
	return []GroceryListItemStatus{
		GroceryListItemStatusUnknown,
		GroceryListItemStatusAlreadyowned,
		GroceryListItemStatusNeeds,
		GroceryListItemStatusUnavailable,
		GroceryListItemStatusAcquired,
	}
}

type InvitationState string

const (
	InvitationStatePending   InvitationState = "pending"
	InvitationStateCancelled InvitationState = "cancelled"
	InvitationStateAccepted  InvitationState = "accepted"
	InvitationStateRejected  InvitationState = "rejected"
)

func (e *InvitationState) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = InvitationState(s)
	case string:
		*e = InvitationState(s)
	default:
		return fmt.Errorf("unsupported scan type for InvitationState: %T", src)
	}
	return nil
}

type NullInvitationState struct {
	InvitationState InvitationState
	Valid           bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullInvitationState) Scan(value interface{}) error {
	if value == nil {
		ns.InvitationState, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.InvitationState.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullInvitationState) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.InvitationState, nil
}

func (e InvitationState) Valid() bool {
	switch e {
	case InvitationStatePending,
		InvitationStateCancelled,
		InvitationStateAccepted,
		InvitationStateRejected:
		return true
	}
	return false
}

func AllInvitationStateValues() []InvitationState {
	return []InvitationState{
		InvitationStatePending,
		InvitationStateCancelled,
		InvitationStateAccepted,
		InvitationStateRejected,
	}
}

type MealName string

const (
	MealNameBreakfast       MealName = "breakfast"
	MealNameSecondBreakfast MealName = "second_breakfast"
	MealNameBrunch          MealName = "brunch"
	MealNameLunch           MealName = "lunch"
	MealNameSupper          MealName = "supper"
	MealNameDinner          MealName = "dinner"
)

func (e *MealName) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MealName(s)
	case string:
		*e = MealName(s)
	default:
		return fmt.Errorf("unsupported scan type for MealName: %T", src)
	}
	return nil
}

type NullMealName struct {
	MealName MealName
	Valid    bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMealName) Scan(value interface{}) error {
	if value == nil {
		ns.MealName, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MealName.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMealName) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.MealName, nil
}

func (e MealName) Valid() bool {
	switch e {
	case MealNameBreakfast,
		MealNameSecondBreakfast,
		MealNameBrunch,
		MealNameLunch,
		MealNameSupper,
		MealNameDinner:
		return true
	}
	return false
}

func AllMealNameValues() []MealName {
	return []MealName{
		MealNameBreakfast,
		MealNameSecondBreakfast,
		MealNameBrunch,
		MealNameLunch,
		MealNameSupper,
		MealNameDinner,
	}
}

type MealPlanStatus string

const (
	MealPlanStatusAwaitingVotes MealPlanStatus = "awaiting_votes"
	MealPlanStatusFinalized     MealPlanStatus = "finalized"
)

func (e *MealPlanStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MealPlanStatus(s)
	case string:
		*e = MealPlanStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for MealPlanStatus: %T", src)
	}
	return nil
}

type NullMealPlanStatus struct {
	MealPlanStatus MealPlanStatus
	Valid          bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMealPlanStatus) Scan(value interface{}) error {
	if value == nil {
		ns.MealPlanStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MealPlanStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMealPlanStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.MealPlanStatus, nil
}

func (e MealPlanStatus) Valid() bool {
	switch e {
	case MealPlanStatusAwaitingVotes,
		MealPlanStatusFinalized:
		return true
	}
	return false
}

func AllMealPlanStatusValues() []MealPlanStatus {
	return []MealPlanStatus{
		MealPlanStatusAwaitingVotes,
		MealPlanStatusFinalized,
	}
}

type PrepStepStatus string

const (
	PrepStepStatusUnfinished PrepStepStatus = "unfinished"
	PrepStepStatusPostponed  PrepStepStatus = "postponed"
	PrepStepStatusIgnored    PrepStepStatus = "ignored"
	PrepStepStatusCanceled   PrepStepStatus = "canceled"
	PrepStepStatusFinished   PrepStepStatus = "finished"
)

func (e *PrepStepStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PrepStepStatus(s)
	case string:
		*e = PrepStepStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PrepStepStatus: %T", src)
	}
	return nil
}

type NullPrepStepStatus struct {
	PrepStepStatus PrepStepStatus
	Valid          bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPrepStepStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PrepStepStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PrepStepStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPrepStepStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.PrepStepStatus, nil
}

func (e PrepStepStatus) Valid() bool {
	switch e {
	case PrepStepStatusUnfinished,
		PrepStepStatusPostponed,
		PrepStepStatusIgnored,
		PrepStepStatusCanceled,
		PrepStepStatusFinished:
		return true
	}
	return false
}

func AllPrepStepStatusValues() []PrepStepStatus {
	return []PrepStepStatus{
		PrepStepStatusUnfinished,
		PrepStepStatusPostponed,
		PrepStepStatusIgnored,
		PrepStepStatusCanceled,
		PrepStepStatusFinished,
	}
}

type RecipeStepProductType string

const (
	RecipeStepProductTypeIngredient RecipeStepProductType = "ingredient"
	RecipeStepProductTypeInstrument RecipeStepProductType = "instrument"
)

func (e *RecipeStepProductType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RecipeStepProductType(s)
	case string:
		*e = RecipeStepProductType(s)
	default:
		return fmt.Errorf("unsupported scan type for RecipeStepProductType: %T", src)
	}
	return nil
}

type NullRecipeStepProductType struct {
	RecipeStepProductType RecipeStepProductType
	Valid                 bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRecipeStepProductType) Scan(value interface{}) error {
	if value == nil {
		ns.RecipeStepProductType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RecipeStepProductType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRecipeStepProductType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.RecipeStepProductType, nil
}

func (e RecipeStepProductType) Valid() bool {
	switch e {
	case RecipeStepProductTypeIngredient,
		RecipeStepProductTypeInstrument:
		return true
	}
	return false
}

func AllRecipeStepProductTypeValues() []RecipeStepProductType {
	return []RecipeStepProductType{
		RecipeStepProductTypeIngredient,
		RecipeStepProductTypeInstrument,
	}
}

type StorageContainerType string

const (
	StorageContainerTypeUncovered             StorageContainerType = "uncovered"
	StorageContainerTypeCovered               StorageContainerType = "covered"
	StorageContainerTypeOnawirerack           StorageContainerType = "on a wire rack"
	StorageContainerTypeInanairtightcontainer StorageContainerType = "in an airtight container"
)

func (e *StorageContainerType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = StorageContainerType(s)
	case string:
		*e = StorageContainerType(s)
	default:
		return fmt.Errorf("unsupported scan type for StorageContainerType: %T", src)
	}
	return nil
}

type NullStorageContainerType struct {
	StorageContainerType StorageContainerType
	Valid                bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStorageContainerType) Scan(value interface{}) error {
	if value == nil {
		ns.StorageContainerType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.StorageContainerType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStorageContainerType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.StorageContainerType, nil
}

func (e StorageContainerType) Valid() bool {
	switch e {
	case StorageContainerTypeUncovered,
		StorageContainerTypeCovered,
		StorageContainerTypeOnawirerack,
		StorageContainerTypeInanairtightcontainer:
		return true
	}
	return false
}

func AllStorageContainerTypeValues() []StorageContainerType {
	return []StorageContainerType{
		StorageContainerTypeUncovered,
		StorageContainerTypeCovered,
		StorageContainerTypeOnawirerack,
		StorageContainerTypeInanairtightcontainer,
	}
}

type TimeZone string

const (
	TimeZoneUTC        TimeZone = "UTC"
	TimeZoneUSPacific  TimeZone = "US/Pacific"
	TimeZoneUSMountain TimeZone = "US/Mountain"
	TimeZoneUSCentral  TimeZone = "US/Central"
	TimeZoneUSEastern  TimeZone = "US/Eastern"
)

func (e *TimeZone) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TimeZone(s)
	case string:
		*e = TimeZone(s)
	default:
		return fmt.Errorf("unsupported scan type for TimeZone: %T", src)
	}
	return nil
}

type NullTimeZone struct {
	TimeZone TimeZone
	Valid    bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTimeZone) Scan(value interface{}) error {
	if value == nil {
		ns.TimeZone, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TimeZone.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTimeZone) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.TimeZone, nil
}

func (e TimeZone) Valid() bool {
	switch e {
	case TimeZoneUTC,
		TimeZoneUSPacific,
		TimeZoneUSMountain,
		TimeZoneUSCentral,
		TimeZoneUSEastern:
		return true
	}
	return false
}

func AllTimeZoneValues() []TimeZone {
	return []TimeZone{
		TimeZoneUTC,
		TimeZoneUSPacific,
		TimeZoneUSMountain,
		TimeZoneUSCentral,
		TimeZoneUSEastern,
	}
}

type WebhookEvent string

const (
	WebhookEventWebhookCreated  WebhookEvent = "webhook_created"
	WebhookEventWebhookUpdated  WebhookEvent = "webhook_updated"
	WebhookEventWebhookArchived WebhookEvent = "webhook_archived"
)

func (e *WebhookEvent) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = WebhookEvent(s)
	case string:
		*e = WebhookEvent(s)
	default:
		return fmt.Errorf("unsupported scan type for WebhookEvent: %T", src)
	}
	return nil
}

type NullWebhookEvent struct {
	WebhookEvent WebhookEvent
	Valid        bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullWebhookEvent) Scan(value interface{}) error {
	if value == nil {
		ns.WebhookEvent, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.WebhookEvent.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullWebhookEvent) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.WebhookEvent, nil
}

func (e WebhookEvent) Valid() bool {
	switch e {
	case WebhookEventWebhookCreated,
		WebhookEventWebhookUpdated,
		WebhookEventWebhookArchived:
		return true
	}
	return false
}

func AllWebhookEventValues() []WebhookEvent {
	return []WebhookEvent{
		WebhookEventWebhookCreated,
		WebhookEventWebhookUpdated,
		WebhookEventWebhookArchived,
	}
}

type ApiClients struct {
	ID               string
	Name             sql.NullString
	ClientID         string
	SecretKey        []byte
	Permissions      int64
	AdminPermissions int64
	CreatedAt        time.Time
	LastUpdatedAt    sql.NullTime
	ArchivedAt       sql.NullTime
	BelongsToUser    string
}

type HouseholdInvitations struct {
	ID                   string
	DestinationHousehold string
	ToEmail              string
	ToUser               sql.NullString
	FromUser             string
	Status               InvitationState
	Note                 string
	StatusNote           string
	Token                string
	CreatedAt            time.Time
	LastUpdatedAt        sql.NullTime
	ArchivedAt           sql.NullTime
}

type HouseholdUserMemberships struct {
	ID                 string
	BelongsToHousehold string
	BelongsToUser      string
	DefaultHousehold   bool
	HouseholdRoles     string
	CreatedAt          time.Time
	LastUpdatedAt      sql.NullTime
	ArchivedAt         sql.NullTime
}

type Households struct {
	ID                         string
	Name                       string
	BillingStatus              string
	ContactEmail               string
	ContactPhone               string
	PaymentProcessorCustomerID string
	SubscriptionPlanID         sql.NullString
	CreatedAt                  time.Time
	LastUpdatedAt              sql.NullTime
	ArchivedAt                 sql.NullTime
	BelongsToUser              string
	TimeZone                   TimeZone
}

type MealPlanEvents struct {
	ID                string
	Notes             string
	StartsAt          time.Time
	EndsAt            time.Time
	MealName          MealName
	BelongsToMealPlan string
	CreatedAt         time.Time
	LastUpdatedAt     sql.NullTime
	ArchivedAt        sql.NullTime
}

type MealPlanGroceryListItems struct {
	ID                       string
	ValidIngredient          string
	ValidMeasurementUnit     string
	MinimumQuantityNeeded    string
	MaximumQuantityNeeded    string
	QuantityPurchased        sql.NullString
	PurchasedMeasurementUnit sql.NullString
	PurchasedUpc             sql.NullString
	PurchasePrice            sql.NullString
	StatusExplanation        string
	Status                   GroceryListItemStatus
	CreatedAt                time.Time
	LastUpdatedAt            sql.NullTime
	CompletedAt              sql.NullTime
	BelongsToMealPlan        string
}

type MealPlanOptionVotes struct {
	ID                      string
	Rank                    int32
	Abstain                 bool
	Notes                   string
	ByUser                  string
	CreatedAt               time.Time
	LastUpdatedAt           sql.NullTime
	ArchivedAt              sql.NullTime
	BelongsToMealPlanOption string
}

type MealPlanOptions struct {
	ID                     string
	MealID                 string
	Notes                  string
	Chosen                 bool
	Tiebroken              bool
	CreatedAt              time.Time
	LastUpdatedAt          sql.NullTime
	ArchivedAt             sql.NullTime
	AssignedCook           sql.NullString
	AssignedDishwasher     sql.NullString
	BelongsToMealPlanEvent sql.NullString
}

type MealPlanTasks struct {
	ID                      string
	BelongsToMealPlanOption string
	BelongsToRecipePrepTask string
	CreationExplanation     string
	StatusExplanation       string
	Status                  PrepStepStatus
	CreatedAt               time.Time
	LastUpdatedAt           sql.NullTime
	AssignedToUser          sql.NullString
	CompletedAt             sql.NullTime
}

type MealPlans struct {
	ID                     string
	Notes                  string
	Status                 MealPlanStatus
	VotingDeadline         time.Time
	CreatedAt              time.Time
	LastUpdatedAt          sql.NullTime
	ArchivedAt             sql.NullTime
	BelongsToHousehold     string
	GroceryListInitialized bool
	TasksCreated           bool
}

type MealRecipes struct {
	ID            string
	MealID        string
	RecipeID      string
	CreatedAt     time.Time
	LastUpdatedAt sql.NullTime
	ArchivedAt    sql.NullTime
}

type Meals struct {
	ID            string
	Name          string
	Description   string
	CreatedAt     time.Time
	LastUpdatedAt sql.NullTime
	ArchivedAt    sql.NullTime
	CreatedByUser string
}

type PasswordResetTokens struct {
	ID            string
	Token         string
	ExpiresAt     time.Time
	CreatedAt     time.Time
	LastUpdatedAt sql.NullTime
	RedeemedAt    sql.NullTime
	BelongsToUser string
}

type RecipeMedia struct {
	ID                  string
	BelongsToRecipe     sql.NullString
	BelongsToRecipeStep sql.NullString
	MimeType            string
	InternalPath        string
	ExternalPath        string
	CreatedAt           time.Time
	LastUpdatedAt       sql.NullTime
	ArchivedAt          sql.NullTime
	Index               int32
}

type RecipePrepTaskSteps struct {
	ID                      string
	SatisfiesRecipeStep     bool
	BelongsToRecipeStep     string
	BelongsToRecipePrepTask string
}

type RecipePrepTasks struct {
	ID                                     string
	Notes                                  string
	ExplicitStorageInstructions            string
	MinimumTimeBufferBeforeRecipeInSeconds int32
	MaximumTimeBufferBeforeRecipeInSeconds sql.NullInt32
	StorageType                            NullStorageContainerType
	MinimumStorageTemperatureInCelsius     sql.NullString
	MaximumStorageTemperatureInCelsius     sql.NullString
	BelongsToRecipe                        string
	CreatedAt                              time.Time
	LastUpdatedAt                          sql.NullTime
	ArchivedAt                             sql.NullTime
}

type RecipeStepIngredients struct {
	ID                   string
	IngredientID         sql.NullString
	MinimumQuantityValue string
	QuantityNotes        string
	ProductOfRecipeStep  bool
	IngredientNotes      string
	CreatedAt            time.Time
	LastUpdatedAt        sql.NullTime
	ArchivedAt           sql.NullTime
	BelongsToRecipeStep  string
	Name                 string
	RecipeStepProductID  sql.NullString
	MaximumQuantityValue string
	MeasurementUnit      sql.NullString
	Optional             bool
}

type RecipeStepInstruments struct {
	ID                  string
	InstrumentID        sql.NullString
	Notes               string
	CreatedAt           time.Time
	LastUpdatedAt       sql.NullTime
	ArchivedAt          sql.NullTime
	BelongsToRecipeStep string
	PreferenceRank      int32
	RecipeStepProductID sql.NullString
	ProductOfRecipeStep bool
	Name                string
	Optional            bool
	MinimumQuantity     int32
	MaximumQuantity     int32
}

type RecipeStepProducts struct {
	ID                                 string
	Name                               string
	CreatedAt                          time.Time
	LastUpdatedAt                      sql.NullTime
	ArchivedAt                         sql.NullTime
	BelongsToRecipeStep                string
	QuantityNotes                      string
	MinimumQuantityValue               string
	MaximumQuantityValue               string
	MeasurementUnit                    sql.NullString
	Type                               RecipeStepProductType
	Compostable                        bool
	MaximumStorageDurationInSeconds    sql.NullInt32
	MinimumStorageTemperatureInCelsius sql.NullString
	MaximumStorageTemperatureInCelsius sql.NullString
	StorageInstructions                string
}

type RecipeSteps struct {
	ID                            string
	Index                         int32
	PreparationID                 string
	MinimumEstimatedTimeInSeconds sql.NullInt64
	MaximumEstimatedTimeInSeconds sql.NullInt64
	MinimumTemperatureInCelsius   sql.NullString
	Notes                         string
	CreatedAt                     time.Time
	LastUpdatedAt                 sql.NullTime
	ArchivedAt                    sql.NullTime
	BelongsToRecipe               string
	Optional                      bool
	MaximumTemperatureInCelsius   sql.NullString
	ExplicitInstructions          string
}

type Recipes struct {
	ID                 string
	Name               string
	Source             string
	Description        string
	InspiredByRecipeID sql.NullString
	CreatedAt          time.Time
	LastUpdatedAt      sql.NullTime
	ArchivedAt         sql.NullTime
	CreatedByUser      string
	YieldsPortions     int32
	SealOfApproval     bool
}

type Sessions struct {
	Token     string
	Data      []byte
	Expiry    time.Time
	CreatedOn int64
}

type Users struct {
	ID                           string
	Username                     string
	AvatarSrc                    sql.NullString
	EmailAddress                 string
	HashedPassword               string
	PasswordLastChangedAt        sql.NullTime
	RequiresPasswordChange       bool
	TwoFactorSecret              string
	TwoFactorSecretVerifiedAt    sql.NullTime
	ServiceRoles                 string
	UserAccountStatus            string
	UserAccountStatusExplanation string
	CreatedAt                    time.Time
	LastUpdatedAt                sql.NullTime
	ArchivedAt                   sql.NullTime
	BirthDay                     sql.NullInt16
	BirthMonth                   sql.NullInt16
}

type ValidIngredientMeasurementUnits struct {
	ID                       string
	Notes                    string
	ValidIngredientID        string
	ValidMeasurementUnitID   string
	CreatedAt                time.Time
	LastUpdatedAt            sql.NullTime
	ArchivedAt               sql.NullTime
	MinimumAllowableQuantity string
	MaximumAllowableQuantity string
}

type ValidIngredientPreparations struct {
	ID                 string
	Notes              string
	ValidPreparationID string
	ValidIngredientID  string
	CreatedAt          time.Time
	LastUpdatedAt      sql.NullTime
	ArchivedAt         sql.NullTime
}

type ValidIngredients struct {
	ID                                      string
	Name                                    string
	Description                             string
	Warning                                 string
	ContainsEgg                             bool
	ContainsDairy                           bool
	ContainsPeanut                          bool
	ContainsTreeNut                         bool
	ContainsSoy                             bool
	ContainsWheat                           bool
	ContainsShellfish                       bool
	ContainsSesame                          bool
	ContainsFish                            bool
	ContainsGluten                          bool
	AnimalFlesh                             bool
	Volumetric                              bool
	IconPath                                string
	CreatedAt                               time.Time
	LastUpdatedAt                           sql.NullTime
	ArchivedAt                              sql.NullTime
	IsLiquid                                sql.NullBool
	AnimalDerived                           bool
	PluralName                              string
	RestrictToPreparations                  bool
	MinimumIdealStorageTemperatureInCelsius sql.NullString
	MaximumIdealStorageTemperatureInCelsius sql.NullString
	StorageInstructions                     string
}

type ValidInstruments struct {
	ID               string
	Name             string
	Description      string
	IconPath         string
	CreatedAt        time.Time
	LastUpdatedAt    sql.NullTime
	ArchivedAt       sql.NullTime
	PluralName       string
	UsableForStorage bool
}

type ValidMeasurementConversions struct {
	ID                string
	FromUnit          string
	ToUnit            string
	OnlyForIngredient sql.NullString
	Modifier          string
	Notes             string
	CreatedAt         time.Time
	LastUpdatedAt     sql.NullTime
	ArchivedAt        sql.NullTime
}

type ValidMeasurementUnits struct {
	ID            string
	Name          string
	Description   string
	IconPath      string
	Volumetric    sql.NullBool
	CreatedAt     time.Time
	LastUpdatedAt sql.NullTime
	ArchivedAt    sql.NullTime
	Universal     bool
	Metric        bool
	Imperial      bool
	PluralName    string
}

type ValidPreparationInstruments struct {
	ID                 string
	Notes              string
	ValidPreparationID string
	ValidInstrumentID  string
	CreatedAt          time.Time
	LastUpdatedAt      sql.NullTime
	ArchivedAt         sql.NullTime
}

type ValidPreparations struct {
	ID                       string
	Name                     string
	Description              string
	IconPath                 string
	CreatedAt                time.Time
	LastUpdatedAt            sql.NullTime
	ArchivedAt               sql.NullTime
	YieldsNothing            bool
	RestrictToIngredients    bool
	ZeroIngredientsAllowable bool
	PastTense                string
}

type WebhookTriggerEvents struct {
	ID               string
	TriggerEvent     WebhookEvent
	BelongsToWebhook string
	CreatedAt        time.Time
	ArchivedAt       sql.NullTime
}

type Webhooks struct {
	ID                 string
	Name               string
	ContentType        string
	Url                string
	Method             string
	CreatedAt          time.Time
	LastUpdatedAt      sql.NullTime
	ArchivedAt         sql.NullTime
	BelongsToHousehold string
}
