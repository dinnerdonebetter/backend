// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0

package generated

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type GroceryListItemStatus string

const (
	GroceryListItemStatusUnknown      GroceryListItemStatus = "unknown"
	GroceryListItemStatusAlreadyowned GroceryListItemStatus = "already owned"
	GroceryListItemStatusNeeds        GroceryListItemStatus = "needs"
	GroceryListItemStatusUnavailable  GroceryListItemStatus = "unavailable"
	GroceryListItemStatusAcquired     GroceryListItemStatus = "acquired"
)

func (e *GroceryListItemStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GroceryListItemStatus(s)
	case string:
		*e = GroceryListItemStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for GroceryListItemStatus: %T", src)
	}
	return nil
}

type NullGroceryListItemStatus struct {
	GroceryListItemStatus GroceryListItemStatus
	Valid                 bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGroceryListItemStatus) Scan(value interface{}) error {
	if value == nil {
		ns.GroceryListItemStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GroceryListItemStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGroceryListItemStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.GroceryListItemStatus, nil
}

func (e GroceryListItemStatus) Valid() bool {
	switch e {
	case GroceryListItemStatusUnknown,
		GroceryListItemStatusAlreadyowned,
		GroceryListItemStatusNeeds,
		GroceryListItemStatusUnavailable,
		GroceryListItemStatusAcquired:
		return true
	}
	return false
}

type InvitationState string

const (
	InvitationStatePending   InvitationState = "pending"
	InvitationStateCancelled InvitationState = "cancelled"
	InvitationStateAccepted  InvitationState = "accepted"
	InvitationStateRejected  InvitationState = "rejected"
)

func (e *InvitationState) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = InvitationState(s)
	case string:
		*e = InvitationState(s)
	default:
		return fmt.Errorf("unsupported scan type for InvitationState: %T", src)
	}
	return nil
}

type NullInvitationState struct {
	InvitationState InvitationState
	Valid           bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullInvitationState) Scan(value interface{}) error {
	if value == nil {
		ns.InvitationState, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.InvitationState.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullInvitationState) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.InvitationState, nil
}

func (e InvitationState) Valid() bool {
	switch e {
	case InvitationStatePending,
		InvitationStateCancelled,
		InvitationStateAccepted,
		InvitationStateRejected:
		return true
	}
	return false
}

type MealName string

const (
	MealNameBreakfast       MealName = "breakfast"
	MealNameSecondBreakfast MealName = "second_breakfast"
	MealNameBrunch          MealName = "brunch"
	MealNameLunch           MealName = "lunch"
	MealNameSupper          MealName = "supper"
	MealNameDinner          MealName = "dinner"
)

func (e *MealName) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MealName(s)
	case string:
		*e = MealName(s)
	default:
		return fmt.Errorf("unsupported scan type for MealName: %T", src)
	}
	return nil
}

type NullMealName struct {
	MealName MealName
	Valid    bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMealName) Scan(value interface{}) error {
	if value == nil {
		ns.MealName, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MealName.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMealName) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.MealName, nil
}

func (e MealName) Valid() bool {
	switch e {
	case MealNameBreakfast,
		MealNameSecondBreakfast,
		MealNameBrunch,
		MealNameLunch,
		MealNameSupper,
		MealNameDinner:
		return true
	}
	return false
}

type MealPlanStatus string

const (
	MealPlanStatusAwaitingVotes MealPlanStatus = "awaiting_votes"
	MealPlanStatusFinalized     MealPlanStatus = "finalized"
)

func (e *MealPlanStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MealPlanStatus(s)
	case string:
		*e = MealPlanStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for MealPlanStatus: %T", src)
	}
	return nil
}

type NullMealPlanStatus struct {
	MealPlanStatus MealPlanStatus
	Valid          bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMealPlanStatus) Scan(value interface{}) error {
	if value == nil {
		ns.MealPlanStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MealPlanStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMealPlanStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.MealPlanStatus, nil
}

func (e MealPlanStatus) Valid() bool {
	switch e {
	case MealPlanStatusAwaitingVotes,
		MealPlanStatusFinalized:
		return true
	}
	return false
}

type PrepStepStatus string

const (
	PrepStepStatusUnfinished PrepStepStatus = "unfinished"
	PrepStepStatusPostponed  PrepStepStatus = "postponed"
	PrepStepStatusIgnored    PrepStepStatus = "ignored"
	PrepStepStatusCanceled   PrepStepStatus = "canceled"
	PrepStepStatusFinished   PrepStepStatus = "finished"
)

func (e *PrepStepStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PrepStepStatus(s)
	case string:
		*e = PrepStepStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PrepStepStatus: %T", src)
	}
	return nil
}

type NullPrepStepStatus struct {
	PrepStepStatus PrepStepStatus
	Valid          bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPrepStepStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PrepStepStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PrepStepStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPrepStepStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.PrepStepStatus, nil
}

func (e PrepStepStatus) Valid() bool {
	switch e {
	case PrepStepStatusUnfinished,
		PrepStepStatusPostponed,
		PrepStepStatusIgnored,
		PrepStepStatusCanceled,
		PrepStepStatusFinished:
		return true
	}
	return false
}

type RecipeStepProductType string

const (
	RecipeStepProductTypeIngredient RecipeStepProductType = "ingredient"
	RecipeStepProductTypeInstrument RecipeStepProductType = "instrument"
)

func (e *RecipeStepProductType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RecipeStepProductType(s)
	case string:
		*e = RecipeStepProductType(s)
	default:
		return fmt.Errorf("unsupported scan type for RecipeStepProductType: %T", src)
	}
	return nil
}

type NullRecipeStepProductType struct {
	RecipeStepProductType RecipeStepProductType
	Valid                 bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRecipeStepProductType) Scan(value interface{}) error {
	if value == nil {
		ns.RecipeStepProductType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RecipeStepProductType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRecipeStepProductType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.RecipeStepProductType, nil
}

func (e RecipeStepProductType) Valid() bool {
	switch e {
	case RecipeStepProductTypeIngredient,
		RecipeStepProductTypeInstrument:
		return true
	}
	return false
}

type StorageContainerType string

const (
	StorageContainerTypeUncovered             StorageContainerType = "uncovered"
	StorageContainerTypeCovered               StorageContainerType = "covered"
	StorageContainerTypeOnawirerack           StorageContainerType = "on a wire rack"
	StorageContainerTypeInanairtightcontainer StorageContainerType = "in an airtight container"
)

func (e *StorageContainerType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = StorageContainerType(s)
	case string:
		*e = StorageContainerType(s)
	default:
		return fmt.Errorf("unsupported scan type for StorageContainerType: %T", src)
	}
	return nil
}

type NullStorageContainerType struct {
	StorageContainerType StorageContainerType
	Valid                bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStorageContainerType) Scan(value interface{}) error {
	if value == nil {
		ns.StorageContainerType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.StorageContainerType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStorageContainerType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.StorageContainerType, nil
}

func (e StorageContainerType) Valid() bool {
	switch e {
	case StorageContainerTypeUncovered,
		StorageContainerTypeCovered,
		StorageContainerTypeOnawirerack,
		StorageContainerTypeInanairtightcontainer:
		return true
	}
	return false
}

type TimeZone string

const (
	TimeZoneUTC        TimeZone = "UTC"
	TimeZoneUSPacific  TimeZone = "US/Pacific"
	TimeZoneUSMountain TimeZone = "US/Mountain"
	TimeZoneUSCentral  TimeZone = "US/Central"
	TimeZoneUSEastern  TimeZone = "US/Eastern"
)

func (e *TimeZone) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TimeZone(s)
	case string:
		*e = TimeZone(s)
	default:
		return fmt.Errorf("unsupported scan type for TimeZone: %T", src)
	}
	return nil
}

type NullTimeZone struct {
	TimeZone TimeZone
	Valid    bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTimeZone) Scan(value interface{}) error {
	if value == nil {
		ns.TimeZone, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TimeZone.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTimeZone) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.TimeZone, nil
}

func (e TimeZone) Valid() bool {
	switch e {
	case TimeZoneUTC,
		TimeZoneUSPacific,
		TimeZoneUSMountain,
		TimeZoneUSCentral,
		TimeZoneUSEastern:
		return true
	}
	return false
}

type WebhookEvent string

const (
	WebhookEventWebhookCreated  WebhookEvent = "webhook_created"
	WebhookEventWebhookUpdated  WebhookEvent = "webhook_updated"
	WebhookEventWebhookArchived WebhookEvent = "webhook_archived"
)

func (e *WebhookEvent) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = WebhookEvent(s)
	case string:
		*e = WebhookEvent(s)
	default:
		return fmt.Errorf("unsupported scan type for WebhookEvent: %T", src)
	}
	return nil
}

type NullWebhookEvent struct {
	WebhookEvent WebhookEvent
	Valid        bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullWebhookEvent) Scan(value interface{}) error {
	if value == nil {
		ns.WebhookEvent, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.WebhookEvent.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullWebhookEvent) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.WebhookEvent, nil
}

func (e WebhookEvent) Valid() bool {
	switch e {
	case WebhookEventWebhookCreated,
		WebhookEventWebhookUpdated,
		WebhookEventWebhookArchived:
		return true
	}
	return false
}

type ApiClients struct {
	CreatedAt        time.Time      `db:"created_at"`
	LastUpdatedAt    sql.NullTime   `db:"last_updated_at"`
	ArchivedAt       sql.NullTime   `db:"archived_at"`
	BelongsToUser    string         `db:"belongs_to_user"`
	ID               string         `db:"id"`
	ClientID         string         `db:"client_id"`
	Name             sql.NullString `db:"name"`
	SecretKey        []byte         `db:"secret_key"`
	Permissions      int64          `db:"permissions"`
	AdminPermissions int64          `db:"admin_permissions"`
}

type HouseholdInvitations struct {
	CreatedAt            time.Time       `db:"created_at"`
	LastUpdatedAt        sql.NullTime    `db:"last_updated_at"`
	ArchivedAt           sql.NullTime    `db:"archived_at"`
	ID                   string          `db:"id"`
	DestinationHousehold string          `db:"destination_household"`
	ToEmail              string          `db:"to_email"`
	Note                 string          `db:"note"`
	StatusNote           string          `db:"status_note"`
	Token                string          `db:"token"`
	FromUser             string          `db:"from_user"`
	Status               InvitationState `db:"status"`
	ToUser               sql.NullString  `db:"to_user"`
}

type HouseholdUserMemberships struct {
	CreatedAt          time.Time    `db:"created_at"`
	LastUpdatedAt      sql.NullTime `db:"last_updated_at"`
	ArchivedAt         sql.NullTime `db:"archived_at"`
	BelongsToUser      string       `db:"belongs_to_user"`
	HouseholdRoles     string       `db:"household_roles"`
	ID                 string       `db:"id"`
	BelongsToHousehold string       `db:"belongs_to_household"`
	DefaultHousehold   bool         `db:"default_household"`
}

type Households struct {
	CreatedAt                  time.Time      `db:"created_at"`
	LastUpdatedAt              sql.NullTime   `db:"last_updated_at"`
	ArchivedAt                 sql.NullTime   `db:"archived_at"`
	ID                         string         `db:"id"`
	ContactPhone               string         `db:"contact_phone"`
	PaymentProcessorCustomerID string         `db:"payment_processor_customer_id"`
	Name                       string         `db:"name"`
	BillingStatus              string         `db:"billing_status"`
	ContactEmail               string         `db:"contact_email"`
	BelongsToUser              string         `db:"belongs_to_user"`
	TimeZone                   TimeZone       `db:"time_zone"`
	SubscriptionPlanID         sql.NullString `db:"subscription_plan_id"`
}

type MealPlanEvents struct {
	ID                string       `db:"id"`
	Notes             string       `db:"notes"`
	StartsAt          time.Time    `db:"starts_at"`
	EndsAt            time.Time    `db:"ends_at"`
	MealName          MealName     `db:"meal_name"`
	BelongsToMealPlan string       `db:"belongs_to_meal_plan"`
	CreatedAt         time.Time    `db:"created_at"`
	LastUpdatedAt     sql.NullTime `db:"last_updated_at"`
	ArchivedAt        sql.NullTime `db:"archived_at"`
}

type MealPlanGroceryListItems struct {
	CreatedAt                time.Time             `db:"created_at"`
	CompletedAt              sql.NullTime          `db:"completed_at"`
	LastUpdatedAt            sql.NullTime          `db:"last_updated_at"`
	BelongsToMealPlan        string                `db:"belongs_to_meal_plan"`
	MaximumQuantityNeeded    string                `db:"maximum_quantity_needed"`
	MinimumQuantityNeeded    string                `db:"minimum_quantity_needed"`
	ValidMeasurementUnit     string                `db:"valid_measurement_unit"`
	ID                       string                `db:"id"`
	ValidIngredient          string                `db:"valid_ingredient"`
	StatusExplanation        string                `db:"status_explanation"`
	Status                   GroceryListItemStatus `db:"status"`
	PurchasePrice            sql.NullString        `db:"purchase_price"`
	PurchasedMeasurementUnit sql.NullString        `db:"purchased_measurement_unit"`
	QuantityPurchased        sql.NullString        `db:"quantity_purchased"`
	PurchasedUpc             sql.NullString        `db:"purchased_upc"`
}

type MealPlanOptionVotes struct {
	CreatedAt               time.Time    `db:"created_at"`
	LastUpdatedAt           sql.NullTime `db:"last_updated_at"`
	ArchivedAt              sql.NullTime `db:"archived_at"`
	BelongsToMealPlanOption string       `db:"belongs_to_meal_plan_option"`
	Notes                   string       `db:"notes"`
	ByUser                  string       `db:"by_user"`
	ID                      string       `db:"id"`
	Rank                    int32        `db:"rank"`
	Abstain                 bool         `db:"abstain"`
}

type MealPlanOptions struct {
	CreatedAt              time.Time      `db:"created_at"`
	LastUpdatedAt          sql.NullTime   `db:"last_updated_at"`
	ArchivedAt             sql.NullTime   `db:"archived_at"`
	Notes                  string         `db:"notes"`
	ID                     string         `db:"id"`
	MealID                 string         `db:"meal_id"`
	AssignedDishwasher     sql.NullString `db:"assigned_dishwasher"`
	BelongsToMealPlanEvent sql.NullString `db:"belongs_to_meal_plan_event"`
	AssignedCook           sql.NullString `db:"assigned_cook"`
	Chosen                 bool           `db:"chosen"`
	Tiebroken              bool           `db:"tiebroken"`
}

type MealPlanTasks struct {
	CreatedAt               time.Time      `db:"created_at"`
	LastUpdatedAt           sql.NullTime   `db:"last_updated_at"`
	CompletedAt             sql.NullTime   `db:"completed_at"`
	BelongsToRecipePrepTask string         `db:"belongs_to_recipe_prep_task"`
	StatusExplanation       string         `db:"status_explanation"`
	Status                  PrepStepStatus `db:"status"`
	ID                      string         `db:"id"`
	BelongsToMealPlanOption string         `db:"belongs_to_meal_plan_option"`
	CreationExplanation     string         `db:"creation_explanation"`
	AssignedToUser          sql.NullString `db:"assigned_to_user"`
}

type MealPlans struct {
	ID                     string         `db:"id"`
	Notes                  string         `db:"notes"`
	Status                 MealPlanStatus `db:"status"`
	VotingDeadline         time.Time      `db:"voting_deadline"`
	CreatedAt              time.Time      `db:"created_at"`
	LastUpdatedAt          sql.NullTime   `db:"last_updated_at"`
	ArchivedAt             sql.NullTime   `db:"archived_at"`
	BelongsToHousehold     string         `db:"belongs_to_household"`
	GroceryListInitialized bool           `db:"grocery_list_initialized"`
	TasksCreated           bool           `db:"tasks_created"`
}

type MealRecipes struct {
	ID            string       `db:"id"`
	MealID        string       `db:"meal_id"`
	RecipeID      string       `db:"recipe_id"`
	CreatedAt     time.Time    `db:"created_at"`
	LastUpdatedAt sql.NullTime `db:"last_updated_at"`
	ArchivedAt    sql.NullTime `db:"archived_at"`
}

type Meals struct {
	ID            string       `db:"id"`
	Name          string       `db:"name"`
	Description   string       `db:"description"`
	CreatedAt     time.Time    `db:"created_at"`
	LastUpdatedAt sql.NullTime `db:"last_updated_at"`
	ArchivedAt    sql.NullTime `db:"archived_at"`
	CreatedByUser string       `db:"created_by_user"`
}

type PasswordResetTokens struct {
	ID            string       `db:"id"`
	Token         string       `db:"token"`
	ExpiresAt     time.Time    `db:"expires_at"`
	CreatedAt     time.Time    `db:"created_at"`
	LastUpdatedAt sql.NullTime `db:"last_updated_at"`
	RedeemedAt    sql.NullTime `db:"redeemed_at"`
	BelongsToUser string       `db:"belongs_to_user"`
}

type RecipeMedia struct {
	CreatedAt           time.Time      `db:"created_at"`
	LastUpdatedAt       sql.NullTime   `db:"last_updated_at"`
	ArchivedAt          sql.NullTime   `db:"archived_at"`
	MimeType            string         `db:"mime_type"`
	InternalPath        string         `db:"internal_path"`
	ExternalPath        string         `db:"external_path"`
	ID                  string         `db:"id"`
	BelongsToRecipe     sql.NullString `db:"belongs_to_recipe"`
	BelongsToRecipeStep sql.NullString `db:"belongs_to_recipe_step"`
	Index               int32          `db:"index"`
}

type RecipePrepTaskSteps struct {
	ID                      string `db:"id"`
	BelongsToRecipeStep     string `db:"belongs_to_recipe_step"`
	BelongsToRecipePrepTask string `db:"belongs_to_recipe_prep_task"`
	SatisfiesRecipeStep     bool   `db:"satisfies_recipe_step"`
}

type RecipePrepTasks struct {
	CreatedAt                              time.Time                `db:"created_at"`
	LastUpdatedAt                          sql.NullTime             `db:"last_updated_at"`
	ArchivedAt                             sql.NullTime             `db:"archived_at"`
	ID                                     string                   `db:"id"`
	Notes                                  string                   `db:"notes"`
	ExplicitStorageInstructions            string                   `db:"explicit_storage_instructions"`
	BelongsToRecipe                        string                   `db:"belongs_to_recipe"`
	MinimumStorageTemperatureInCelsius     sql.NullString           `db:"minimum_storage_temperature_in_celsius"`
	MaximumStorageTemperatureInCelsius     sql.NullString           `db:"maximum_storage_temperature_in_celsius"`
	StorageType                            NullStorageContainerType `db:"storage_type"`
	MaximumTimeBufferBeforeRecipeInSeconds sql.NullInt32            `db:"maximum_time_buffer_before_recipe_in_seconds"`
	MinimumTimeBufferBeforeRecipeInSeconds int32                    `db:"minimum_time_buffer_before_recipe_in_seconds"`
}

type RecipeStepIngredients struct {
	CreatedAt            time.Time      `db:"created_at"`
	LastUpdatedAt        sql.NullTime   `db:"last_updated_at"`
	ArchivedAt           sql.NullTime   `db:"archived_at"`
	QuantityNotes        string         `db:"quantity_notes"`
	Name                 string         `db:"name"`
	IngredientNotes      string         `db:"ingredient_notes"`
	BelongsToRecipeStep  string         `db:"belongs_to_recipe_step"`
	MaximumQuantityValue string         `db:"maximum_quantity_value"`
	MinimumQuantityValue string         `db:"minimum_quantity_value"`
	ID                   string         `db:"id"`
	RecipeStepProductID  sql.NullString `db:"recipe_step_product_id"`
	IngredientID         sql.NullString `db:"ingredient_id"`
	MeasurementUnit      sql.NullString `db:"measurement_unit"`
	ProductOfRecipeStep  bool           `db:"product_of_recipe_step"`
	Optional             bool           `db:"optional"`
}

type RecipeStepInstruments struct {
	CreatedAt           time.Time      `db:"created_at"`
	LastUpdatedAt       sql.NullTime   `db:"last_updated_at"`
	ArchivedAt          sql.NullTime   `db:"archived_at"`
	Name                string         `db:"name"`
	ID                  string         `db:"id"`
	Notes               string         `db:"notes"`
	BelongsToRecipeStep string         `db:"belongs_to_recipe_step"`
	InstrumentID        sql.NullString `db:"instrument_id"`
	RecipeStepProductID sql.NullString `db:"recipe_step_product_id"`
	PreferenceRank      int32          `db:"preference_rank"`
	MinimumQuantity     int32          `db:"minimum_quantity"`
	MaximumQuantity     int32          `db:"maximum_quantity"`
	Optional            bool           `db:"optional"`
	ProductOfRecipeStep bool           `db:"product_of_recipe_step"`
}

type RecipeStepProducts struct {
	CreatedAt                          time.Time             `db:"created_at"`
	LastUpdatedAt                      sql.NullTime          `db:"last_updated_at"`
	ArchivedAt                         sql.NullTime          `db:"archived_at"`
	Type                               RecipeStepProductType `db:"type"`
	Name                               string                `db:"name"`
	BelongsToRecipeStep                string                `db:"belongs_to_recipe_step"`
	QuantityNotes                      string                `db:"quantity_notes"`
	MinimumQuantityValue               string                `db:"minimum_quantity_value"`
	MaximumQuantityValue               string                `db:"maximum_quantity_value"`
	ID                                 string                `db:"id"`
	StorageInstructions                string                `db:"storage_instructions"`
	MeasurementUnit                    sql.NullString        `db:"measurement_unit"`
	MinimumStorageTemperatureInCelsius sql.NullString        `db:"minimum_storage_temperature_in_celsius"`
	MaximumStorageTemperatureInCelsius sql.NullString        `db:"maximum_storage_temperature_in_celsius"`
	MaximumStorageDurationInSeconds    sql.NullInt32         `db:"maximum_storage_duration_in_seconds"`
	Compostable                        bool                  `db:"compostable"`
}

type RecipeSteps struct {
	CreatedAt                     time.Time      `db:"created_at"`
	ArchivedAt                    sql.NullTime   `db:"archived_at"`
	LastUpdatedAt                 sql.NullTime   `db:"last_updated_at"`
	Notes                         string         `db:"notes"`
	BelongsToRecipe               string         `db:"belongs_to_recipe"`
	PreparationID                 string         `db:"preparation_id"`
	ID                            string         `db:"id"`
	ExplicitInstructions          string         `db:"explicit_instructions"`
	MaximumTemperatureInCelsius   sql.NullString `db:"maximum_temperature_in_celsius"`
	MinimumTemperatureInCelsius   sql.NullString `db:"minimum_temperature_in_celsius"`
	MaximumEstimatedTimeInSeconds sql.NullInt64  `db:"maximum_estimated_time_in_seconds"`
	MinimumEstimatedTimeInSeconds sql.NullInt64  `db:"minimum_estimated_time_in_seconds"`
	Index                         int32          `db:"index"`
	Optional                      bool           `db:"optional"`
}

type Recipes struct {
	CreatedAt          time.Time      `db:"created_at"`
	LastUpdatedAt      sql.NullTime   `db:"last_updated_at"`
	ArchivedAt         sql.NullTime   `db:"archived_at"`
	Source             string         `db:"source"`
	Description        string         `db:"description"`
	ID                 string         `db:"id"`
	Name               string         `db:"name"`
	CreatedByUser      string         `db:"created_by_user"`
	InspiredByRecipeID sql.NullString `db:"inspired_by_recipe_id"`
	YieldsPortions     int32          `db:"yields_portions"`
	SealOfApproval     bool           `db:"seal_of_approval"`
}

type Sessions struct {
	Expiry    time.Time `db:"expiry"`
	Token     string    `db:"token"`
	Data      []byte    `db:"data"`
	CreatedOn int64     `db:"created_on"`
}

type Users struct {
	CreatedAt                    time.Time      `db:"created_at"`
	PasswordLastChangedAt        sql.NullTime   `db:"password_last_changed_at"`
	ArchivedAt                   sql.NullTime   `db:"archived_at"`
	TwoFactorSecretVerifiedAt    sql.NullTime   `db:"two_factor_secret_verified_at"`
	LastUpdatedAt                sql.NullTime   `db:"last_updated_at"`
	ID                           string         `db:"id"`
	HashedPassword               string         `db:"hashed_password"`
	TwoFactorSecret              string         `db:"two_factor_secret"`
	EmailAddress                 string         `db:"email_address"`
	ServiceRoles                 string         `db:"service_roles"`
	UserAccountStatus            string         `db:"user_account_status"`
	UserAccountStatusExplanation string         `db:"user_account_status_explanation"`
	Username                     string         `db:"username"`
	AvatarSrc                    sql.NullString `db:"avatar_src"`
	BirthDay                     sql.NullInt16  `db:"birth_day"`
	BirthMonth                   sql.NullInt16  `db:"birth_month"`
	RequiresPasswordChange       bool           `db:"requires_password_change"`
}

type ValidIngredientMeasurementUnits struct {
	ID                       string       `db:"id"`
	Notes                    string       `db:"notes"`
	ValidIngredientID        string       `db:"valid_ingredient_id"`
	ValidMeasurementUnitID   string       `db:"valid_measurement_unit_id"`
	CreatedAt                time.Time    `db:"created_at"`
	LastUpdatedAt            sql.NullTime `db:"last_updated_at"`
	ArchivedAt               sql.NullTime `db:"archived_at"`
	MinimumAllowableQuantity string       `db:"minimum_allowable_quantity"`
	MaximumAllowableQuantity string       `db:"maximum_allowable_quantity"`
}

type ValidIngredientPreparations struct {
	ID                 string       `db:"id"`
	Notes              string       `db:"notes"`
	ValidPreparationID string       `db:"valid_preparation_id"`
	ValidIngredientID  string       `db:"valid_ingredient_id"`
	CreatedAt          time.Time    `db:"created_at"`
	LastUpdatedAt      sql.NullTime `db:"last_updated_at"`
	ArchivedAt         sql.NullTime `db:"archived_at"`
}

type ValidIngredients struct {
	CreatedAt                               time.Time      `db:"created_at"`
	LastUpdatedAt                           sql.NullTime   `db:"last_updated_at"`
	ArchivedAt                              sql.NullTime   `db:"archived_at"`
	Description                             string         `db:"description"`
	Warning                                 string         `db:"warning"`
	PluralName                              string         `db:"plural_name"`
	ID                                      string         `db:"id"`
	Name                                    string         `db:"name"`
	IconPath                                string         `db:"icon_path"`
	StorageInstructions                     string         `db:"storage_instructions"`
	MaximumIdealStorageTemperatureInCelsius sql.NullString `db:"maximum_ideal_storage_temperature_in_celsius"`
	MinimumIdealStorageTemperatureInCelsius sql.NullString `db:"minimum_ideal_storage_temperature_in_celsius"`
	IsLiquid                                sql.NullBool   `db:"is_liquid"`
	ContainsShellfish                       bool           `db:"contains_shellfish"`
	AnimalFlesh                             bool           `db:"animal_flesh"`
	Volumetric                              bool           `db:"volumetric"`
	ContainsSoy                             bool           `db:"contains_soy"`
	ContainsTreeNut                         bool           `db:"contains_tree_nut"`
	ContainsPeanut                          bool           `db:"contains_peanut"`
	ContainsDairy                           bool           `db:"contains_dairy"`
	ContainsWheat                           bool           `db:"contains_wheat"`
	AnimalDerived                           bool           `db:"animal_derived"`
	ContainsEgg                             bool           `db:"contains_egg"`
	RestrictToPreparations                  bool           `db:"restrict_to_preparations"`
	ContainsFish                            bool           `db:"contains_fish"`
	ContainsSesame                          bool           `db:"contains_sesame"`
	ContainsGluten                          bool           `db:"contains_gluten"`
}

type ValidInstruments struct {
	ID               string       `db:"id"`
	Name             string       `db:"name"`
	Description      string       `db:"description"`
	IconPath         string       `db:"icon_path"`
	CreatedAt        time.Time    `db:"created_at"`
	LastUpdatedAt    sql.NullTime `db:"last_updated_at"`
	ArchivedAt       sql.NullTime `db:"archived_at"`
	PluralName       string       `db:"plural_name"`
	UsableForStorage bool         `db:"usable_for_storage"`
}

type ValidMeasurementConversions struct {
	CreatedAt         time.Time      `db:"created_at"`
	LastUpdatedAt     sql.NullTime   `db:"last_updated_at"`
	ArchivedAt        sql.NullTime   `db:"archived_at"`
	Modifier          string         `db:"modifier"`
	Notes             string         `db:"notes"`
	ID                string         `db:"id"`
	FromUnit          string         `db:"from_unit"`
	ToUnit            string         `db:"to_unit"`
	OnlyForIngredient sql.NullString `db:"only_for_ingredient"`
}

type ValidMeasurementUnits struct {
	CreatedAt     time.Time    `db:"created_at"`
	LastUpdatedAt sql.NullTime `db:"last_updated_at"`
	ArchivedAt    sql.NullTime `db:"archived_at"`
	Description   string       `db:"description"`
	IconPath      string       `db:"icon_path"`
	ID            string       `db:"id"`
	Name          string       `db:"name"`
	PluralName    string       `db:"plural_name"`
	Volumetric    sql.NullBool `db:"volumetric"`
	Universal     bool         `db:"universal"`
	Metric        bool         `db:"metric"`
	Imperial      bool         `db:"imperial"`
}

type ValidPreparationInstruments struct {
	ID                 string       `db:"id"`
	Notes              string       `db:"notes"`
	ValidPreparationID string       `db:"valid_preparation_id"`
	ValidInstrumentID  string       `db:"valid_instrument_id"`
	CreatedAt          time.Time    `db:"created_at"`
	LastUpdatedAt      sql.NullTime `db:"last_updated_at"`
	ArchivedAt         sql.NullTime `db:"archived_at"`
}

type ValidPreparations struct {
	CreatedAt                time.Time    `db:"created_at"`
	ArchivedAt               sql.NullTime `db:"archived_at"`
	LastUpdatedAt            sql.NullTime `db:"last_updated_at"`
	Name                     string       `db:"name"`
	Description              string       `db:"description"`
	IconPath                 string       `db:"icon_path"`
	ID                       string       `db:"id"`
	PastTense                string       `db:"past_tense"`
	YieldsNothing            bool         `db:"yields_nothing"`
	RestrictToIngredients    bool         `db:"restrict_to_ingredients"`
	ZeroIngredientsAllowable bool         `db:"zero_ingredients_allowable"`
}

type WebhookTriggerEvents struct {
	ID               string       `db:"id"`
	TriggerEvent     WebhookEvent `db:"trigger_event"`
	BelongsToWebhook string       `db:"belongs_to_webhook"`
	CreatedAt        time.Time    `db:"created_at"`
	ArchivedAt       sql.NullTime `db:"archived_at"`
}

type Webhooks struct {
	ID                 string       `db:"id"`
	Name               string       `db:"name"`
	ContentType        string       `db:"content_type"`
	Url                string       `db:"url"`
	Method             string       `db:"method"`
	CreatedAt          time.Time    `db:"created_at"`
	LastUpdatedAt      sql.NullTime `db:"last_updated_at"`
	ArchivedAt         sql.NullTime `db:"archived_at"`
	BelongsToHousehold string       `db:"belongs_to_household"`
}
