// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: household_invitations.sql

package generated

import (
	"context"
	"database/sql"
)

const AttachInvitationsToUserID = `-- name: AttachInvitationsToUserID :exec
UPDATE household_invitations SET
	to_user = $1,
	last_updated_on = extract(epoch FROM NOW())
WHERE archived_on IS NULL
AND to_email = LOWER($2)
`

type AttachInvitationsToUserIDParams struct {
	ToUser sql.NullString
	Lower  string
}

func (q *Queries) AttachInvitationsToUserID(ctx context.Context, arg *AttachInvitationsToUserIDParams) error {
	_, err := q.db.ExecContext(ctx, AttachInvitationsToUserID, arg.ToUser, arg.Lower)
	return err
}

const CreateHouseholdInvitation = `-- name: CreateHouseholdInvitation :exec
INSERT INTO household_invitations (id,from_user,to_user,note,to_email,token,destination_household) VALUES ($1,$2,$3,$4,$5,$6,$7)
`

type CreateHouseholdInvitationParams struct {
	ID                   string
	FromUser             string
	ToUser               sql.NullString
	Note                 string
	ToEmail              string
	Token                string
	DestinationHousehold string
}

func (q *Queries) CreateHouseholdInvitation(ctx context.Context, arg *CreateHouseholdInvitationParams) error {
	_, err := q.db.ExecContext(ctx, CreateHouseholdInvitation,
		arg.ID,
		arg.FromUser,
		arg.ToUser,
		arg.Note,
		arg.ToEmail,
		arg.Token,
		arg.DestinationHousehold,
	)
	return err
}

const GetAllHouseholdInvitationsCount = `-- name: GetAllHouseholdInvitationsCount :one
SELECT COUNT(household_invitations.id) FROM household_invitations WHERE household_invitations.archived_on IS NULL
`

func (q *Queries) GetAllHouseholdInvitationsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, GetAllHouseholdInvitationsCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const GetHouseholdInvitationByEmailAndToken = `-- name: GetHouseholdInvitationByEmailAndToken :one
SELECT
	household_invitations.id,
	households.id,
	households.name,
	households.billing_status,
	households.contact_email,
	households.contact_phone,
	households.payment_processor_customer_id,
	households.subscription_plan_id,
	households.created_on,
	households.last_updated_on,
	households.archived_on,
	households.belongs_to_user,
	household_invitations.to_email,
	household_invitations.to_user,
	users.id,
	users.username,
	users.email_address,
	users.avatar_src,
	users.hashed_password,
	users.requires_password_change,
	users.password_last_changed_on,
	users.two_factor_secret,
	users.two_factor_secret_verified_on,
	users.service_roles,
	users.user_account_status,
	users.user_account_status_explanation,
	users.birth_day,
	users.birth_month,
	users.created_on,
	users.last_updated_on,
	users.archived_on,
	household_invitations.status,
	household_invitations.note,
	household_invitations.status_note,
	household_invitations.token,
	household_invitations.created_on,
	household_invitations.last_updated_on,
	household_invitations.archived_on
FROM household_invitations
JOIN households ON household_invitations.destination_household = households.id
JOIN users ON household_invitations.from_user = users.id
WHERE household_invitations.archived_on IS NULL
AND household_invitations.to_email = LOWER($1)
AND household_invitations.token = $2
`

type GetHouseholdInvitationByEmailAndTokenParams struct {
	Lower string
	Token string
}

type GetHouseholdInvitationByEmailAndTokenRow struct {
	ID                           string
	ID_2                         string
	Name                         string
	BillingStatus                string
	ContactEmail                 string
	ContactPhone                 string
	PaymentProcessorCustomerID   string
	SubscriptionPlanID           sql.NullString
	CreatedOn                    int64
	LastUpdatedOn                sql.NullInt64
	ArchivedOn                   sql.NullInt64
	BelongsToUser                string
	ToEmail                      string
	ToUser                       sql.NullString
	ID_3                         string
	Username                     string
	EmailAddress                 string
	AvatarSrc                    sql.NullString
	HashedPassword               string
	RequiresPasswordChange       bool
	PasswordLastChangedOn        sql.NullInt32
	TwoFactorSecret              string
	TwoFactorSecretVerifiedOn    sql.NullInt64
	ServiceRoles                 string
	UserAccountStatus            string
	UserAccountStatusExplanation string
	BirthDay                     sql.NullInt16
	BirthMonth                   sql.NullInt16
	CreatedOn_2                  int64
	LastUpdatedOn_2              sql.NullInt64
	ArchivedOn_2                 sql.NullInt64
	Status                       InvitationState
	Note                         string
	StatusNote                   string
	Token                        string
	CreatedOn_3                  int64
	LastUpdatedOn_3              sql.NullInt64
	ArchivedOn_3                 sql.NullInt64
}

func (q *Queries) GetHouseholdInvitationByEmailAndToken(ctx context.Context, arg *GetHouseholdInvitationByEmailAndTokenParams) (*GetHouseholdInvitationByEmailAndTokenRow, error) {
	row := q.db.QueryRowContext(ctx, GetHouseholdInvitationByEmailAndToken, arg.Lower, arg.Token)
	var i GetHouseholdInvitationByEmailAndTokenRow
	err := row.Scan(
		&i.ID,
		&i.ID_2,
		&i.Name,
		&i.BillingStatus,
		&i.ContactEmail,
		&i.ContactPhone,
		&i.PaymentProcessorCustomerID,
		&i.SubscriptionPlanID,
		&i.CreatedOn,
		&i.LastUpdatedOn,
		&i.ArchivedOn,
		&i.BelongsToUser,
		&i.ToEmail,
		&i.ToUser,
		&i.ID_3,
		&i.Username,
		&i.EmailAddress,
		&i.AvatarSrc,
		&i.HashedPassword,
		&i.RequiresPasswordChange,
		&i.PasswordLastChangedOn,
		&i.TwoFactorSecret,
		&i.TwoFactorSecretVerifiedOn,
		&i.ServiceRoles,
		&i.UserAccountStatus,
		&i.UserAccountStatusExplanation,
		&i.BirthDay,
		&i.BirthMonth,
		&i.CreatedOn_2,
		&i.LastUpdatedOn_2,
		&i.ArchivedOn_2,
		&i.Status,
		&i.Note,
		&i.StatusNote,
		&i.Token,
		&i.CreatedOn_3,
		&i.LastUpdatedOn_3,
		&i.ArchivedOn_3,
	)
	return &i, err
}

const GetHouseholdInvitationByHouseholdAndID = `-- name: GetHouseholdInvitationByHouseholdAndID :many
SELECT
	household_invitations.id,
	households.id,
	households.name,
	households.billing_status,
	households.contact_email,
	households.contact_phone,
	households.payment_processor_customer_id,
	households.subscription_plan_id,
	households.created_on,
	households.last_updated_on,
	households.archived_on,
	households.belongs_to_user,
	household_invitations.to_email,
	household_invitations.to_user,
	users.id,
	users.username,
	users.email_address,
	users.avatar_src,
	users.hashed_password,
	users.requires_password_change,
	users.password_last_changed_on,
	users.two_factor_secret,
	users.two_factor_secret_verified_on,
	users.service_roles,
	users.user_account_status,
	users.user_account_status_explanation,
	users.birth_day,
	users.birth_month,
	users.created_on,
	users.last_updated_on,
	users.archived_on,
	household_invitations.status,
	household_invitations.note,
	household_invitations.status_note,
	household_invitations.token,
	household_invitations.created_on,
	household_invitations.last_updated_on,
	household_invitations.archived_on
FROM household_invitations
JOIN households ON household_invitations.destination_household = households.id
JOIN users ON household_invitations.from_user = users.id
WHERE household_invitations.archived_on IS NULL
AND household_invitations.destination_household = $1
AND household_invitations.id = $2
`

type GetHouseholdInvitationByHouseholdAndIDParams struct {
	DestinationHousehold string
	ID                   string
}

type GetHouseholdInvitationByHouseholdAndIDRow struct {
	ID                           string
	ID_2                         string
	Name                         string
	BillingStatus                string
	ContactEmail                 string
	ContactPhone                 string
	PaymentProcessorCustomerID   string
	SubscriptionPlanID           sql.NullString
	CreatedOn                    int64
	LastUpdatedOn                sql.NullInt64
	ArchivedOn                   sql.NullInt64
	BelongsToUser                string
	ToEmail                      string
	ToUser                       sql.NullString
	ID_3                         string
	Username                     string
	EmailAddress                 string
	AvatarSrc                    sql.NullString
	HashedPassword               string
	RequiresPasswordChange       bool
	PasswordLastChangedOn        sql.NullInt32
	TwoFactorSecret              string
	TwoFactorSecretVerifiedOn    sql.NullInt64
	ServiceRoles                 string
	UserAccountStatus            string
	UserAccountStatusExplanation string
	BirthDay                     sql.NullInt16
	BirthMonth                   sql.NullInt16
	CreatedOn_2                  int64
	LastUpdatedOn_2              sql.NullInt64
	ArchivedOn_2                 sql.NullInt64
	Status                       InvitationState
	Note                         string
	StatusNote                   string
	Token                        string
	CreatedOn_3                  int64
	LastUpdatedOn_3              sql.NullInt64
	ArchivedOn_3                 sql.NullInt64
}

func (q *Queries) GetHouseholdInvitationByHouseholdAndID(ctx context.Context, arg *GetHouseholdInvitationByHouseholdAndIDParams) ([]*GetHouseholdInvitationByHouseholdAndIDRow, error) {
	rows, err := q.db.QueryContext(ctx, GetHouseholdInvitationByHouseholdAndID, arg.DestinationHousehold, arg.ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetHouseholdInvitationByHouseholdAndIDRow
	for rows.Next() {
		var i GetHouseholdInvitationByHouseholdAndIDRow
		if err := rows.Scan(
			&i.ID,
			&i.ID_2,
			&i.Name,
			&i.BillingStatus,
			&i.ContactEmail,
			&i.ContactPhone,
			&i.PaymentProcessorCustomerID,
			&i.SubscriptionPlanID,
			&i.CreatedOn,
			&i.LastUpdatedOn,
			&i.ArchivedOn,
			&i.BelongsToUser,
			&i.ToEmail,
			&i.ToUser,
			&i.ID_3,
			&i.Username,
			&i.EmailAddress,
			&i.AvatarSrc,
			&i.HashedPassword,
			&i.RequiresPasswordChange,
			&i.PasswordLastChangedOn,
			&i.TwoFactorSecret,
			&i.TwoFactorSecretVerifiedOn,
			&i.ServiceRoles,
			&i.UserAccountStatus,
			&i.UserAccountStatusExplanation,
			&i.BirthDay,
			&i.BirthMonth,
			&i.CreatedOn_2,
			&i.LastUpdatedOn_2,
			&i.ArchivedOn_2,
			&i.Status,
			&i.Note,
			&i.StatusNote,
			&i.Token,
			&i.CreatedOn_3,
			&i.LastUpdatedOn_3,
			&i.ArchivedOn_3,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetHouseholdInvitationByTokenAndID = `-- name: GetHouseholdInvitationByTokenAndID :one
SELECT
	household_invitations.id,
	households.id,
	households.name,
	households.billing_status,
	households.contact_email,
	households.contact_phone,
	households.payment_processor_customer_id,
	households.subscription_plan_id,
	households.created_on,
	households.last_updated_on,
	households.archived_on,
	households.belongs_to_user,
	household_invitations.to_email,
	household_invitations.to_user,
	users.id,
	users.username,
	users.email_address,
	users.avatar_src,
	users.hashed_password,
	users.requires_password_change,
	users.password_last_changed_on,
	users.two_factor_secret,
	users.two_factor_secret_verified_on,
	users.service_roles,
	users.user_account_status,
	users.user_account_status_explanation,
	users.birth_day,
	users.birth_month,
	users.created_on,
	users.last_updated_on,
	users.archived_on,
	household_invitations.status,
	household_invitations.note,
	household_invitations.status_note,
	household_invitations.token,
	household_invitations.created_on,
	household_invitations.last_updated_on,
	household_invitations.archived_on
FROM household_invitations
JOIN households ON household_invitations.destination_household = households.id
JOIN users ON household_invitations.from_user = users.id
WHERE household_invitations.archived_on IS NULL
AND household_invitations.token = $1
AND household_invitations.id = $2
`

type GetHouseholdInvitationByTokenAndIDParams struct {
	Token string
	ID    string
}

type GetHouseholdInvitationByTokenAndIDRow struct {
	ID                           string
	ID_2                         string
	Name                         string
	BillingStatus                string
	ContactEmail                 string
	ContactPhone                 string
	PaymentProcessorCustomerID   string
	SubscriptionPlanID           sql.NullString
	CreatedOn                    int64
	LastUpdatedOn                sql.NullInt64
	ArchivedOn                   sql.NullInt64
	BelongsToUser                string
	ToEmail                      string
	ToUser                       sql.NullString
	ID_3                         string
	Username                     string
	EmailAddress                 string
	AvatarSrc                    sql.NullString
	HashedPassword               string
	RequiresPasswordChange       bool
	PasswordLastChangedOn        sql.NullInt32
	TwoFactorSecret              string
	TwoFactorSecretVerifiedOn    sql.NullInt64
	ServiceRoles                 string
	UserAccountStatus            string
	UserAccountStatusExplanation string
	BirthDay                     sql.NullInt16
	BirthMonth                   sql.NullInt16
	CreatedOn_2                  int64
	LastUpdatedOn_2              sql.NullInt64
	ArchivedOn_2                 sql.NullInt64
	Status                       InvitationState
	Note                         string
	StatusNote                   string
	Token                        string
	CreatedOn_3                  int64
	LastUpdatedOn_3              sql.NullInt64
	ArchivedOn_3                 sql.NullInt64
}

func (q *Queries) GetHouseholdInvitationByTokenAndID(ctx context.Context, arg *GetHouseholdInvitationByTokenAndIDParams) (*GetHouseholdInvitationByTokenAndIDRow, error) {
	row := q.db.QueryRowContext(ctx, GetHouseholdInvitationByTokenAndID, arg.Token, arg.ID)
	var i GetHouseholdInvitationByTokenAndIDRow
	err := row.Scan(
		&i.ID,
		&i.ID_2,
		&i.Name,
		&i.BillingStatus,
		&i.ContactEmail,
		&i.ContactPhone,
		&i.PaymentProcessorCustomerID,
		&i.SubscriptionPlanID,
		&i.CreatedOn,
		&i.LastUpdatedOn,
		&i.ArchivedOn,
		&i.BelongsToUser,
		&i.ToEmail,
		&i.ToUser,
		&i.ID_3,
		&i.Username,
		&i.EmailAddress,
		&i.AvatarSrc,
		&i.HashedPassword,
		&i.RequiresPasswordChange,
		&i.PasswordLastChangedOn,
		&i.TwoFactorSecret,
		&i.TwoFactorSecretVerifiedOn,
		&i.ServiceRoles,
		&i.UserAccountStatus,
		&i.UserAccountStatusExplanation,
		&i.BirthDay,
		&i.BirthMonth,
		&i.CreatedOn_2,
		&i.LastUpdatedOn_2,
		&i.ArchivedOn_2,
		&i.Status,
		&i.Note,
		&i.StatusNote,
		&i.Token,
		&i.CreatedOn_3,
		&i.LastUpdatedOn_3,
		&i.ArchivedOn_3,
	)
	return &i, err
}

const HouseholdInvitationExists = `-- name: HouseholdInvitationExists :one
SELECT EXISTS ( SELECT household_invitations.id FROM household_invitations WHERE household_invitations.archived_on IS NULL AND household_invitations.id = $1 )
`

func (q *Queries) HouseholdInvitationExists(ctx context.Context, id string) (bool, error) {
	row := q.db.QueryRowContext(ctx, HouseholdInvitationExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const SetInvitationStatus = `-- name: SetInvitationStatus :exec
UPDATE household_invitations SET
	status = $1,
	status_note = $2,
	last_updated_on = extract(epoch FROM NOW()),
	archived_on = extract(epoch FROM NOW())
WHERE archived_on IS NULL
AND id = $3
`

type SetInvitationStatusParams struct {
	Status     InvitationState
	StatusNote string
	ID         string
}

func (q *Queries) SetInvitationStatus(ctx context.Context, arg *SetInvitationStatusParams) error {
	_, err := q.db.ExecContext(ctx, SetInvitationStatus, arg.Status, arg.StatusNote, arg.ID)
	return err
}
