// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: recipes_get_by_id_and_author_id.sql

package generated

import (
	"context"
	"database/sql"
)

const GetRecipeByIDAndAuthor = `-- name: GetRecipeByIDAndAuthor :many
SELECT
	recipes.id,
	recipes.name,
	recipes.source,
	recipes.description,
	recipes.inspired_by_recipe_id,
	recipes.yields_portions,
	recipes.seal_of_approval,
	recipes.created_at,
	recipes.last_updated_at,
	recipes.archived_at,
	recipes.created_by_user,
	recipe_steps.id,
	recipe_steps.index,
	valid_preparations.id,
	valid_preparations.name,
	valid_preparations.description,
	valid_preparations.icon_path,
	valid_preparations.yields_nothing,
	valid_preparations.restrict_to_ingredients,
	valid_preparations.zero_ingredients_allowable,
	valid_preparations.past_tense,
	valid_preparations.created_at,
	valid_preparations.last_updated_at,
	valid_preparations.archived_at,
	recipe_steps.minimum_estimated_time_in_seconds,
	recipe_steps.maximum_estimated_time_in_seconds,
	recipe_steps.minimum_temperature_in_celsius,
	recipe_steps.maximum_temperature_in_celsius,
	recipe_steps.notes,
	recipe_steps.explicit_instructions,
	recipe_steps.optional,
	recipe_steps.created_at,
	recipe_steps.last_updated_at,
	recipe_steps.archived_at,
	recipe_steps.belongs_to_recipe
FROM recipes
	FULL OUTER JOIN recipe_steps ON recipes.id=recipe_steps.belongs_to_recipe
	FULL OUTER JOIN valid_preparations ON recipe_steps.preparation_id=valid_preparations.id
WHERE recipes.archived_at IS NULL
	AND recipes.id = $1
	AND recipes.created_by_user = $2
ORDER BY recipe_steps.index
`

type GetRecipeByIDAndAuthorParams struct {
	ID            string `db:"id"`
	CreatedByUser string `db:"created_by_user"`
}

type GetRecipeByIDAndAuthorRow struct {
	ArchivedAt                    sql.NullTime   `db:"archived_at"`
	ArchivedAt_2                  sql.NullTime   `db:"archived_at_2"`
	LastUpdatedAt_2               sql.NullTime   `db:"last_updated_at_2"`
	CreatedAt_2                   sql.NullTime   `db:"created_at_2"`
	CreatedAt_3                   sql.NullTime   `db:"created_at_3"`
	ArchivedAt_3                  sql.NullTime   `db:"archived_at_3"`
	LastUpdatedAt_3               sql.NullTime   `db:"last_updated_at_3"`
	CreatedAt                     sql.NullTime   `db:"created_at"`
	LastUpdatedAt                 sql.NullTime   `db:"last_updated_at"`
	MinimumTemperatureInCelsius   sql.NullString `db:"minimum_temperature_in_celsius"`
	CreatedByUser                 sql.NullString `db:"created_by_user"`
	ID_2                          sql.NullString `db:"id_2"`
	InspiredByRecipeID            sql.NullString `db:"inspired_by_recipe_id"`
	ID_3                          sql.NullString `db:"id_3"`
	Name_2                        sql.NullString `db:"name_2"`
	Description_2                 sql.NullString `db:"description_2"`
	IconPath                      sql.NullString `db:"icon_path"`
	ID                            sql.NullString `db:"id"`
	ExplicitInstructions          sql.NullString `db:"explicit_instructions"`
	Notes                         sql.NullString `db:"notes"`
	PastTense                     sql.NullString `db:"past_tense"`
	Description                   sql.NullString `db:"description"`
	Source                        sql.NullString `db:"source"`
	Name                          sql.NullString `db:"name"`
	MaximumTemperatureInCelsius   sql.NullString `db:"maximum_temperature_in_celsius"`
	BelongsToRecipe               sql.NullString `db:"belongs_to_recipe"`
	MaximumEstimatedTimeInSeconds sql.NullInt64  `db:"maximum_estimated_time_in_seconds"`
	MinimumEstimatedTimeInSeconds sql.NullInt64  `db:"minimum_estimated_time_in_seconds"`
	Index                         sql.NullInt32  `db:"index"`
	YieldsPortions                sql.NullInt32  `db:"yields_portions"`
	ZeroIngredientsAllowable      sql.NullBool   `db:"zero_ingredients_allowable"`
	RestrictToIngredients         sql.NullBool   `db:"restrict_to_ingredients"`
	Optional                      sql.NullBool   `db:"optional"`
	SealOfApproval                sql.NullBool   `db:"seal_of_approval"`
	YieldsNothing                 sql.NullBool   `db:"yields_nothing"`
}

func (q *Queries) GetRecipeByIDAndAuthor(ctx context.Context, arg *GetRecipeByIDAndAuthorParams) ([]*GetRecipeByIDAndAuthorRow, error) {
	rows, err := q.query(ctx, q.getRecipeByIDAndAuthorStmt, GetRecipeByIDAndAuthor, arg.ID, arg.CreatedByUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetRecipeByIDAndAuthorRow{}
	for rows.Next() {
		var i GetRecipeByIDAndAuthorRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Source,
			&i.Description,
			&i.InspiredByRecipeID,
			&i.YieldsPortions,
			&i.SealOfApproval,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.CreatedByUser,
			&i.ID_2,
			&i.Index,
			&i.ID_3,
			&i.Name_2,
			&i.Description_2,
			&i.IconPath,
			&i.YieldsNothing,
			&i.RestrictToIngredients,
			&i.ZeroIngredientsAllowable,
			&i.PastTense,
			&i.CreatedAt_2,
			&i.LastUpdatedAt_2,
			&i.ArchivedAt_2,
			&i.MinimumEstimatedTimeInSeconds,
			&i.MaximumEstimatedTimeInSeconds,
			&i.MinimumTemperatureInCelsius,
			&i.MaximumTemperatureInCelsius,
			&i.Notes,
			&i.ExplicitInstructions,
			&i.Optional,
			&i.CreatedAt_3,
			&i.LastUpdatedAt_3,
			&i.ArchivedAt_3,
			&i.BelongsToRecipe,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
