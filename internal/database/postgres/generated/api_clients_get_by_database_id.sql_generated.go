// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: api_clients_get_by_database_id.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const GetAPIClientByID = `-- name: GetAPIClientByID :one
SELECT
	api_clients.id,
	api_clients.name,
	api_clients.client_id,
	api_clients.secret_key,
	api_clients.created_at,
	api_clients.last_updated_at,
	api_clients.archived_at,
	api_clients.belongs_to_user
FROM api_clients
WHERE api_clients.archived_at IS NULL
	AND api_clients.belongs_to_user = $1
	AND api_clients.id = $2
`

type GetAPIClientByIDParams struct {
	BelongsToUser string
	ID            string
}

type GetAPIClientByIDRow struct {
	ID            string
	Name          sql.NullString
	ClientID      string
	SecretKey     []byte
	CreatedAt     time.Time
	LastUpdatedAt sql.NullTime
	ArchivedAt    sql.NullTime
	BelongsToUser string
}

func (q *Queries) GetAPIClientByID(ctx context.Context, arg *GetAPIClientByIDParams) (*GetAPIClientByIDRow, error) {
	row := q.db.QueryRowContext(ctx, GetAPIClientByID, arg.BelongsToUser, arg.ID)
	var i GetAPIClientByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ClientID,
		&i.SecretKey,
		&i.CreatedAt,
		&i.LastUpdatedAt,
		&i.ArchivedAt,
		&i.BelongsToUser,
	)
	return &i, err
}
