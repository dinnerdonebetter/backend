// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0

package generated

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.archiveAPIClientStmt, err = db.PrepareContext(ctx, ArchiveAPIClient); err != nil {
		return nil, fmt.Errorf("error preparing query ArchiveAPIClient: %w", err)
	}
	if q.archiveHouseholdStmt, err = db.PrepareContext(ctx, ArchiveHousehold); err != nil {
		return nil, fmt.Errorf("error preparing query ArchiveHousehold: %w", err)
	}
	if q.archiveHouseholdUserMembershipForUserStmt, err = db.PrepareContext(ctx, ArchiveHouseholdUserMembershipForUser); err != nil {
		return nil, fmt.Errorf("error preparing query ArchiveHouseholdUserMembershipForUser: %w", err)
	}
	if q.archiveMealStmt, err = db.PrepareContext(ctx, ArchiveMeal); err != nil {
		return nil, fmt.Errorf("error preparing query ArchiveMeal: %w", err)
	}
	if q.archiveMealPlanStmt, err = db.PrepareContext(ctx, ArchiveMealPlan); err != nil {
		return nil, fmt.Errorf("error preparing query ArchiveMealPlan: %w", err)
	}
	if q.archiveMealPlanEventStmt, err = db.PrepareContext(ctx, ArchiveMealPlanEvent); err != nil {
		return nil, fmt.Errorf("error preparing query ArchiveMealPlanEvent: %w", err)
	}
	if q.archiveMealPlanGroceryListItemStmt, err = db.PrepareContext(ctx, ArchiveMealPlanGroceryListItem); err != nil {
		return nil, fmt.Errorf("error preparing query ArchiveMealPlanGroceryListItem: %w", err)
	}
	if q.archiveMealPlanOptionStmt, err = db.PrepareContext(ctx, ArchiveMealPlanOption); err != nil {
		return nil, fmt.Errorf("error preparing query ArchiveMealPlanOption: %w", err)
	}
	if q.archiveMealPlanOptionVoteStmt, err = db.PrepareContext(ctx, ArchiveMealPlanOptionVote); err != nil {
		return nil, fmt.Errorf("error preparing query ArchiveMealPlanOptionVote: %w", err)
	}
	if q.archiveRecipeStmt, err = db.PrepareContext(ctx, ArchiveRecipe); err != nil {
		return nil, fmt.Errorf("error preparing query ArchiveRecipe: %w", err)
	}
	if q.archiveRecipeMediaStmt, err = db.PrepareContext(ctx, ArchiveRecipeMedia); err != nil {
		return nil, fmt.Errorf("error preparing query ArchiveRecipeMedia: %w", err)
	}
	if q.archiveRecipePrepTaskStmt, err = db.PrepareContext(ctx, ArchiveRecipePrepTask); err != nil {
		return nil, fmt.Errorf("error preparing query ArchiveRecipePrepTask: %w", err)
	}
	if q.archiveRecipeStepStmt, err = db.PrepareContext(ctx, ArchiveRecipeStep); err != nil {
		return nil, fmt.Errorf("error preparing query ArchiveRecipeStep: %w", err)
	}
	if q.archiveRecipeStepIngredientStmt, err = db.PrepareContext(ctx, ArchiveRecipeStepIngredient); err != nil {
		return nil, fmt.Errorf("error preparing query ArchiveRecipeStepIngredient: %w", err)
	}
	if q.archiveRecipeStepInstrumentStmt, err = db.PrepareContext(ctx, ArchiveRecipeStepInstrument); err != nil {
		return nil, fmt.Errorf("error preparing query ArchiveRecipeStepInstrument: %w", err)
	}
	if q.archiveRecipeStepProductStmt, err = db.PrepareContext(ctx, ArchiveRecipeStepProduct); err != nil {
		return nil, fmt.Errorf("error preparing query ArchiveRecipeStepProduct: %w", err)
	}
	if q.archiveUserStmt, err = db.PrepareContext(ctx, ArchiveUser); err != nil {
		return nil, fmt.Errorf("error preparing query ArchiveUser: %w", err)
	}
	if q.archiveValidIngredientStmt, err = db.PrepareContext(ctx, ArchiveValidIngredient); err != nil {
		return nil, fmt.Errorf("error preparing query ArchiveValidIngredient: %w", err)
	}
	if q.archiveValidIngredientMeasurementUnitStmt, err = db.PrepareContext(ctx, ArchiveValidIngredientMeasurementUnit); err != nil {
		return nil, fmt.Errorf("error preparing query ArchiveValidIngredientMeasurementUnit: %w", err)
	}
	if q.archiveValidIngredientPreparationStmt, err = db.PrepareContext(ctx, ArchiveValidIngredientPreparation); err != nil {
		return nil, fmt.Errorf("error preparing query ArchiveValidIngredientPreparation: %w", err)
	}
	if q.archiveValidInstrumentStmt, err = db.PrepareContext(ctx, ArchiveValidInstrument); err != nil {
		return nil, fmt.Errorf("error preparing query ArchiveValidInstrument: %w", err)
	}
	if q.archiveValidMeasurementConversionStmt, err = db.PrepareContext(ctx, ArchiveValidMeasurementConversion); err != nil {
		return nil, fmt.Errorf("error preparing query ArchiveValidMeasurementConversion: %w", err)
	}
	if q.archiveValidMeasurementUnitStmt, err = db.PrepareContext(ctx, ArchiveValidMeasurementUnit); err != nil {
		return nil, fmt.Errorf("error preparing query ArchiveValidMeasurementUnit: %w", err)
	}
	if q.archiveValidPreparationStmt, err = db.PrepareContext(ctx, ArchiveValidPreparation); err != nil {
		return nil, fmt.Errorf("error preparing query ArchiveValidPreparation: %w", err)
	}
	if q.archiveValidPreparationInstrumentStmt, err = db.PrepareContext(ctx, ArchiveValidPreparationInstrument); err != nil {
		return nil, fmt.Errorf("error preparing query ArchiveValidPreparationInstrument: %w", err)
	}
	if q.archiveWebhookStmt, err = db.PrepareContext(ctx, ArchiveWebhook); err != nil {
		return nil, fmt.Errorf("error preparing query ArchiveWebhook: %w", err)
	}
	if q.attachHouseholdInvitationsToUserStmt, err = db.PrepareContext(ctx, AttachHouseholdInvitationsToUser); err != nil {
		return nil, fmt.Errorf("error preparing query AttachHouseholdInvitationsToUser: %w", err)
	}
	if q.changeMealPlanTaskStatusStmt, err = db.PrepareContext(ctx, ChangeMealPlanTaskStatus); err != nil {
		return nil, fmt.Errorf("error preparing query ChangeMealPlanTaskStatus: %w", err)
	}
	if q.createAPIClientStmt, err = db.PrepareContext(ctx, CreateAPIClient); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAPIClient: %w", err)
	}
	if q.createHouseholdStmt, err = db.PrepareContext(ctx, CreateHousehold); err != nil {
		return nil, fmt.Errorf("error preparing query CreateHousehold: %w", err)
	}
	if q.createHouseholdInvitationStmt, err = db.PrepareContext(ctx, CreateHouseholdInvitation); err != nil {
		return nil, fmt.Errorf("error preparing query CreateHouseholdInvitation: %w", err)
	}
	if q.createHouseholdUserMembershipStmt, err = db.PrepareContext(ctx, CreateHouseholdUserMembership); err != nil {
		return nil, fmt.Errorf("error preparing query CreateHouseholdUserMembership: %w", err)
	}
	if q.createHouseholdUserMembershipForNewUserStmt, err = db.PrepareContext(ctx, CreateHouseholdUserMembershipForNewUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateHouseholdUserMembershipForNewUser: %w", err)
	}
	if q.createMealStmt, err = db.PrepareContext(ctx, CreateMeal); err != nil {
		return nil, fmt.Errorf("error preparing query CreateMeal: %w", err)
	}
	if q.createMealPlanStmt, err = db.PrepareContext(ctx, CreateMealPlan); err != nil {
		return nil, fmt.Errorf("error preparing query CreateMealPlan: %w", err)
	}
	if q.createMealPlanEventStmt, err = db.PrepareContext(ctx, CreateMealPlanEvent); err != nil {
		return nil, fmt.Errorf("error preparing query CreateMealPlanEvent: %w", err)
	}
	if q.createMealPlanGroceryListItemStmt, err = db.PrepareContext(ctx, CreateMealPlanGroceryListItem); err != nil {
		return nil, fmt.Errorf("error preparing query CreateMealPlanGroceryListItem: %w", err)
	}
	if q.createMealPlanOptionStmt, err = db.PrepareContext(ctx, CreateMealPlanOption); err != nil {
		return nil, fmt.Errorf("error preparing query CreateMealPlanOption: %w", err)
	}
	if q.createMealPlanOptionVoteStmt, err = db.PrepareContext(ctx, CreateMealPlanOptionVote); err != nil {
		return nil, fmt.Errorf("error preparing query CreateMealPlanOptionVote: %w", err)
	}
	if q.createMealPlanTaskStmt, err = db.PrepareContext(ctx, CreateMealPlanTask); err != nil {
		return nil, fmt.Errorf("error preparing query CreateMealPlanTask: %w", err)
	}
	if q.createMealRecipeStmt, err = db.PrepareContext(ctx, CreateMealRecipe); err != nil {
		return nil, fmt.Errorf("error preparing query CreateMealRecipe: %w", err)
	}
	if q.createPasswordResetTokenStmt, err = db.PrepareContext(ctx, CreatePasswordResetToken); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePasswordResetToken: %w", err)
	}
	if q.createRecipeStmt, err = db.PrepareContext(ctx, CreateRecipe); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRecipe: %w", err)
	}
	if q.createRecipeMediaStmt, err = db.PrepareContext(ctx, CreateRecipeMedia); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRecipeMedia: %w", err)
	}
	if q.createRecipePrepTaskStmt, err = db.PrepareContext(ctx, CreateRecipePrepTask); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRecipePrepTask: %w", err)
	}
	if q.createRecipePrepTaskStepStmt, err = db.PrepareContext(ctx, CreateRecipePrepTaskStep); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRecipePrepTaskStep: %w", err)
	}
	if q.createRecipeStepStmt, err = db.PrepareContext(ctx, CreateRecipeStep); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRecipeStep: %w", err)
	}
	if q.createRecipeStepIngredientStmt, err = db.PrepareContext(ctx, CreateRecipeStepIngredient); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRecipeStepIngredient: %w", err)
	}
	if q.createRecipeStepInstrumentStmt, err = db.PrepareContext(ctx, CreateRecipeStepInstrument); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRecipeStepInstrument: %w", err)
	}
	if q.createRecipeStepProductStmt, err = db.PrepareContext(ctx, CreateRecipeStepProduct); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRecipeStepProduct: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, CreateUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.createValidIngredientStmt, err = db.PrepareContext(ctx, CreateValidIngredient); err != nil {
		return nil, fmt.Errorf("error preparing query CreateValidIngredient: %w", err)
	}
	if q.createValidIngredientMeasurementUnitStmt, err = db.PrepareContext(ctx, CreateValidIngredientMeasurementUnit); err != nil {
		return nil, fmt.Errorf("error preparing query CreateValidIngredientMeasurementUnit: %w", err)
	}
	if q.createValidIngredientPreparationStmt, err = db.PrepareContext(ctx, CreateValidIngredientPreparation); err != nil {
		return nil, fmt.Errorf("error preparing query CreateValidIngredientPreparation: %w", err)
	}
	if q.createValidInstrumentStmt, err = db.PrepareContext(ctx, CreateValidInstrument); err != nil {
		return nil, fmt.Errorf("error preparing query CreateValidInstrument: %w", err)
	}
	if q.createValidMeasurementConversionStmt, err = db.PrepareContext(ctx, CreateValidMeasurementConversion); err != nil {
		return nil, fmt.Errorf("error preparing query CreateValidMeasurementConversion: %w", err)
	}
	if q.createValidMeasurementUnitStmt, err = db.PrepareContext(ctx, CreateValidMeasurementUnit); err != nil {
		return nil, fmt.Errorf("error preparing query CreateValidMeasurementUnit: %w", err)
	}
	if q.createValidPreparationStmt, err = db.PrepareContext(ctx, CreateValidPreparation); err != nil {
		return nil, fmt.Errorf("error preparing query CreateValidPreparation: %w", err)
	}
	if q.createValidPreparationInstrumentStmt, err = db.PrepareContext(ctx, CreateValidPreparationInstrument); err != nil {
		return nil, fmt.Errorf("error preparing query CreateValidPreparationInstrument: %w", err)
	}
	if q.createWebhookStmt, err = db.PrepareContext(ctx, CreateWebhook); err != nil {
		return nil, fmt.Errorf("error preparing query CreateWebhook: %w", err)
	}
	if q.createWebhookTriggerEventStmt, err = db.PrepareContext(ctx, CreateWebhookTriggerEvent); err != nil {
		return nil, fmt.Errorf("error preparing query CreateWebhookTriggerEvent: %w", err)
	}
	if q.finalizeMealPlanStmt, err = db.PrepareContext(ctx, FinalizeMealPlan); err != nil {
		return nil, fmt.Errorf("error preparing query FinalizeMealPlan: %w", err)
	}
	if q.finalizeMealPlanOptionStmt, err = db.PrepareContext(ctx, FinalizeMealPlanOption); err != nil {
		return nil, fmt.Errorf("error preparing query FinalizeMealPlanOption: %w", err)
	}
	if q.getAPIClientByClientIDStmt, err = db.PrepareContext(ctx, GetAPIClientByClientID); err != nil {
		return nil, fmt.Errorf("error preparing query GetAPIClientByClientID: %w", err)
	}
	if q.getAPIClientByIDStmt, err = db.PrepareContext(ctx, GetAPIClientByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetAPIClientByID: %w", err)
	}
	if q.getAdminUserByUsernameStmt, err = db.PrepareContext(ctx, GetAdminUserByUsername); err != nil {
		return nil, fmt.Errorf("error preparing query GetAdminUserByUsername: %w", err)
	}
	if q.getDefaultHouseholdIDForUserStmt, err = db.PrepareContext(ctx, GetDefaultHouseholdIDForUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetDefaultHouseholdIDForUser: %w", err)
	}
	if q.getExpiredAndUnresolvedMealPlansStmt, err = db.PrepareContext(ctx, GetExpiredAndUnresolvedMealPlans); err != nil {
		return nil, fmt.Errorf("error preparing query GetExpiredAndUnresolvedMealPlans: %w", err)
	}
	if q.getFinalizedMealPlansForPlanningStmt, err = db.PrepareContext(ctx, GetFinalizedMealPlansForPlanning); err != nil {
		return nil, fmt.Errorf("error preparing query GetFinalizedMealPlansForPlanning: %w", err)
	}
	if q.getFinalizedMealPlansWithoutInitializedGroceryListsStmt, err = db.PrepareContext(ctx, GetFinalizedMealPlansWithoutInitializedGroceryLists); err != nil {
		return nil, fmt.Errorf("error preparing query GetFinalizedMealPlansWithoutInitializedGroceryLists: %w", err)
	}
	if q.getHouseholdByIDWithMembershipsStmt, err = db.PrepareContext(ctx, GetHouseholdByIDWithMemberships); err != nil {
		return nil, fmt.Errorf("error preparing query GetHouseholdByIDWithMemberships: %w", err)
	}
	if q.getHouseholdInvitationByEmailAndTokenStmt, err = db.PrepareContext(ctx, GetHouseholdInvitationByEmailAndToken); err != nil {
		return nil, fmt.Errorf("error preparing query GetHouseholdInvitationByEmailAndToken: %w", err)
	}
	if q.getHouseholdInvitationByHouseholdAndIDStmt, err = db.PrepareContext(ctx, GetHouseholdInvitationByHouseholdAndID); err != nil {
		return nil, fmt.Errorf("error preparing query GetHouseholdInvitationByHouseholdAndID: %w", err)
	}
	if q.getHouseholdInvitationByTokenAndIDStmt, err = db.PrepareContext(ctx, GetHouseholdInvitationByTokenAndID); err != nil {
		return nil, fmt.Errorf("error preparing query GetHouseholdInvitationByTokenAndID: %w", err)
	}
	if q.getHouseholdUserMembershipsForUserStmt, err = db.PrepareContext(ctx, GetHouseholdUserMembershipsForUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetHouseholdUserMembershipsForUser: %w", err)
	}
	if q.getMealStmt, err = db.PrepareContext(ctx, GetMeal); err != nil {
		return nil, fmt.Errorf("error preparing query GetMeal: %w", err)
	}
	if q.getMealPlanStmt, err = db.PrepareContext(ctx, GetMealPlan); err != nil {
		return nil, fmt.Errorf("error preparing query GetMealPlan: %w", err)
	}
	if q.getMealPlanEventStmt, err = db.PrepareContext(ctx, GetMealPlanEvent); err != nil {
		return nil, fmt.Errorf("error preparing query GetMealPlanEvent: %w", err)
	}
	if q.getMealPlanEventsForMealPlanStmt, err = db.PrepareContext(ctx, GetMealPlanEventsForMealPlan); err != nil {
		return nil, fmt.Errorf("error preparing query GetMealPlanEventsForMealPlan: %w", err)
	}
	if q.getMealPlanGroceryListItemStmt, err = db.PrepareContext(ctx, GetMealPlanGroceryListItem); err != nil {
		return nil, fmt.Errorf("error preparing query GetMealPlanGroceryListItem: %w", err)
	}
	if q.getMealPlanGroceryListItemsForMealPlanStmt, err = db.PrepareContext(ctx, GetMealPlanGroceryListItemsForMealPlan); err != nil {
		return nil, fmt.Errorf("error preparing query GetMealPlanGroceryListItemsForMealPlan: %w", err)
	}
	if q.getMealPlanOptionStmt, err = db.PrepareContext(ctx, GetMealPlanOption); err != nil {
		return nil, fmt.Errorf("error preparing query GetMealPlanOption: %w", err)
	}
	if q.getMealPlanOptionByIDStmt, err = db.PrepareContext(ctx, GetMealPlanOptionByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetMealPlanOptionByID: %w", err)
	}
	if q.getMealPlanOptionVoteStmt, err = db.PrepareContext(ctx, GetMealPlanOptionVote); err != nil {
		return nil, fmt.Errorf("error preparing query GetMealPlanOptionVote: %w", err)
	}
	if q.getMealPlanOptionVotesForMealPlanOptionStmt, err = db.PrepareContext(ctx, GetMealPlanOptionVotesForMealPlanOption); err != nil {
		return nil, fmt.Errorf("error preparing query GetMealPlanOptionVotesForMealPlanOption: %w", err)
	}
	if q.getMealPlanOptionsForMealPlanEventStmt, err = db.PrepareContext(ctx, GetMealPlanOptionsForMealPlanEvent); err != nil {
		return nil, fmt.Errorf("error preparing query GetMealPlanOptionsForMealPlanEvent: %w", err)
	}
	if q.getMealPlanPastVotingDeadlineStmt, err = db.PrepareContext(ctx, GetMealPlanPastVotingDeadline); err != nil {
		return nil, fmt.Errorf("error preparing query GetMealPlanPastVotingDeadline: %w", err)
	}
	if q.getMealPlanTaskStmt, err = db.PrepareContext(ctx, GetMealPlanTask); err != nil {
		return nil, fmt.Errorf("error preparing query GetMealPlanTask: %w", err)
	}
	if q.getPasswordResetTokenStmt, err = db.PrepareContext(ctx, GetPasswordResetToken); err != nil {
		return nil, fmt.Errorf("error preparing query GetPasswordResetToken: %w", err)
	}
	if q.getRandomValidIngredientStmt, err = db.PrepareContext(ctx, GetRandomValidIngredient); err != nil {
		return nil, fmt.Errorf("error preparing query GetRandomValidIngredient: %w", err)
	}
	if q.getRandomValidInstrumentStmt, err = db.PrepareContext(ctx, GetRandomValidInstrument); err != nil {
		return nil, fmt.Errorf("error preparing query GetRandomValidInstrument: %w", err)
	}
	if q.getRandomValidMeasurementUnitStmt, err = db.PrepareContext(ctx, GetRandomValidMeasurementUnit); err != nil {
		return nil, fmt.Errorf("error preparing query GetRandomValidMeasurementUnit: %w", err)
	}
	if q.getRandomValidPreparationStmt, err = db.PrepareContext(ctx, GetRandomValidPreparation); err != nil {
		return nil, fmt.Errorf("error preparing query GetRandomValidPreparation: %w", err)
	}
	if q.getRecipeByIDStmt, err = db.PrepareContext(ctx, GetRecipeByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetRecipeByID: %w", err)
	}
	if q.getRecipeByIDAndAuthorStmt, err = db.PrepareContext(ctx, GetRecipeByIDAndAuthor); err != nil {
		return nil, fmt.Errorf("error preparing query GetRecipeByIDAndAuthor: %w", err)
	}
	if q.getRecipeIDsForMealStmt, err = db.PrepareContext(ctx, GetRecipeIDsForMeal); err != nil {
		return nil, fmt.Errorf("error preparing query GetRecipeIDsForMeal: %w", err)
	}
	if q.getRecipeMediaStmt, err = db.PrepareContext(ctx, GetRecipeMedia); err != nil {
		return nil, fmt.Errorf("error preparing query GetRecipeMedia: %w", err)
	}
	if q.getRecipeMediaForRecipeStmt, err = db.PrepareContext(ctx, GetRecipeMediaForRecipe); err != nil {
		return nil, fmt.Errorf("error preparing query GetRecipeMediaForRecipe: %w", err)
	}
	if q.getRecipeMediaForRecipeStepStmt, err = db.PrepareContext(ctx, GetRecipeMediaForRecipeStep); err != nil {
		return nil, fmt.Errorf("error preparing query GetRecipeMediaForRecipeStep: %w", err)
	}
	if q.getRecipePrepTaskStmt, err = db.PrepareContext(ctx, GetRecipePrepTask); err != nil {
		return nil, fmt.Errorf("error preparing query GetRecipePrepTask: %w", err)
	}
	if q.getRecipePrepTasksForRecipeStmt, err = db.PrepareContext(ctx, GetRecipePrepTasksForRecipe); err != nil {
		return nil, fmt.Errorf("error preparing query GetRecipePrepTasksForRecipe: %w", err)
	}
	if q.getRecipeStepStmt, err = db.PrepareContext(ctx, GetRecipeStep); err != nil {
		return nil, fmt.Errorf("error preparing query GetRecipeStep: %w", err)
	}
	if q.getRecipeStepByIDStmt, err = db.PrepareContext(ctx, GetRecipeStepByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetRecipeStepByID: %w", err)
	}
	if q.getRecipeStepIngredientStmt, err = db.PrepareContext(ctx, GetRecipeStepIngredient); err != nil {
		return nil, fmt.Errorf("error preparing query GetRecipeStepIngredient: %w", err)
	}
	if q.getRecipeStepIngredientForRecipeStmt, err = db.PrepareContext(ctx, GetRecipeStepIngredientForRecipe); err != nil {
		return nil, fmt.Errorf("error preparing query GetRecipeStepIngredientForRecipe: %w", err)
	}
	if q.getRecipeStepInstrumentStmt, err = db.PrepareContext(ctx, GetRecipeStepInstrument); err != nil {
		return nil, fmt.Errorf("error preparing query GetRecipeStepInstrument: %w", err)
	}
	if q.getRecipeStepInstrumentsForRecipeStmt, err = db.PrepareContext(ctx, GetRecipeStepInstrumentsForRecipe); err != nil {
		return nil, fmt.Errorf("error preparing query GetRecipeStepInstrumentsForRecipe: %w", err)
	}
	if q.getRecipeStepProductStmt, err = db.PrepareContext(ctx, GetRecipeStepProduct); err != nil {
		return nil, fmt.Errorf("error preparing query GetRecipeStepProduct: %w", err)
	}
	if q.getRecipeStepProductsForRecipeStmt, err = db.PrepareContext(ctx, GetRecipeStepProductsForRecipe); err != nil {
		return nil, fmt.Errorf("error preparing query GetRecipeStepProductsForRecipe: %w", err)
	}
	if q.getUserByEmailAddressStmt, err = db.PrepareContext(ctx, GetUserByEmailAddress); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmailAddress: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, GetUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.getUserByUsernameStmt, err = db.PrepareContext(ctx, GetUserByUsername); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByUsername: %w", err)
	}
	if q.getUserWithVerifiedTwoFactorSecretStmt, err = db.PrepareContext(ctx, GetUserWithVerifiedTwoFactorSecret); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserWithVerifiedTwoFactorSecret: %w", err)
	}
	if q.getValidIngredientStmt, err = db.PrepareContext(ctx, GetValidIngredient); err != nil {
		return nil, fmt.Errorf("error preparing query GetValidIngredient: %w", err)
	}
	if q.getValidIngredientMeasurementUnitStmt, err = db.PrepareContext(ctx, GetValidIngredientMeasurementUnit); err != nil {
		return nil, fmt.Errorf("error preparing query GetValidIngredientMeasurementUnit: %w", err)
	}
	if q.getValidIngredientPreparationStmt, err = db.PrepareContext(ctx, GetValidIngredientPreparation); err != nil {
		return nil, fmt.Errorf("error preparing query GetValidIngredientPreparation: %w", err)
	}
	if q.getValidInstrumentStmt, err = db.PrepareContext(ctx, GetValidInstrument); err != nil {
		return nil, fmt.Errorf("error preparing query GetValidInstrument: %w", err)
	}
	if q.getValidInstrumentsStmt, err = db.PrepareContext(ctx, GetValidInstruments); err != nil {
		return nil, fmt.Errorf("error preparing query GetValidInstruments: %w", err)
	}
	if q.getValidMeasurementConversionStmt, err = db.PrepareContext(ctx, GetValidMeasurementConversion); err != nil {
		return nil, fmt.Errorf("error preparing query GetValidMeasurementConversion: %w", err)
	}
	if q.getValidMeasurementConversionsFromMeasurementUnitStmt, err = db.PrepareContext(ctx, GetValidMeasurementConversionsFromMeasurementUnit); err != nil {
		return nil, fmt.Errorf("error preparing query GetValidMeasurementConversionsFromMeasurementUnit: %w", err)
	}
	if q.getValidMeasurementConversionsToMeasurementUnitStmt, err = db.PrepareContext(ctx, GetValidMeasurementConversionsToMeasurementUnit); err != nil {
		return nil, fmt.Errorf("error preparing query GetValidMeasurementConversionsToMeasurementUnit: %w", err)
	}
	if q.getValidMeasurementUnitStmt, err = db.PrepareContext(ctx, GetValidMeasurementUnit); err != nil {
		return nil, fmt.Errorf("error preparing query GetValidMeasurementUnit: %w", err)
	}
	if q.getValidPreparationStmt, err = db.PrepareContext(ctx, GetValidPreparation); err != nil {
		return nil, fmt.Errorf("error preparing query GetValidPreparation: %w", err)
	}
	if q.getValidPreparationInstrumentStmt, err = db.PrepareContext(ctx, GetValidPreparationInstrument); err != nil {
		return nil, fmt.Errorf("error preparing query GetValidPreparationInstrument: %w", err)
	}
	if q.getWebhookStmt, err = db.PrepareContext(ctx, GetWebhook); err != nil {
		return nil, fmt.Errorf("error preparing query GetWebhook: %w", err)
	}
	if q.getWebhookTriggerEventsForWebhookStmt, err = db.PrepareContext(ctx, GetWebhookTriggerEventsForWebhook); err != nil {
		return nil, fmt.Errorf("error preparing query GetWebhookTriggerEventsForWebhook: %w", err)
	}
	if q.getWebhooksStmt, err = db.PrepareContext(ctx, GetWebhooks); err != nil {
		return nil, fmt.Errorf("error preparing query GetWebhooks: %w", err)
	}
	if q.householdInvitationExistsStmt, err = db.PrepareContext(ctx, HouseholdInvitationExists); err != nil {
		return nil, fmt.Errorf("error preparing query HouseholdInvitationExists: %w", err)
	}
	if q.listIncompleteMealPlanTaskByMealPlanOptionStmt, err = db.PrepareContext(ctx, ListIncompleteMealPlanTaskByMealPlanOption); err != nil {
		return nil, fmt.Errorf("error preparing query ListIncompleteMealPlanTaskByMealPlanOption: %w", err)
	}
	if q.listMealPlanTasksForMealPlanStmt, err = db.PrepareContext(ctx, ListMealPlanTasksForMealPlan); err != nil {
		return nil, fmt.Errorf("error preparing query ListMealPlanTasksForMealPlan: %w", err)
	}
	if q.markHouseholdUserMembershipAsDefaultForUserStmt, err = db.PrepareContext(ctx, MarkHouseholdUserMembershipAsDefaultForUser); err != nil {
		return nil, fmt.Errorf("error preparing query MarkHouseholdUserMembershipAsDefaultForUser: %w", err)
	}
	if q.markMealPlanAsHavingGroceryListInitializedStmt, err = db.PrepareContext(ctx, MarkMealPlanAsHavingGroceryListInitialized); err != nil {
		return nil, fmt.Errorf("error preparing query MarkMealPlanAsHavingGroceryListInitialized: %w", err)
	}
	if q.markMealPlanTasksAsCreatedStmt, err = db.PrepareContext(ctx, MarkMealPlanTasksAsCreated); err != nil {
		return nil, fmt.Errorf("error preparing query MarkMealPlanTasksAsCreated: %w", err)
	}
	if q.markUserTwoFactorSecretAsVerifiedStmt, err = db.PrepareContext(ctx, MarkUserTwoFactorSecretAsVerified); err != nil {
		return nil, fmt.Errorf("error preparing query MarkUserTwoFactorSecretAsVerified: %w", err)
	}
	if q.mealExistsStmt, err = db.PrepareContext(ctx, MealExists); err != nil {
		return nil, fmt.Errorf("error preparing query MealExists: %w", err)
	}
	if q.mealPlanEventExistsStmt, err = db.PrepareContext(ctx, MealPlanEventExists); err != nil {
		return nil, fmt.Errorf("error preparing query MealPlanEventExists: %w", err)
	}
	if q.mealPlanExistsStmt, err = db.PrepareContext(ctx, MealPlanExists); err != nil {
		return nil, fmt.Errorf("error preparing query MealPlanExists: %w", err)
	}
	if q.mealPlanGroceryListItemExistsStmt, err = db.PrepareContext(ctx, MealPlanGroceryListItemExists); err != nil {
		return nil, fmt.Errorf("error preparing query MealPlanGroceryListItemExists: %w", err)
	}
	if q.mealPlanOptionExistsStmt, err = db.PrepareContext(ctx, MealPlanOptionExists); err != nil {
		return nil, fmt.Errorf("error preparing query MealPlanOptionExists: %w", err)
	}
	if q.mealPlanOptionVoteExistsStmt, err = db.PrepareContext(ctx, MealPlanOptionVoteExists); err != nil {
		return nil, fmt.Errorf("error preparing query MealPlanOptionVoteExists: %w", err)
	}
	if q.mealPlanTaskExistsStmt, err = db.PrepareContext(ctx, MealPlanTaskExists); err != nil {
		return nil, fmt.Errorf("error preparing query MealPlanTaskExists: %w", err)
	}
	if q.modifyHouseholdUserMembershipPermissionsStmt, err = db.PrepareContext(ctx, ModifyHouseholdUserMembershipPermissions); err != nil {
		return nil, fmt.Errorf("error preparing query ModifyHouseholdUserMembershipPermissions: %w", err)
	}
	if q.recipeExistsStmt, err = db.PrepareContext(ctx, RecipeExists); err != nil {
		return nil, fmt.Errorf("error preparing query RecipeExists: %w", err)
	}
	if q.recipeMediaExistsStmt, err = db.PrepareContext(ctx, RecipeMediaExists); err != nil {
		return nil, fmt.Errorf("error preparing query RecipeMediaExists: %w", err)
	}
	if q.recipePrepTaskExistsStmt, err = db.PrepareContext(ctx, RecipePrepTaskExists); err != nil {
		return nil, fmt.Errorf("error preparing query RecipePrepTaskExists: %w", err)
	}
	if q.recipeStepExistsStmt, err = db.PrepareContext(ctx, RecipeStepExists); err != nil {
		return nil, fmt.Errorf("error preparing query RecipeStepExists: %w", err)
	}
	if q.recipeStepIngredientExistsStmt, err = db.PrepareContext(ctx, RecipeStepIngredientExists); err != nil {
		return nil, fmt.Errorf("error preparing query RecipeStepIngredientExists: %w", err)
	}
	if q.recipeStepInstrumentExistsStmt, err = db.PrepareContext(ctx, RecipeStepInstrumentExists); err != nil {
		return nil, fmt.Errorf("error preparing query RecipeStepInstrumentExists: %w", err)
	}
	if q.recipeStepProductExistsStmt, err = db.PrepareContext(ctx, RecipeStepProductExists); err != nil {
		return nil, fmt.Errorf("error preparing query RecipeStepProductExists: %w", err)
	}
	if q.redeemPasswordResetTokenStmt, err = db.PrepareContext(ctx, RedeemPasswordResetToken); err != nil {
		return nil, fmt.Errorf("error preparing query RedeemPasswordResetToken: %w", err)
	}
	if q.removeUserFromHouseholdStmt, err = db.PrepareContext(ctx, RemoveUserFromHousehold); err != nil {
		return nil, fmt.Errorf("error preparing query RemoveUserFromHousehold: %w", err)
	}
	if q.searchForUserByUsernameStmt, err = db.PrepareContext(ctx, SearchForUserByUsername); err != nil {
		return nil, fmt.Errorf("error preparing query SearchForUserByUsername: %w", err)
	}
	if q.searchForValidIngredientStmt, err = db.PrepareContext(ctx, SearchForValidIngredient); err != nil {
		return nil, fmt.Errorf("error preparing query SearchForValidIngredient: %w", err)
	}
	if q.searchForValidInstrumentsStmt, err = db.PrepareContext(ctx, SearchForValidInstruments); err != nil {
		return nil, fmt.Errorf("error preparing query SearchForValidInstruments: %w", err)
	}
	if q.searchForValidMeasurementUnitsStmt, err = db.PrepareContext(ctx, SearchForValidMeasurementUnits); err != nil {
		return nil, fmt.Errorf("error preparing query SearchForValidMeasurementUnits: %w", err)
	}
	if q.searchForValidPreparationsStmt, err = db.PrepareContext(ctx, SearchForValidPreparations); err != nil {
		return nil, fmt.Errorf("error preparing query SearchForValidPreparations: %w", err)
	}
	if q.setHouseholdInvitationStatusStmt, err = db.PrepareContext(ctx, SetHouseholdInvitationStatus); err != nil {
		return nil, fmt.Errorf("error preparing query SetHouseholdInvitationStatus: %w", err)
	}
	if q.transferHouseholdOwnershipStmt, err = db.PrepareContext(ctx, TransferHouseholdOwnership); err != nil {
		return nil, fmt.Errorf("error preparing query TransferHouseholdOwnership: %w", err)
	}
	if q.transferHouseholdUserMembershipToNewUserStmt, err = db.PrepareContext(ctx, TransferHouseholdUserMembershipToNewUser); err != nil {
		return nil, fmt.Errorf("error preparing query TransferHouseholdUserMembershipToNewUser: %w", err)
	}
	if q.updateHouseholdStmt, err = db.PrepareContext(ctx, UpdateHousehold); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateHousehold: %w", err)
	}
	if q.updateMealPlanStmt, err = db.PrepareContext(ctx, UpdateMealPlan); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateMealPlan: %w", err)
	}
	if q.updateMealPlanEventStmt, err = db.PrepareContext(ctx, UpdateMealPlanEvent); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateMealPlanEvent: %w", err)
	}
	if q.updateMealPlanGroceryListItemStmt, err = db.PrepareContext(ctx, UpdateMealPlanGroceryListItem); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateMealPlanGroceryListItem: %w", err)
	}
	if q.updateMealPlanOptionStmt, err = db.PrepareContext(ctx, UpdateMealPlanOption); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateMealPlanOption: %w", err)
	}
	if q.updateMealPlanOptionVoteStmt, err = db.PrepareContext(ctx, UpdateMealPlanOptionVote); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateMealPlanOptionVote: %w", err)
	}
	if q.updateRecipeStmt, err = db.PrepareContext(ctx, UpdateRecipe); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRecipe: %w", err)
	}
	if q.updateRecipeMediaStmt, err = db.PrepareContext(ctx, UpdateRecipeMedia); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRecipeMedia: %w", err)
	}
	if q.updateRecipePrepTaskStmt, err = db.PrepareContext(ctx, UpdateRecipePrepTask); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRecipePrepTask: %w", err)
	}
	if q.updateRecipeStepStmt, err = db.PrepareContext(ctx, UpdateRecipeStep); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRecipeStep: %w", err)
	}
	if q.updateRecipeStepIngredientStmt, err = db.PrepareContext(ctx, UpdateRecipeStepIngredient); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRecipeStepIngredient: %w", err)
	}
	if q.updateRecipeStepInstrumentStmt, err = db.PrepareContext(ctx, UpdateRecipeStepInstrument); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRecipeStepInstrument: %w", err)
	}
	if q.updateRecipeStepProductStmt, err = db.PrepareContext(ctx, UpdateRecipeStepProduct); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRecipeStepProduct: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, UpdateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	if q.updateUserPasswordStmt, err = db.PrepareContext(ctx, UpdateUserPassword); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserPassword: %w", err)
	}
	if q.updateUserTwoFactorSecretStmt, err = db.PrepareContext(ctx, UpdateUserTwoFactorSecret); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserTwoFactorSecret: %w", err)
	}
	if q.updateValidIngredientStmt, err = db.PrepareContext(ctx, UpdateValidIngredient); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateValidIngredient: %w", err)
	}
	if q.updateValidIngredientMeasurementUnitStmt, err = db.PrepareContext(ctx, UpdateValidIngredientMeasurementUnit); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateValidIngredientMeasurementUnit: %w", err)
	}
	if q.updateValidIngredientPreparationStmt, err = db.PrepareContext(ctx, UpdateValidIngredientPreparation); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateValidIngredientPreparation: %w", err)
	}
	if q.updateValidInstrumentStmt, err = db.PrepareContext(ctx, UpdateValidInstrument); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateValidInstrument: %w", err)
	}
	if q.updateValidMeasurementConversionStmt, err = db.PrepareContext(ctx, UpdateValidMeasurementConversion); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateValidMeasurementConversion: %w", err)
	}
	if q.updateValidMeasurementUnitStmt, err = db.PrepareContext(ctx, UpdateValidMeasurementUnit); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateValidMeasurementUnit: %w", err)
	}
	if q.updateValidPreparationStmt, err = db.PrepareContext(ctx, UpdateValidPreparation); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateValidPreparation: %w", err)
	}
	if q.updateValidPreparationInstrumentStmt, err = db.PrepareContext(ctx, UpdateValidPreparationInstrument); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateValidPreparationInstrument: %w", err)
	}
	if q.userExistsWithStatusStmt, err = db.PrepareContext(ctx, UserExistsWithStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UserExistsWithStatus: %w", err)
	}
	if q.userIsMemberOfHouseholdStmt, err = db.PrepareContext(ctx, UserIsMemberOfHousehold); err != nil {
		return nil, fmt.Errorf("error preparing query UserIsMemberOfHousehold: %w", err)
	}
	if q.validIngredientExistsStmt, err = db.PrepareContext(ctx, ValidIngredientExists); err != nil {
		return nil, fmt.Errorf("error preparing query ValidIngredientExists: %w", err)
	}
	if q.validIngredientMeasurementUnitExistsStmt, err = db.PrepareContext(ctx, ValidIngredientMeasurementUnitExists); err != nil {
		return nil, fmt.Errorf("error preparing query ValidIngredientMeasurementUnitExists: %w", err)
	}
	if q.validIngredientPreparationExistsStmt, err = db.PrepareContext(ctx, ValidIngredientPreparationExists); err != nil {
		return nil, fmt.Errorf("error preparing query ValidIngredientPreparationExists: %w", err)
	}
	if q.validInstrumentExistsStmt, err = db.PrepareContext(ctx, ValidInstrumentExists); err != nil {
		return nil, fmt.Errorf("error preparing query ValidInstrumentExists: %w", err)
	}
	if q.validMeasurementConversionExistsStmt, err = db.PrepareContext(ctx, ValidMeasurementConversionExists); err != nil {
		return nil, fmt.Errorf("error preparing query ValidMeasurementConversionExists: %w", err)
	}
	if q.validMeasurementUnitExistsStmt, err = db.PrepareContext(ctx, ValidMeasurementUnitExists); err != nil {
		return nil, fmt.Errorf("error preparing query ValidMeasurementUnitExists: %w", err)
	}
	if q.validPreparationExistsStmt, err = db.PrepareContext(ctx, ValidPreparationExists); err != nil {
		return nil, fmt.Errorf("error preparing query ValidPreparationExists: %w", err)
	}
	if q.validPreparationInstrumentExistsStmt, err = db.PrepareContext(ctx, ValidPreparationInstrumentExists); err != nil {
		return nil, fmt.Errorf("error preparing query ValidPreparationInstrumentExists: %w", err)
	}
	if q.webhookExistsStmt, err = db.PrepareContext(ctx, WebhookExists); err != nil {
		return nil, fmt.Errorf("error preparing query WebhookExists: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.archiveAPIClientStmt != nil {
		if cerr := q.archiveAPIClientStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing archiveAPIClientStmt: %w", cerr)
		}
	}
	if q.archiveHouseholdStmt != nil {
		if cerr := q.archiveHouseholdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing archiveHouseholdStmt: %w", cerr)
		}
	}
	if q.archiveHouseholdUserMembershipForUserStmt != nil {
		if cerr := q.archiveHouseholdUserMembershipForUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing archiveHouseholdUserMembershipForUserStmt: %w", cerr)
		}
	}
	if q.archiveMealStmt != nil {
		if cerr := q.archiveMealStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing archiveMealStmt: %w", cerr)
		}
	}
	if q.archiveMealPlanStmt != nil {
		if cerr := q.archiveMealPlanStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing archiveMealPlanStmt: %w", cerr)
		}
	}
	if q.archiveMealPlanEventStmt != nil {
		if cerr := q.archiveMealPlanEventStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing archiveMealPlanEventStmt: %w", cerr)
		}
	}
	if q.archiveMealPlanGroceryListItemStmt != nil {
		if cerr := q.archiveMealPlanGroceryListItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing archiveMealPlanGroceryListItemStmt: %w", cerr)
		}
	}
	if q.archiveMealPlanOptionStmt != nil {
		if cerr := q.archiveMealPlanOptionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing archiveMealPlanOptionStmt: %w", cerr)
		}
	}
	if q.archiveMealPlanOptionVoteStmt != nil {
		if cerr := q.archiveMealPlanOptionVoteStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing archiveMealPlanOptionVoteStmt: %w", cerr)
		}
	}
	if q.archiveRecipeStmt != nil {
		if cerr := q.archiveRecipeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing archiveRecipeStmt: %w", cerr)
		}
	}
	if q.archiveRecipeMediaStmt != nil {
		if cerr := q.archiveRecipeMediaStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing archiveRecipeMediaStmt: %w", cerr)
		}
	}
	if q.archiveRecipePrepTaskStmt != nil {
		if cerr := q.archiveRecipePrepTaskStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing archiveRecipePrepTaskStmt: %w", cerr)
		}
	}
	if q.archiveRecipeStepStmt != nil {
		if cerr := q.archiveRecipeStepStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing archiveRecipeStepStmt: %w", cerr)
		}
	}
	if q.archiveRecipeStepIngredientStmt != nil {
		if cerr := q.archiveRecipeStepIngredientStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing archiveRecipeStepIngredientStmt: %w", cerr)
		}
	}
	if q.archiveRecipeStepInstrumentStmt != nil {
		if cerr := q.archiveRecipeStepInstrumentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing archiveRecipeStepInstrumentStmt: %w", cerr)
		}
	}
	if q.archiveRecipeStepProductStmt != nil {
		if cerr := q.archiveRecipeStepProductStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing archiveRecipeStepProductStmt: %w", cerr)
		}
	}
	if q.archiveUserStmt != nil {
		if cerr := q.archiveUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing archiveUserStmt: %w", cerr)
		}
	}
	if q.archiveValidIngredientStmt != nil {
		if cerr := q.archiveValidIngredientStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing archiveValidIngredientStmt: %w", cerr)
		}
	}
	if q.archiveValidIngredientMeasurementUnitStmt != nil {
		if cerr := q.archiveValidIngredientMeasurementUnitStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing archiveValidIngredientMeasurementUnitStmt: %w", cerr)
		}
	}
	if q.archiveValidIngredientPreparationStmt != nil {
		if cerr := q.archiveValidIngredientPreparationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing archiveValidIngredientPreparationStmt: %w", cerr)
		}
	}
	if q.archiveValidInstrumentStmt != nil {
		if cerr := q.archiveValidInstrumentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing archiveValidInstrumentStmt: %w", cerr)
		}
	}
	if q.archiveValidMeasurementConversionStmt != nil {
		if cerr := q.archiveValidMeasurementConversionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing archiveValidMeasurementConversionStmt: %w", cerr)
		}
	}
	if q.archiveValidMeasurementUnitStmt != nil {
		if cerr := q.archiveValidMeasurementUnitStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing archiveValidMeasurementUnitStmt: %w", cerr)
		}
	}
	if q.archiveValidPreparationStmt != nil {
		if cerr := q.archiveValidPreparationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing archiveValidPreparationStmt: %w", cerr)
		}
	}
	if q.archiveValidPreparationInstrumentStmt != nil {
		if cerr := q.archiveValidPreparationInstrumentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing archiveValidPreparationInstrumentStmt: %w", cerr)
		}
	}
	if q.archiveWebhookStmt != nil {
		if cerr := q.archiveWebhookStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing archiveWebhookStmt: %w", cerr)
		}
	}
	if q.attachHouseholdInvitationsToUserStmt != nil {
		if cerr := q.attachHouseholdInvitationsToUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing attachHouseholdInvitationsToUserStmt: %w", cerr)
		}
	}
	if q.changeMealPlanTaskStatusStmt != nil {
		if cerr := q.changeMealPlanTaskStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing changeMealPlanTaskStatusStmt: %w", cerr)
		}
	}
	if q.createAPIClientStmt != nil {
		if cerr := q.createAPIClientStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAPIClientStmt: %w", cerr)
		}
	}
	if q.createHouseholdStmt != nil {
		if cerr := q.createHouseholdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createHouseholdStmt: %w", cerr)
		}
	}
	if q.createHouseholdInvitationStmt != nil {
		if cerr := q.createHouseholdInvitationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createHouseholdInvitationStmt: %w", cerr)
		}
	}
	if q.createHouseholdUserMembershipStmt != nil {
		if cerr := q.createHouseholdUserMembershipStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createHouseholdUserMembershipStmt: %w", cerr)
		}
	}
	if q.createHouseholdUserMembershipForNewUserStmt != nil {
		if cerr := q.createHouseholdUserMembershipForNewUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createHouseholdUserMembershipForNewUserStmt: %w", cerr)
		}
	}
	if q.createMealStmt != nil {
		if cerr := q.createMealStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createMealStmt: %w", cerr)
		}
	}
	if q.createMealPlanStmt != nil {
		if cerr := q.createMealPlanStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createMealPlanStmt: %w", cerr)
		}
	}
	if q.createMealPlanEventStmt != nil {
		if cerr := q.createMealPlanEventStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createMealPlanEventStmt: %w", cerr)
		}
	}
	if q.createMealPlanGroceryListItemStmt != nil {
		if cerr := q.createMealPlanGroceryListItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createMealPlanGroceryListItemStmt: %w", cerr)
		}
	}
	if q.createMealPlanOptionStmt != nil {
		if cerr := q.createMealPlanOptionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createMealPlanOptionStmt: %w", cerr)
		}
	}
	if q.createMealPlanOptionVoteStmt != nil {
		if cerr := q.createMealPlanOptionVoteStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createMealPlanOptionVoteStmt: %w", cerr)
		}
	}
	if q.createMealPlanTaskStmt != nil {
		if cerr := q.createMealPlanTaskStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createMealPlanTaskStmt: %w", cerr)
		}
	}
	if q.createMealRecipeStmt != nil {
		if cerr := q.createMealRecipeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createMealRecipeStmt: %w", cerr)
		}
	}
	if q.createPasswordResetTokenStmt != nil {
		if cerr := q.createPasswordResetTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPasswordResetTokenStmt: %w", cerr)
		}
	}
	if q.createRecipeStmt != nil {
		if cerr := q.createRecipeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRecipeStmt: %w", cerr)
		}
	}
	if q.createRecipeMediaStmt != nil {
		if cerr := q.createRecipeMediaStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRecipeMediaStmt: %w", cerr)
		}
	}
	if q.createRecipePrepTaskStmt != nil {
		if cerr := q.createRecipePrepTaskStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRecipePrepTaskStmt: %w", cerr)
		}
	}
	if q.createRecipePrepTaskStepStmt != nil {
		if cerr := q.createRecipePrepTaskStepStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRecipePrepTaskStepStmt: %w", cerr)
		}
	}
	if q.createRecipeStepStmt != nil {
		if cerr := q.createRecipeStepStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRecipeStepStmt: %w", cerr)
		}
	}
	if q.createRecipeStepIngredientStmt != nil {
		if cerr := q.createRecipeStepIngredientStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRecipeStepIngredientStmt: %w", cerr)
		}
	}
	if q.createRecipeStepInstrumentStmt != nil {
		if cerr := q.createRecipeStepInstrumentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRecipeStepInstrumentStmt: %w", cerr)
		}
	}
	if q.createRecipeStepProductStmt != nil {
		if cerr := q.createRecipeStepProductStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRecipeStepProductStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.createValidIngredientStmt != nil {
		if cerr := q.createValidIngredientStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createValidIngredientStmt: %w", cerr)
		}
	}
	if q.createValidIngredientMeasurementUnitStmt != nil {
		if cerr := q.createValidIngredientMeasurementUnitStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createValidIngredientMeasurementUnitStmt: %w", cerr)
		}
	}
	if q.createValidIngredientPreparationStmt != nil {
		if cerr := q.createValidIngredientPreparationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createValidIngredientPreparationStmt: %w", cerr)
		}
	}
	if q.createValidInstrumentStmt != nil {
		if cerr := q.createValidInstrumentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createValidInstrumentStmt: %w", cerr)
		}
	}
	if q.createValidMeasurementConversionStmt != nil {
		if cerr := q.createValidMeasurementConversionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createValidMeasurementConversionStmt: %w", cerr)
		}
	}
	if q.createValidMeasurementUnitStmt != nil {
		if cerr := q.createValidMeasurementUnitStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createValidMeasurementUnitStmt: %w", cerr)
		}
	}
	if q.createValidPreparationStmt != nil {
		if cerr := q.createValidPreparationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createValidPreparationStmt: %w", cerr)
		}
	}
	if q.createValidPreparationInstrumentStmt != nil {
		if cerr := q.createValidPreparationInstrumentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createValidPreparationInstrumentStmt: %w", cerr)
		}
	}
	if q.createWebhookStmt != nil {
		if cerr := q.createWebhookStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createWebhookStmt: %w", cerr)
		}
	}
	if q.createWebhookTriggerEventStmt != nil {
		if cerr := q.createWebhookTriggerEventStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createWebhookTriggerEventStmt: %w", cerr)
		}
	}
	if q.finalizeMealPlanStmt != nil {
		if cerr := q.finalizeMealPlanStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing finalizeMealPlanStmt: %w", cerr)
		}
	}
	if q.finalizeMealPlanOptionStmt != nil {
		if cerr := q.finalizeMealPlanOptionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing finalizeMealPlanOptionStmt: %w", cerr)
		}
	}
	if q.getAPIClientByClientIDStmt != nil {
		if cerr := q.getAPIClientByClientIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAPIClientByClientIDStmt: %w", cerr)
		}
	}
	if q.getAPIClientByIDStmt != nil {
		if cerr := q.getAPIClientByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAPIClientByIDStmt: %w", cerr)
		}
	}
	if q.getAdminUserByUsernameStmt != nil {
		if cerr := q.getAdminUserByUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAdminUserByUsernameStmt: %w", cerr)
		}
	}
	if q.getDefaultHouseholdIDForUserStmt != nil {
		if cerr := q.getDefaultHouseholdIDForUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDefaultHouseholdIDForUserStmt: %w", cerr)
		}
	}
	if q.getExpiredAndUnresolvedMealPlansStmt != nil {
		if cerr := q.getExpiredAndUnresolvedMealPlansStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getExpiredAndUnresolvedMealPlansStmt: %w", cerr)
		}
	}
	if q.getFinalizedMealPlansForPlanningStmt != nil {
		if cerr := q.getFinalizedMealPlansForPlanningStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFinalizedMealPlansForPlanningStmt: %w", cerr)
		}
	}
	if q.getFinalizedMealPlansWithoutInitializedGroceryListsStmt != nil {
		if cerr := q.getFinalizedMealPlansWithoutInitializedGroceryListsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFinalizedMealPlansWithoutInitializedGroceryListsStmt: %w", cerr)
		}
	}
	if q.getHouseholdByIDWithMembershipsStmt != nil {
		if cerr := q.getHouseholdByIDWithMembershipsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHouseholdByIDWithMembershipsStmt: %w", cerr)
		}
	}
	if q.getHouseholdInvitationByEmailAndTokenStmt != nil {
		if cerr := q.getHouseholdInvitationByEmailAndTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHouseholdInvitationByEmailAndTokenStmt: %w", cerr)
		}
	}
	if q.getHouseholdInvitationByHouseholdAndIDStmt != nil {
		if cerr := q.getHouseholdInvitationByHouseholdAndIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHouseholdInvitationByHouseholdAndIDStmt: %w", cerr)
		}
	}
	if q.getHouseholdInvitationByTokenAndIDStmt != nil {
		if cerr := q.getHouseholdInvitationByTokenAndIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHouseholdInvitationByTokenAndIDStmt: %w", cerr)
		}
	}
	if q.getHouseholdUserMembershipsForUserStmt != nil {
		if cerr := q.getHouseholdUserMembershipsForUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHouseholdUserMembershipsForUserStmt: %w", cerr)
		}
	}
	if q.getMealStmt != nil {
		if cerr := q.getMealStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMealStmt: %w", cerr)
		}
	}
	if q.getMealPlanStmt != nil {
		if cerr := q.getMealPlanStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMealPlanStmt: %w", cerr)
		}
	}
	if q.getMealPlanEventStmt != nil {
		if cerr := q.getMealPlanEventStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMealPlanEventStmt: %w", cerr)
		}
	}
	if q.getMealPlanEventsForMealPlanStmt != nil {
		if cerr := q.getMealPlanEventsForMealPlanStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMealPlanEventsForMealPlanStmt: %w", cerr)
		}
	}
	if q.getMealPlanGroceryListItemStmt != nil {
		if cerr := q.getMealPlanGroceryListItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMealPlanGroceryListItemStmt: %w", cerr)
		}
	}
	if q.getMealPlanGroceryListItemsForMealPlanStmt != nil {
		if cerr := q.getMealPlanGroceryListItemsForMealPlanStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMealPlanGroceryListItemsForMealPlanStmt: %w", cerr)
		}
	}
	if q.getMealPlanOptionStmt != nil {
		if cerr := q.getMealPlanOptionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMealPlanOptionStmt: %w", cerr)
		}
	}
	if q.getMealPlanOptionByIDStmt != nil {
		if cerr := q.getMealPlanOptionByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMealPlanOptionByIDStmt: %w", cerr)
		}
	}
	if q.getMealPlanOptionVoteStmt != nil {
		if cerr := q.getMealPlanOptionVoteStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMealPlanOptionVoteStmt: %w", cerr)
		}
	}
	if q.getMealPlanOptionVotesForMealPlanOptionStmt != nil {
		if cerr := q.getMealPlanOptionVotesForMealPlanOptionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMealPlanOptionVotesForMealPlanOptionStmt: %w", cerr)
		}
	}
	if q.getMealPlanOptionsForMealPlanEventStmt != nil {
		if cerr := q.getMealPlanOptionsForMealPlanEventStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMealPlanOptionsForMealPlanEventStmt: %w", cerr)
		}
	}
	if q.getMealPlanPastVotingDeadlineStmt != nil {
		if cerr := q.getMealPlanPastVotingDeadlineStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMealPlanPastVotingDeadlineStmt: %w", cerr)
		}
	}
	if q.getMealPlanTaskStmt != nil {
		if cerr := q.getMealPlanTaskStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMealPlanTaskStmt: %w", cerr)
		}
	}
	if q.getPasswordResetTokenStmt != nil {
		if cerr := q.getPasswordResetTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPasswordResetTokenStmt: %w", cerr)
		}
	}
	if q.getRandomValidIngredientStmt != nil {
		if cerr := q.getRandomValidIngredientStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRandomValidIngredientStmt: %w", cerr)
		}
	}
	if q.getRandomValidInstrumentStmt != nil {
		if cerr := q.getRandomValidInstrumentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRandomValidInstrumentStmt: %w", cerr)
		}
	}
	if q.getRandomValidMeasurementUnitStmt != nil {
		if cerr := q.getRandomValidMeasurementUnitStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRandomValidMeasurementUnitStmt: %w", cerr)
		}
	}
	if q.getRandomValidPreparationStmt != nil {
		if cerr := q.getRandomValidPreparationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRandomValidPreparationStmt: %w", cerr)
		}
	}
	if q.getRecipeByIDStmt != nil {
		if cerr := q.getRecipeByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRecipeByIDStmt: %w", cerr)
		}
	}
	if q.getRecipeByIDAndAuthorStmt != nil {
		if cerr := q.getRecipeByIDAndAuthorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRecipeByIDAndAuthorStmt: %w", cerr)
		}
	}
	if q.getRecipeIDsForMealStmt != nil {
		if cerr := q.getRecipeIDsForMealStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRecipeIDsForMealStmt: %w", cerr)
		}
	}
	if q.getRecipeMediaStmt != nil {
		if cerr := q.getRecipeMediaStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRecipeMediaStmt: %w", cerr)
		}
	}
	if q.getRecipeMediaForRecipeStmt != nil {
		if cerr := q.getRecipeMediaForRecipeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRecipeMediaForRecipeStmt: %w", cerr)
		}
	}
	if q.getRecipeMediaForRecipeStepStmt != nil {
		if cerr := q.getRecipeMediaForRecipeStepStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRecipeMediaForRecipeStepStmt: %w", cerr)
		}
	}
	if q.getRecipePrepTaskStmt != nil {
		if cerr := q.getRecipePrepTaskStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRecipePrepTaskStmt: %w", cerr)
		}
	}
	if q.getRecipePrepTasksForRecipeStmt != nil {
		if cerr := q.getRecipePrepTasksForRecipeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRecipePrepTasksForRecipeStmt: %w", cerr)
		}
	}
	if q.getRecipeStepStmt != nil {
		if cerr := q.getRecipeStepStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRecipeStepStmt: %w", cerr)
		}
	}
	if q.getRecipeStepByIDStmt != nil {
		if cerr := q.getRecipeStepByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRecipeStepByIDStmt: %w", cerr)
		}
	}
	if q.getRecipeStepIngredientStmt != nil {
		if cerr := q.getRecipeStepIngredientStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRecipeStepIngredientStmt: %w", cerr)
		}
	}
	if q.getRecipeStepIngredientForRecipeStmt != nil {
		if cerr := q.getRecipeStepIngredientForRecipeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRecipeStepIngredientForRecipeStmt: %w", cerr)
		}
	}
	if q.getRecipeStepInstrumentStmt != nil {
		if cerr := q.getRecipeStepInstrumentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRecipeStepInstrumentStmt: %w", cerr)
		}
	}
	if q.getRecipeStepInstrumentsForRecipeStmt != nil {
		if cerr := q.getRecipeStepInstrumentsForRecipeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRecipeStepInstrumentsForRecipeStmt: %w", cerr)
		}
	}
	if q.getRecipeStepProductStmt != nil {
		if cerr := q.getRecipeStepProductStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRecipeStepProductStmt: %w", cerr)
		}
	}
	if q.getRecipeStepProductsForRecipeStmt != nil {
		if cerr := q.getRecipeStepProductsForRecipeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRecipeStepProductsForRecipeStmt: %w", cerr)
		}
	}
	if q.getUserByEmailAddressStmt != nil {
		if cerr := q.getUserByEmailAddressStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailAddressStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.getUserByUsernameStmt != nil {
		if cerr := q.getUserByUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByUsernameStmt: %w", cerr)
		}
	}
	if q.getUserWithVerifiedTwoFactorSecretStmt != nil {
		if cerr := q.getUserWithVerifiedTwoFactorSecretStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserWithVerifiedTwoFactorSecretStmt: %w", cerr)
		}
	}
	if q.getValidIngredientStmt != nil {
		if cerr := q.getValidIngredientStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getValidIngredientStmt: %w", cerr)
		}
	}
	if q.getValidIngredientMeasurementUnitStmt != nil {
		if cerr := q.getValidIngredientMeasurementUnitStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getValidIngredientMeasurementUnitStmt: %w", cerr)
		}
	}
	if q.getValidIngredientPreparationStmt != nil {
		if cerr := q.getValidIngredientPreparationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getValidIngredientPreparationStmt: %w", cerr)
		}
	}
	if q.getValidInstrumentStmt != nil {
		if cerr := q.getValidInstrumentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getValidInstrumentStmt: %w", cerr)
		}
	}
	if q.getValidInstrumentsStmt != nil {
		if cerr := q.getValidInstrumentsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getValidInstrumentsStmt: %w", cerr)
		}
	}
	if q.getValidMeasurementConversionStmt != nil {
		if cerr := q.getValidMeasurementConversionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getValidMeasurementConversionStmt: %w", cerr)
		}
	}
	if q.getValidMeasurementConversionsFromMeasurementUnitStmt != nil {
		if cerr := q.getValidMeasurementConversionsFromMeasurementUnitStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getValidMeasurementConversionsFromMeasurementUnitStmt: %w", cerr)
		}
	}
	if q.getValidMeasurementConversionsToMeasurementUnitStmt != nil {
		if cerr := q.getValidMeasurementConversionsToMeasurementUnitStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getValidMeasurementConversionsToMeasurementUnitStmt: %w", cerr)
		}
	}
	if q.getValidMeasurementUnitStmt != nil {
		if cerr := q.getValidMeasurementUnitStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getValidMeasurementUnitStmt: %w", cerr)
		}
	}
	if q.getValidPreparationStmt != nil {
		if cerr := q.getValidPreparationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getValidPreparationStmt: %w", cerr)
		}
	}
	if q.getValidPreparationInstrumentStmt != nil {
		if cerr := q.getValidPreparationInstrumentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getValidPreparationInstrumentStmt: %w", cerr)
		}
	}
	if q.getWebhookStmt != nil {
		if cerr := q.getWebhookStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWebhookStmt: %w", cerr)
		}
	}
	if q.getWebhookTriggerEventsForWebhookStmt != nil {
		if cerr := q.getWebhookTriggerEventsForWebhookStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWebhookTriggerEventsForWebhookStmt: %w", cerr)
		}
	}
	if q.getWebhooksStmt != nil {
		if cerr := q.getWebhooksStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWebhooksStmt: %w", cerr)
		}
	}
	if q.householdInvitationExistsStmt != nil {
		if cerr := q.householdInvitationExistsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing householdInvitationExistsStmt: %w", cerr)
		}
	}
	if q.listIncompleteMealPlanTaskByMealPlanOptionStmt != nil {
		if cerr := q.listIncompleteMealPlanTaskByMealPlanOptionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listIncompleteMealPlanTaskByMealPlanOptionStmt: %w", cerr)
		}
	}
	if q.listMealPlanTasksForMealPlanStmt != nil {
		if cerr := q.listMealPlanTasksForMealPlanStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listMealPlanTasksForMealPlanStmt: %w", cerr)
		}
	}
	if q.markHouseholdUserMembershipAsDefaultForUserStmt != nil {
		if cerr := q.markHouseholdUserMembershipAsDefaultForUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing markHouseholdUserMembershipAsDefaultForUserStmt: %w", cerr)
		}
	}
	if q.markMealPlanAsHavingGroceryListInitializedStmt != nil {
		if cerr := q.markMealPlanAsHavingGroceryListInitializedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing markMealPlanAsHavingGroceryListInitializedStmt: %w", cerr)
		}
	}
	if q.markMealPlanTasksAsCreatedStmt != nil {
		if cerr := q.markMealPlanTasksAsCreatedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing markMealPlanTasksAsCreatedStmt: %w", cerr)
		}
	}
	if q.markUserTwoFactorSecretAsVerifiedStmt != nil {
		if cerr := q.markUserTwoFactorSecretAsVerifiedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing markUserTwoFactorSecretAsVerifiedStmt: %w", cerr)
		}
	}
	if q.mealExistsStmt != nil {
		if cerr := q.mealExistsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing mealExistsStmt: %w", cerr)
		}
	}
	if q.mealPlanEventExistsStmt != nil {
		if cerr := q.mealPlanEventExistsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing mealPlanEventExistsStmt: %w", cerr)
		}
	}
	if q.mealPlanExistsStmt != nil {
		if cerr := q.mealPlanExistsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing mealPlanExistsStmt: %w", cerr)
		}
	}
	if q.mealPlanGroceryListItemExistsStmt != nil {
		if cerr := q.mealPlanGroceryListItemExistsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing mealPlanGroceryListItemExistsStmt: %w", cerr)
		}
	}
	if q.mealPlanOptionExistsStmt != nil {
		if cerr := q.mealPlanOptionExistsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing mealPlanOptionExistsStmt: %w", cerr)
		}
	}
	if q.mealPlanOptionVoteExistsStmt != nil {
		if cerr := q.mealPlanOptionVoteExistsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing mealPlanOptionVoteExistsStmt: %w", cerr)
		}
	}
	if q.mealPlanTaskExistsStmt != nil {
		if cerr := q.mealPlanTaskExistsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing mealPlanTaskExistsStmt: %w", cerr)
		}
	}
	if q.modifyHouseholdUserMembershipPermissionsStmt != nil {
		if cerr := q.modifyHouseholdUserMembershipPermissionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing modifyHouseholdUserMembershipPermissionsStmt: %w", cerr)
		}
	}
	if q.recipeExistsStmt != nil {
		if cerr := q.recipeExistsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing recipeExistsStmt: %w", cerr)
		}
	}
	if q.recipeMediaExistsStmt != nil {
		if cerr := q.recipeMediaExistsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing recipeMediaExistsStmt: %w", cerr)
		}
	}
	if q.recipePrepTaskExistsStmt != nil {
		if cerr := q.recipePrepTaskExistsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing recipePrepTaskExistsStmt: %w", cerr)
		}
	}
	if q.recipeStepExistsStmt != nil {
		if cerr := q.recipeStepExistsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing recipeStepExistsStmt: %w", cerr)
		}
	}
	if q.recipeStepIngredientExistsStmt != nil {
		if cerr := q.recipeStepIngredientExistsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing recipeStepIngredientExistsStmt: %w", cerr)
		}
	}
	if q.recipeStepInstrumentExistsStmt != nil {
		if cerr := q.recipeStepInstrumentExistsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing recipeStepInstrumentExistsStmt: %w", cerr)
		}
	}
	if q.recipeStepProductExistsStmt != nil {
		if cerr := q.recipeStepProductExistsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing recipeStepProductExistsStmt: %w", cerr)
		}
	}
	if q.redeemPasswordResetTokenStmt != nil {
		if cerr := q.redeemPasswordResetTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing redeemPasswordResetTokenStmt: %w", cerr)
		}
	}
	if q.removeUserFromHouseholdStmt != nil {
		if cerr := q.removeUserFromHouseholdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removeUserFromHouseholdStmt: %w", cerr)
		}
	}
	if q.searchForUserByUsernameStmt != nil {
		if cerr := q.searchForUserByUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchForUserByUsernameStmt: %w", cerr)
		}
	}
	if q.searchForValidIngredientStmt != nil {
		if cerr := q.searchForValidIngredientStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchForValidIngredientStmt: %w", cerr)
		}
	}
	if q.searchForValidInstrumentsStmt != nil {
		if cerr := q.searchForValidInstrumentsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchForValidInstrumentsStmt: %w", cerr)
		}
	}
	if q.searchForValidMeasurementUnitsStmt != nil {
		if cerr := q.searchForValidMeasurementUnitsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchForValidMeasurementUnitsStmt: %w", cerr)
		}
	}
	if q.searchForValidPreparationsStmt != nil {
		if cerr := q.searchForValidPreparationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchForValidPreparationsStmt: %w", cerr)
		}
	}
	if q.setHouseholdInvitationStatusStmt != nil {
		if cerr := q.setHouseholdInvitationStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setHouseholdInvitationStatusStmt: %w", cerr)
		}
	}
	if q.transferHouseholdOwnershipStmt != nil {
		if cerr := q.transferHouseholdOwnershipStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing transferHouseholdOwnershipStmt: %w", cerr)
		}
	}
	if q.transferHouseholdUserMembershipToNewUserStmt != nil {
		if cerr := q.transferHouseholdUserMembershipToNewUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing transferHouseholdUserMembershipToNewUserStmt: %w", cerr)
		}
	}
	if q.updateHouseholdStmt != nil {
		if cerr := q.updateHouseholdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateHouseholdStmt: %w", cerr)
		}
	}
	if q.updateMealPlanStmt != nil {
		if cerr := q.updateMealPlanStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateMealPlanStmt: %w", cerr)
		}
	}
	if q.updateMealPlanEventStmt != nil {
		if cerr := q.updateMealPlanEventStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateMealPlanEventStmt: %w", cerr)
		}
	}
	if q.updateMealPlanGroceryListItemStmt != nil {
		if cerr := q.updateMealPlanGroceryListItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateMealPlanGroceryListItemStmt: %w", cerr)
		}
	}
	if q.updateMealPlanOptionStmt != nil {
		if cerr := q.updateMealPlanOptionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateMealPlanOptionStmt: %w", cerr)
		}
	}
	if q.updateMealPlanOptionVoteStmt != nil {
		if cerr := q.updateMealPlanOptionVoteStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateMealPlanOptionVoteStmt: %w", cerr)
		}
	}
	if q.updateRecipeStmt != nil {
		if cerr := q.updateRecipeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRecipeStmt: %w", cerr)
		}
	}
	if q.updateRecipeMediaStmt != nil {
		if cerr := q.updateRecipeMediaStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRecipeMediaStmt: %w", cerr)
		}
	}
	if q.updateRecipePrepTaskStmt != nil {
		if cerr := q.updateRecipePrepTaskStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRecipePrepTaskStmt: %w", cerr)
		}
	}
	if q.updateRecipeStepStmt != nil {
		if cerr := q.updateRecipeStepStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRecipeStepStmt: %w", cerr)
		}
	}
	if q.updateRecipeStepIngredientStmt != nil {
		if cerr := q.updateRecipeStepIngredientStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRecipeStepIngredientStmt: %w", cerr)
		}
	}
	if q.updateRecipeStepInstrumentStmt != nil {
		if cerr := q.updateRecipeStepInstrumentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRecipeStepInstrumentStmt: %w", cerr)
		}
	}
	if q.updateRecipeStepProductStmt != nil {
		if cerr := q.updateRecipeStepProductStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRecipeStepProductStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	if q.updateUserPasswordStmt != nil {
		if cerr := q.updateUserPasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserPasswordStmt: %w", cerr)
		}
	}
	if q.updateUserTwoFactorSecretStmt != nil {
		if cerr := q.updateUserTwoFactorSecretStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserTwoFactorSecretStmt: %w", cerr)
		}
	}
	if q.updateValidIngredientStmt != nil {
		if cerr := q.updateValidIngredientStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateValidIngredientStmt: %w", cerr)
		}
	}
	if q.updateValidIngredientMeasurementUnitStmt != nil {
		if cerr := q.updateValidIngredientMeasurementUnitStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateValidIngredientMeasurementUnitStmt: %w", cerr)
		}
	}
	if q.updateValidIngredientPreparationStmt != nil {
		if cerr := q.updateValidIngredientPreparationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateValidIngredientPreparationStmt: %w", cerr)
		}
	}
	if q.updateValidInstrumentStmt != nil {
		if cerr := q.updateValidInstrumentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateValidInstrumentStmt: %w", cerr)
		}
	}
	if q.updateValidMeasurementConversionStmt != nil {
		if cerr := q.updateValidMeasurementConversionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateValidMeasurementConversionStmt: %w", cerr)
		}
	}
	if q.updateValidMeasurementUnitStmt != nil {
		if cerr := q.updateValidMeasurementUnitStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateValidMeasurementUnitStmt: %w", cerr)
		}
	}
	if q.updateValidPreparationStmt != nil {
		if cerr := q.updateValidPreparationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateValidPreparationStmt: %w", cerr)
		}
	}
	if q.updateValidPreparationInstrumentStmt != nil {
		if cerr := q.updateValidPreparationInstrumentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateValidPreparationInstrumentStmt: %w", cerr)
		}
	}
	if q.userExistsWithStatusStmt != nil {
		if cerr := q.userExistsWithStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing userExistsWithStatusStmt: %w", cerr)
		}
	}
	if q.userIsMemberOfHouseholdStmt != nil {
		if cerr := q.userIsMemberOfHouseholdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing userIsMemberOfHouseholdStmt: %w", cerr)
		}
	}
	if q.validIngredientExistsStmt != nil {
		if cerr := q.validIngredientExistsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing validIngredientExistsStmt: %w", cerr)
		}
	}
	if q.validIngredientMeasurementUnitExistsStmt != nil {
		if cerr := q.validIngredientMeasurementUnitExistsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing validIngredientMeasurementUnitExistsStmt: %w", cerr)
		}
	}
	if q.validIngredientPreparationExistsStmt != nil {
		if cerr := q.validIngredientPreparationExistsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing validIngredientPreparationExistsStmt: %w", cerr)
		}
	}
	if q.validInstrumentExistsStmt != nil {
		if cerr := q.validInstrumentExistsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing validInstrumentExistsStmt: %w", cerr)
		}
	}
	if q.validMeasurementConversionExistsStmt != nil {
		if cerr := q.validMeasurementConversionExistsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing validMeasurementConversionExistsStmt: %w", cerr)
		}
	}
	if q.validMeasurementUnitExistsStmt != nil {
		if cerr := q.validMeasurementUnitExistsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing validMeasurementUnitExistsStmt: %w", cerr)
		}
	}
	if q.validPreparationExistsStmt != nil {
		if cerr := q.validPreparationExistsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing validPreparationExistsStmt: %w", cerr)
		}
	}
	if q.validPreparationInstrumentExistsStmt != nil {
		if cerr := q.validPreparationInstrumentExistsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing validPreparationInstrumentExistsStmt: %w", cerr)
		}
	}
	if q.webhookExistsStmt != nil {
		if cerr := q.webhookExistsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing webhookExistsStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                                      DBTX
	tx                                                      *sql.Tx
	archiveAPIClientStmt                                    *sql.Stmt
	archiveHouseholdStmt                                    *sql.Stmt
	archiveHouseholdUserMembershipForUserStmt               *sql.Stmt
	archiveMealStmt                                         *sql.Stmt
	archiveMealPlanStmt                                     *sql.Stmt
	archiveMealPlanEventStmt                                *sql.Stmt
	archiveMealPlanGroceryListItemStmt                      *sql.Stmt
	archiveMealPlanOptionStmt                               *sql.Stmt
	archiveMealPlanOptionVoteStmt                           *sql.Stmt
	archiveRecipeStmt                                       *sql.Stmt
	archiveRecipeMediaStmt                                  *sql.Stmt
	archiveRecipePrepTaskStmt                               *sql.Stmt
	archiveRecipeStepStmt                                   *sql.Stmt
	archiveRecipeStepIngredientStmt                         *sql.Stmt
	archiveRecipeStepInstrumentStmt                         *sql.Stmt
	archiveRecipeStepProductStmt                            *sql.Stmt
	archiveUserStmt                                         *sql.Stmt
	archiveValidIngredientStmt                              *sql.Stmt
	archiveValidIngredientMeasurementUnitStmt               *sql.Stmt
	archiveValidIngredientPreparationStmt                   *sql.Stmt
	archiveValidInstrumentStmt                              *sql.Stmt
	archiveValidMeasurementConversionStmt                   *sql.Stmt
	archiveValidMeasurementUnitStmt                         *sql.Stmt
	archiveValidPreparationStmt                             *sql.Stmt
	archiveValidPreparationInstrumentStmt                   *sql.Stmt
	archiveWebhookStmt                                      *sql.Stmt
	attachHouseholdInvitationsToUserStmt                    *sql.Stmt
	changeMealPlanTaskStatusStmt                            *sql.Stmt
	createAPIClientStmt                                     *sql.Stmt
	createHouseholdStmt                                     *sql.Stmt
	createHouseholdInvitationStmt                           *sql.Stmt
	createHouseholdUserMembershipStmt                       *sql.Stmt
	createHouseholdUserMembershipForNewUserStmt             *sql.Stmt
	createMealStmt                                          *sql.Stmt
	createMealPlanStmt                                      *sql.Stmt
	createMealPlanEventStmt                                 *sql.Stmt
	createMealPlanGroceryListItemStmt                       *sql.Stmt
	createMealPlanOptionStmt                                *sql.Stmt
	createMealPlanOptionVoteStmt                            *sql.Stmt
	createMealPlanTaskStmt                                  *sql.Stmt
	createMealRecipeStmt                                    *sql.Stmt
	createPasswordResetTokenStmt                            *sql.Stmt
	createRecipeStmt                                        *sql.Stmt
	createRecipeMediaStmt                                   *sql.Stmt
	createRecipePrepTaskStmt                                *sql.Stmt
	createRecipePrepTaskStepStmt                            *sql.Stmt
	createRecipeStepStmt                                    *sql.Stmt
	createRecipeStepIngredientStmt                          *sql.Stmt
	createRecipeStepInstrumentStmt                          *sql.Stmt
	createRecipeStepProductStmt                             *sql.Stmt
	createUserStmt                                          *sql.Stmt
	createValidIngredientStmt                               *sql.Stmt
	createValidIngredientMeasurementUnitStmt                *sql.Stmt
	createValidIngredientPreparationStmt                    *sql.Stmt
	createValidInstrumentStmt                               *sql.Stmt
	createValidMeasurementConversionStmt                    *sql.Stmt
	createValidMeasurementUnitStmt                          *sql.Stmt
	createValidPreparationStmt                              *sql.Stmt
	createValidPreparationInstrumentStmt                    *sql.Stmt
	createWebhookStmt                                       *sql.Stmt
	createWebhookTriggerEventStmt                           *sql.Stmt
	finalizeMealPlanStmt                                    *sql.Stmt
	finalizeMealPlanOptionStmt                              *sql.Stmt
	getAPIClientByClientIDStmt                              *sql.Stmt
	getAPIClientByIDStmt                                    *sql.Stmt
	getAdminUserByUsernameStmt                              *sql.Stmt
	getDefaultHouseholdIDForUserStmt                        *sql.Stmt
	getExpiredAndUnresolvedMealPlansStmt                    *sql.Stmt
	getFinalizedMealPlansForPlanningStmt                    *sql.Stmt
	getFinalizedMealPlansWithoutInitializedGroceryListsStmt *sql.Stmt
	getHouseholdByIDWithMembershipsStmt                     *sql.Stmt
	getHouseholdInvitationByEmailAndTokenStmt               *sql.Stmt
	getHouseholdInvitationByHouseholdAndIDStmt              *sql.Stmt
	getHouseholdInvitationByTokenAndIDStmt                  *sql.Stmt
	getHouseholdUserMembershipsForUserStmt                  *sql.Stmt
	getMealStmt                                             *sql.Stmt
	getMealPlanStmt                                         *sql.Stmt
	getMealPlanEventStmt                                    *sql.Stmt
	getMealPlanEventsForMealPlanStmt                        *sql.Stmt
	getMealPlanGroceryListItemStmt                          *sql.Stmt
	getMealPlanGroceryListItemsForMealPlanStmt              *sql.Stmt
	getMealPlanOptionStmt                                   *sql.Stmt
	getMealPlanOptionByIDStmt                               *sql.Stmt
	getMealPlanOptionVoteStmt                               *sql.Stmt
	getMealPlanOptionVotesForMealPlanOptionStmt             *sql.Stmt
	getMealPlanOptionsForMealPlanEventStmt                  *sql.Stmt
	getMealPlanPastVotingDeadlineStmt                       *sql.Stmt
	getMealPlanTaskStmt                                     *sql.Stmt
	getPasswordResetTokenStmt                               *sql.Stmt
	getRandomValidIngredientStmt                            *sql.Stmt
	getRandomValidInstrumentStmt                            *sql.Stmt
	getRandomValidMeasurementUnitStmt                       *sql.Stmt
	getRandomValidPreparationStmt                           *sql.Stmt
	getRecipeByIDStmt                                       *sql.Stmt
	getRecipeByIDAndAuthorStmt                              *sql.Stmt
	getRecipeIDsForMealStmt                                 *sql.Stmt
	getRecipeMediaStmt                                      *sql.Stmt
	getRecipeMediaForRecipeStmt                             *sql.Stmt
	getRecipeMediaForRecipeStepStmt                         *sql.Stmt
	getRecipePrepTaskStmt                                   *sql.Stmt
	getRecipePrepTasksForRecipeStmt                         *sql.Stmt
	getRecipeStepStmt                                       *sql.Stmt
	getRecipeStepByIDStmt                                   *sql.Stmt
	getRecipeStepIngredientStmt                             *sql.Stmt
	getRecipeStepIngredientForRecipeStmt                    *sql.Stmt
	getRecipeStepInstrumentStmt                             *sql.Stmt
	getRecipeStepInstrumentsForRecipeStmt                   *sql.Stmt
	getRecipeStepProductStmt                                *sql.Stmt
	getRecipeStepProductsForRecipeStmt                      *sql.Stmt
	getUserByEmailAddressStmt                               *sql.Stmt
	getUserByIDStmt                                         *sql.Stmt
	getUserByUsernameStmt                                   *sql.Stmt
	getUserWithVerifiedTwoFactorSecretStmt                  *sql.Stmt
	getValidIngredientStmt                                  *sql.Stmt
	getValidIngredientMeasurementUnitStmt                   *sql.Stmt
	getValidIngredientPreparationStmt                       *sql.Stmt
	getValidInstrumentStmt                                  *sql.Stmt
	getValidInstrumentsStmt                                 *sql.Stmt
	getValidMeasurementConversionStmt                       *sql.Stmt
	getValidMeasurementConversionsFromMeasurementUnitStmt   *sql.Stmt
	getValidMeasurementConversionsToMeasurementUnitStmt     *sql.Stmt
	getValidMeasurementUnitStmt                             *sql.Stmt
	getValidPreparationStmt                                 *sql.Stmt
	getValidPreparationInstrumentStmt                       *sql.Stmt
	getWebhookStmt                                          *sql.Stmt
	getWebhookTriggerEventsForWebhookStmt                   *sql.Stmt
	getWebhooksStmt                                         *sql.Stmt
	householdInvitationExistsStmt                           *sql.Stmt
	listIncompleteMealPlanTaskByMealPlanOptionStmt          *sql.Stmt
	listMealPlanTasksForMealPlanStmt                        *sql.Stmt
	markHouseholdUserMembershipAsDefaultForUserStmt         *sql.Stmt
	markMealPlanAsHavingGroceryListInitializedStmt          *sql.Stmt
	markMealPlanTasksAsCreatedStmt                          *sql.Stmt
	markUserTwoFactorSecretAsVerifiedStmt                   *sql.Stmt
	mealExistsStmt                                          *sql.Stmt
	mealPlanEventExistsStmt                                 *sql.Stmt
	mealPlanExistsStmt                                      *sql.Stmt
	mealPlanGroceryListItemExistsStmt                       *sql.Stmt
	mealPlanOptionExistsStmt                                *sql.Stmt
	mealPlanOptionVoteExistsStmt                            *sql.Stmt
	mealPlanTaskExistsStmt                                  *sql.Stmt
	modifyHouseholdUserMembershipPermissionsStmt            *sql.Stmt
	recipeExistsStmt                                        *sql.Stmt
	recipeMediaExistsStmt                                   *sql.Stmt
	recipePrepTaskExistsStmt                                *sql.Stmt
	recipeStepExistsStmt                                    *sql.Stmt
	recipeStepIngredientExistsStmt                          *sql.Stmt
	recipeStepInstrumentExistsStmt                          *sql.Stmt
	recipeStepProductExistsStmt                             *sql.Stmt
	redeemPasswordResetTokenStmt                            *sql.Stmt
	removeUserFromHouseholdStmt                             *sql.Stmt
	searchForUserByUsernameStmt                             *sql.Stmt
	searchForValidIngredientStmt                            *sql.Stmt
	searchForValidInstrumentsStmt                           *sql.Stmt
	searchForValidMeasurementUnitsStmt                      *sql.Stmt
	searchForValidPreparationsStmt                          *sql.Stmt
	setHouseholdInvitationStatusStmt                        *sql.Stmt
	transferHouseholdOwnershipStmt                          *sql.Stmt
	transferHouseholdUserMembershipToNewUserStmt            *sql.Stmt
	updateHouseholdStmt                                     *sql.Stmt
	updateMealPlanStmt                                      *sql.Stmt
	updateMealPlanEventStmt                                 *sql.Stmt
	updateMealPlanGroceryListItemStmt                       *sql.Stmt
	updateMealPlanOptionStmt                                *sql.Stmt
	updateMealPlanOptionVoteStmt                            *sql.Stmt
	updateRecipeStmt                                        *sql.Stmt
	updateRecipeMediaStmt                                   *sql.Stmt
	updateRecipePrepTaskStmt                                *sql.Stmt
	updateRecipeStepStmt                                    *sql.Stmt
	updateRecipeStepIngredientStmt                          *sql.Stmt
	updateRecipeStepInstrumentStmt                          *sql.Stmt
	updateRecipeStepProductStmt                             *sql.Stmt
	updateUserStmt                                          *sql.Stmt
	updateUserPasswordStmt                                  *sql.Stmt
	updateUserTwoFactorSecretStmt                           *sql.Stmt
	updateValidIngredientStmt                               *sql.Stmt
	updateValidIngredientMeasurementUnitStmt                *sql.Stmt
	updateValidIngredientPreparationStmt                    *sql.Stmt
	updateValidInstrumentStmt                               *sql.Stmt
	updateValidMeasurementConversionStmt                    *sql.Stmt
	updateValidMeasurementUnitStmt                          *sql.Stmt
	updateValidPreparationStmt                              *sql.Stmt
	updateValidPreparationInstrumentStmt                    *sql.Stmt
	userExistsWithStatusStmt                                *sql.Stmt
	userIsMemberOfHouseholdStmt                             *sql.Stmt
	validIngredientExistsStmt                               *sql.Stmt
	validIngredientMeasurementUnitExistsStmt                *sql.Stmt
	validIngredientPreparationExistsStmt                    *sql.Stmt
	validInstrumentExistsStmt                               *sql.Stmt
	validMeasurementConversionExistsStmt                    *sql.Stmt
	validMeasurementUnitExistsStmt                          *sql.Stmt
	validPreparationExistsStmt                              *sql.Stmt
	validPreparationInstrumentExistsStmt                    *sql.Stmt
	webhookExistsStmt                                       *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                   tx,
		tx:                   tx,
		archiveAPIClientStmt: q.archiveAPIClientStmt,
		archiveHouseholdStmt: q.archiveHouseholdStmt,
		archiveHouseholdUserMembershipForUserStmt: q.archiveHouseholdUserMembershipForUserStmt,
		archiveMealStmt:                                         q.archiveMealStmt,
		archiveMealPlanStmt:                                     q.archiveMealPlanStmt,
		archiveMealPlanEventStmt:                                q.archiveMealPlanEventStmt,
		archiveMealPlanGroceryListItemStmt:                      q.archiveMealPlanGroceryListItemStmt,
		archiveMealPlanOptionStmt:                               q.archiveMealPlanOptionStmt,
		archiveMealPlanOptionVoteStmt:                           q.archiveMealPlanOptionVoteStmt,
		archiveRecipeStmt:                                       q.archiveRecipeStmt,
		archiveRecipeMediaStmt:                                  q.archiveRecipeMediaStmt,
		archiveRecipePrepTaskStmt:                               q.archiveRecipePrepTaskStmt,
		archiveRecipeStepStmt:                                   q.archiveRecipeStepStmt,
		archiveRecipeStepIngredientStmt:                         q.archiveRecipeStepIngredientStmt,
		archiveRecipeStepInstrumentStmt:                         q.archiveRecipeStepInstrumentStmt,
		archiveRecipeStepProductStmt:                            q.archiveRecipeStepProductStmt,
		archiveUserStmt:                                         q.archiveUserStmt,
		archiveValidIngredientStmt:                              q.archiveValidIngredientStmt,
		archiveValidIngredientMeasurementUnitStmt:               q.archiveValidIngredientMeasurementUnitStmt,
		archiveValidIngredientPreparationStmt:                   q.archiveValidIngredientPreparationStmt,
		archiveValidInstrumentStmt:                              q.archiveValidInstrumentStmt,
		archiveValidMeasurementConversionStmt:                   q.archiveValidMeasurementConversionStmt,
		archiveValidMeasurementUnitStmt:                         q.archiveValidMeasurementUnitStmt,
		archiveValidPreparationStmt:                             q.archiveValidPreparationStmt,
		archiveValidPreparationInstrumentStmt:                   q.archiveValidPreparationInstrumentStmt,
		archiveWebhookStmt:                                      q.archiveWebhookStmt,
		attachHouseholdInvitationsToUserStmt:                    q.attachHouseholdInvitationsToUserStmt,
		changeMealPlanTaskStatusStmt:                            q.changeMealPlanTaskStatusStmt,
		createAPIClientStmt:                                     q.createAPIClientStmt,
		createHouseholdStmt:                                     q.createHouseholdStmt,
		createHouseholdInvitationStmt:                           q.createHouseholdInvitationStmt,
		createHouseholdUserMembershipStmt:                       q.createHouseholdUserMembershipStmt,
		createHouseholdUserMembershipForNewUserStmt:             q.createHouseholdUserMembershipForNewUserStmt,
		createMealStmt:                                          q.createMealStmt,
		createMealPlanStmt:                                      q.createMealPlanStmt,
		createMealPlanEventStmt:                                 q.createMealPlanEventStmt,
		createMealPlanGroceryListItemStmt:                       q.createMealPlanGroceryListItemStmt,
		createMealPlanOptionStmt:                                q.createMealPlanOptionStmt,
		createMealPlanOptionVoteStmt:                            q.createMealPlanOptionVoteStmt,
		createMealPlanTaskStmt:                                  q.createMealPlanTaskStmt,
		createMealRecipeStmt:                                    q.createMealRecipeStmt,
		createPasswordResetTokenStmt:                            q.createPasswordResetTokenStmt,
		createRecipeStmt:                                        q.createRecipeStmt,
		createRecipeMediaStmt:                                   q.createRecipeMediaStmt,
		createRecipePrepTaskStmt:                                q.createRecipePrepTaskStmt,
		createRecipePrepTaskStepStmt:                            q.createRecipePrepTaskStepStmt,
		createRecipeStepStmt:                                    q.createRecipeStepStmt,
		createRecipeStepIngredientStmt:                          q.createRecipeStepIngredientStmt,
		createRecipeStepInstrumentStmt:                          q.createRecipeStepInstrumentStmt,
		createRecipeStepProductStmt:                             q.createRecipeStepProductStmt,
		createUserStmt:                                          q.createUserStmt,
		createValidIngredientStmt:                               q.createValidIngredientStmt,
		createValidIngredientMeasurementUnitStmt:                q.createValidIngredientMeasurementUnitStmt,
		createValidIngredientPreparationStmt:                    q.createValidIngredientPreparationStmt,
		createValidInstrumentStmt:                               q.createValidInstrumentStmt,
		createValidMeasurementConversionStmt:                    q.createValidMeasurementConversionStmt,
		createValidMeasurementUnitStmt:                          q.createValidMeasurementUnitStmt,
		createValidPreparationStmt:                              q.createValidPreparationStmt,
		createValidPreparationInstrumentStmt:                    q.createValidPreparationInstrumentStmt,
		createWebhookStmt:                                       q.createWebhookStmt,
		createWebhookTriggerEventStmt:                           q.createWebhookTriggerEventStmt,
		finalizeMealPlanStmt:                                    q.finalizeMealPlanStmt,
		finalizeMealPlanOptionStmt:                              q.finalizeMealPlanOptionStmt,
		getAPIClientByClientIDStmt:                              q.getAPIClientByClientIDStmt,
		getAPIClientByIDStmt:                                    q.getAPIClientByIDStmt,
		getAdminUserByUsernameStmt:                              q.getAdminUserByUsernameStmt,
		getDefaultHouseholdIDForUserStmt:                        q.getDefaultHouseholdIDForUserStmt,
		getExpiredAndUnresolvedMealPlansStmt:                    q.getExpiredAndUnresolvedMealPlansStmt,
		getFinalizedMealPlansForPlanningStmt:                    q.getFinalizedMealPlansForPlanningStmt,
		getFinalizedMealPlansWithoutInitializedGroceryListsStmt: q.getFinalizedMealPlansWithoutInitializedGroceryListsStmt,
		getHouseholdByIDWithMembershipsStmt:                     q.getHouseholdByIDWithMembershipsStmt,
		getHouseholdInvitationByEmailAndTokenStmt:               q.getHouseholdInvitationByEmailAndTokenStmt,
		getHouseholdInvitationByHouseholdAndIDStmt:              q.getHouseholdInvitationByHouseholdAndIDStmt,
		getHouseholdInvitationByTokenAndIDStmt:                  q.getHouseholdInvitationByTokenAndIDStmt,
		getHouseholdUserMembershipsForUserStmt:                  q.getHouseholdUserMembershipsForUserStmt,
		getMealStmt:                                             q.getMealStmt,
		getMealPlanStmt:                                         q.getMealPlanStmt,
		getMealPlanEventStmt:                                    q.getMealPlanEventStmt,
		getMealPlanEventsForMealPlanStmt:                        q.getMealPlanEventsForMealPlanStmt,
		getMealPlanGroceryListItemStmt:                          q.getMealPlanGroceryListItemStmt,
		getMealPlanGroceryListItemsForMealPlanStmt:              q.getMealPlanGroceryListItemsForMealPlanStmt,
		getMealPlanOptionStmt:                                   q.getMealPlanOptionStmt,
		getMealPlanOptionByIDStmt:                               q.getMealPlanOptionByIDStmt,
		getMealPlanOptionVoteStmt:                               q.getMealPlanOptionVoteStmt,
		getMealPlanOptionVotesForMealPlanOptionStmt:             q.getMealPlanOptionVotesForMealPlanOptionStmt,
		getMealPlanOptionsForMealPlanEventStmt:                  q.getMealPlanOptionsForMealPlanEventStmt,
		getMealPlanPastVotingDeadlineStmt:                       q.getMealPlanPastVotingDeadlineStmt,
		getMealPlanTaskStmt:                                     q.getMealPlanTaskStmt,
		getPasswordResetTokenStmt:                               q.getPasswordResetTokenStmt,
		getRandomValidIngredientStmt:                            q.getRandomValidIngredientStmt,
		getRandomValidInstrumentStmt:                            q.getRandomValidInstrumentStmt,
		getRandomValidMeasurementUnitStmt:                       q.getRandomValidMeasurementUnitStmt,
		getRandomValidPreparationStmt:                           q.getRandomValidPreparationStmt,
		getRecipeByIDStmt:                                       q.getRecipeByIDStmt,
		getRecipeByIDAndAuthorStmt:                              q.getRecipeByIDAndAuthorStmt,
		getRecipeIDsForMealStmt:                                 q.getRecipeIDsForMealStmt,
		getRecipeMediaStmt:                                      q.getRecipeMediaStmt,
		getRecipeMediaForRecipeStmt:                             q.getRecipeMediaForRecipeStmt,
		getRecipeMediaForRecipeStepStmt:                         q.getRecipeMediaForRecipeStepStmt,
		getRecipePrepTaskStmt:                                   q.getRecipePrepTaskStmt,
		getRecipePrepTasksForRecipeStmt:                         q.getRecipePrepTasksForRecipeStmt,
		getRecipeStepStmt:                                       q.getRecipeStepStmt,
		getRecipeStepByIDStmt:                                   q.getRecipeStepByIDStmt,
		getRecipeStepIngredientStmt:                             q.getRecipeStepIngredientStmt,
		getRecipeStepIngredientForRecipeStmt:                    q.getRecipeStepIngredientForRecipeStmt,
		getRecipeStepInstrumentStmt:                             q.getRecipeStepInstrumentStmt,
		getRecipeStepInstrumentsForRecipeStmt:                   q.getRecipeStepInstrumentsForRecipeStmt,
		getRecipeStepProductStmt:                                q.getRecipeStepProductStmt,
		getRecipeStepProductsForRecipeStmt:                      q.getRecipeStepProductsForRecipeStmt,
		getUserByEmailAddressStmt:                               q.getUserByEmailAddressStmt,
		getUserByIDStmt:                                         q.getUserByIDStmt,
		getUserByUsernameStmt:                                   q.getUserByUsernameStmt,
		getUserWithVerifiedTwoFactorSecretStmt:                  q.getUserWithVerifiedTwoFactorSecretStmt,
		getValidIngredientStmt:                                  q.getValidIngredientStmt,
		getValidIngredientMeasurementUnitStmt:                   q.getValidIngredientMeasurementUnitStmt,
		getValidIngredientPreparationStmt:                       q.getValidIngredientPreparationStmt,
		getValidInstrumentStmt:                                  q.getValidInstrumentStmt,
		getValidInstrumentsStmt:                                 q.getValidInstrumentsStmt,
		getValidMeasurementConversionStmt:                       q.getValidMeasurementConversionStmt,
		getValidMeasurementConversionsFromMeasurementUnitStmt:   q.getValidMeasurementConversionsFromMeasurementUnitStmt,
		getValidMeasurementConversionsToMeasurementUnitStmt:     q.getValidMeasurementConversionsToMeasurementUnitStmt,
		getValidMeasurementUnitStmt:                             q.getValidMeasurementUnitStmt,
		getValidPreparationStmt:                                 q.getValidPreparationStmt,
		getValidPreparationInstrumentStmt:                       q.getValidPreparationInstrumentStmt,
		getWebhookStmt:                                          q.getWebhookStmt,
		getWebhookTriggerEventsForWebhookStmt:                   q.getWebhookTriggerEventsForWebhookStmt,
		getWebhooksStmt:                                         q.getWebhooksStmt,
		householdInvitationExistsStmt:                           q.householdInvitationExistsStmt,
		listIncompleteMealPlanTaskByMealPlanOptionStmt:          q.listIncompleteMealPlanTaskByMealPlanOptionStmt,
		listMealPlanTasksForMealPlanStmt:                        q.listMealPlanTasksForMealPlanStmt,
		markHouseholdUserMembershipAsDefaultForUserStmt:         q.markHouseholdUserMembershipAsDefaultForUserStmt,
		markMealPlanAsHavingGroceryListInitializedStmt:          q.markMealPlanAsHavingGroceryListInitializedStmt,
		markMealPlanTasksAsCreatedStmt:                          q.markMealPlanTasksAsCreatedStmt,
		markUserTwoFactorSecretAsVerifiedStmt:                   q.markUserTwoFactorSecretAsVerifiedStmt,
		mealExistsStmt:                                          q.mealExistsStmt,
		mealPlanEventExistsStmt:                                 q.mealPlanEventExistsStmt,
		mealPlanExistsStmt:                                      q.mealPlanExistsStmt,
		mealPlanGroceryListItemExistsStmt:                       q.mealPlanGroceryListItemExistsStmt,
		mealPlanOptionExistsStmt:                                q.mealPlanOptionExistsStmt,
		mealPlanOptionVoteExistsStmt:                            q.mealPlanOptionVoteExistsStmt,
		mealPlanTaskExistsStmt:                                  q.mealPlanTaskExistsStmt,
		modifyHouseholdUserMembershipPermissionsStmt:            q.modifyHouseholdUserMembershipPermissionsStmt,
		recipeExistsStmt:                                        q.recipeExistsStmt,
		recipeMediaExistsStmt:                                   q.recipeMediaExistsStmt,
		recipePrepTaskExistsStmt:                                q.recipePrepTaskExistsStmt,
		recipeStepExistsStmt:                                    q.recipeStepExistsStmt,
		recipeStepIngredientExistsStmt:                          q.recipeStepIngredientExistsStmt,
		recipeStepInstrumentExistsStmt:                          q.recipeStepInstrumentExistsStmt,
		recipeStepProductExistsStmt:                             q.recipeStepProductExistsStmt,
		redeemPasswordResetTokenStmt:                            q.redeemPasswordResetTokenStmt,
		removeUserFromHouseholdStmt:                             q.removeUserFromHouseholdStmt,
		searchForUserByUsernameStmt:                             q.searchForUserByUsernameStmt,
		searchForValidIngredientStmt:                            q.searchForValidIngredientStmt,
		searchForValidInstrumentsStmt:                           q.searchForValidInstrumentsStmt,
		searchForValidMeasurementUnitsStmt:                      q.searchForValidMeasurementUnitsStmt,
		searchForValidPreparationsStmt:                          q.searchForValidPreparationsStmt,
		setHouseholdInvitationStatusStmt:                        q.setHouseholdInvitationStatusStmt,
		transferHouseholdOwnershipStmt:                          q.transferHouseholdOwnershipStmt,
		transferHouseholdUserMembershipToNewUserStmt:            q.transferHouseholdUserMembershipToNewUserStmt,
		updateHouseholdStmt:                                     q.updateHouseholdStmt,
		updateMealPlanStmt:                                      q.updateMealPlanStmt,
		updateMealPlanEventStmt:                                 q.updateMealPlanEventStmt,
		updateMealPlanGroceryListItemStmt:                       q.updateMealPlanGroceryListItemStmt,
		updateMealPlanOptionStmt:                                q.updateMealPlanOptionStmt,
		updateMealPlanOptionVoteStmt:                            q.updateMealPlanOptionVoteStmt,
		updateRecipeStmt:                                        q.updateRecipeStmt,
		updateRecipeMediaStmt:                                   q.updateRecipeMediaStmt,
		updateRecipePrepTaskStmt:                                q.updateRecipePrepTaskStmt,
		updateRecipeStepStmt:                                    q.updateRecipeStepStmt,
		updateRecipeStepIngredientStmt:                          q.updateRecipeStepIngredientStmt,
		updateRecipeStepInstrumentStmt:                          q.updateRecipeStepInstrumentStmt,
		updateRecipeStepProductStmt:                             q.updateRecipeStepProductStmt,
		updateUserStmt:                                          q.updateUserStmt,
		updateUserPasswordStmt:                                  q.updateUserPasswordStmt,
		updateUserTwoFactorSecretStmt:                           q.updateUserTwoFactorSecretStmt,
		updateValidIngredientStmt:                               q.updateValidIngredientStmt,
		updateValidIngredientMeasurementUnitStmt:                q.updateValidIngredientMeasurementUnitStmt,
		updateValidIngredientPreparationStmt:                    q.updateValidIngredientPreparationStmt,
		updateValidInstrumentStmt:                               q.updateValidInstrumentStmt,
		updateValidMeasurementConversionStmt:                    q.updateValidMeasurementConversionStmt,
		updateValidMeasurementUnitStmt:                          q.updateValidMeasurementUnitStmt,
		updateValidPreparationStmt:                              q.updateValidPreparationStmt,
		updateValidPreparationInstrumentStmt:                    q.updateValidPreparationInstrumentStmt,
		userExistsWithStatusStmt:                                q.userExistsWithStatusStmt,
		userIsMemberOfHouseholdStmt:                             q.userIsMemberOfHouseholdStmt,
		validIngredientExistsStmt:                               q.validIngredientExistsStmt,
		validIngredientMeasurementUnitExistsStmt:                q.validIngredientMeasurementUnitExistsStmt,
		validIngredientPreparationExistsStmt:                    q.validIngredientPreparationExistsStmt,
		validInstrumentExistsStmt:                               q.validInstrumentExistsStmt,
		validMeasurementConversionExistsStmt:                    q.validMeasurementConversionExistsStmt,
		validMeasurementUnitExistsStmt:                          q.validMeasurementUnitExistsStmt,
		validPreparationExistsStmt:                              q.validPreparationExistsStmt,
		validPreparationInstrumentExistsStmt:                    q.validPreparationInstrumentExistsStmt,
		webhookExistsStmt:                                       q.webhookExistsStmt,
	}
}
