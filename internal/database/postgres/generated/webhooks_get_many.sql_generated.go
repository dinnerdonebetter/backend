// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: webhooks_get_many.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const GetWebhooks = `-- name: GetWebhooks :many
SELECT
    webhooks.id,
    webhooks.name,
    webhooks.content_type,
    webhooks.url,
    webhooks.method,
    webhooks.created_at,
    webhooks.last_updated_at,
    webhooks.archived_at,
    webhooks.belongs_to_household,
    (
    SELECT COUNT(webhooks.id)
     FROM webhooks
     WHERE webhooks.archived_at IS NULL
       AND webhooks.created_at > COALESCE($2, 0)
       AND webhooks.created_at < COALESCE($3, (SELECT NOW() + interval '9999 years'))
       AND (webhooks.last_updated_at IS NULL OR webhooks.last_updated_at > COALESCE($4, 0))
       AND (webhoks.last_updated_at IS NULL OR
            webhooks.last_updated_at < COALESCE($5, (SELECT NOW() + interval '9999 years')))
    ) as filtered_count,
    (
        SELECT
            COUNT(webhooks.id)
        FROM
            webhooks
        WHERE
            webhooks.archived_at IS NULL
    ) as total_count
FROM webhooks
WHERE webhooks.archived_at IS NULL
  AND webhook_trigger_events.archived_at IS NULL
  AND webhooks.belongs_to_household = $1
`

type GetWebhooksParams struct {
	BelongsToHousehold string       `db:"belongs_to_household"`
	CreatedAfter       sql.NullTime `db:"created_after"`
	CreatedBefore      sql.NullTime `db:"created_before"`
	UpdatedAfter       sql.NullTime `db:"updated_after"`
	UpdatedBefore      sql.NullTime `db:"updated_before"`
}

type GetWebhooksRow struct {
	ID                 string       `db:"id"`
	Name               string       `db:"name"`
	ContentType        string       `db:"content_type"`
	Url                string       `db:"url"`
	Method             string       `db:"method"`
	CreatedAt          time.Time    `db:"created_at"`
	LastUpdatedAt      sql.NullTime `db:"last_updated_at"`
	ArchivedAt         sql.NullTime `db:"archived_at"`
	BelongsToHousehold string       `db:"belongs_to_household"`
	FilteredCount      int64        `db:"filtered_count"`
	TotalCount         int64        `db:"total_count"`
}

func (q *Queries) GetWebhooks(ctx context.Context, db DBTX, arg *GetWebhooksParams) ([]*GetWebhooksRow, error) {
	rows, err := db.QueryContext(ctx, GetWebhooks,
		arg.BelongsToHousehold,
		arg.CreatedAfter,
		arg.CreatedBefore,
		arg.UpdatedAfter,
		arg.UpdatedBefore,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetWebhooksRow{}
	for rows.Next() {
		var i GetWebhooksRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ContentType,
			&i.Url,
			&i.Method,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.BelongsToHousehold,
			&i.FilteredCount,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
