// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: list_incomplete_by_meal_plan_option.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const listIncompleteMealPlanTasksByMealPlanOption = `-- name: ListIncompleteMealPlanTasksByMealPlanOption :many

SELECT
	meal_plan_tasks.id,
	meal_plan_options.id,
	meal_plan_options.assigned_cook,
	meal_plan_options.assigned_dishwasher,
	meal_plan_options.chosen,
	meal_plan_options.tiebroken,
    meal_plan_options.meal_scale,
	meal_plan_options.meal_id,
	meal_plan_options.notes,
	meal_plan_options.created_at,
	meal_plan_options.last_updated_at,
	meal_plan_options.archived_at,
	meal_plan_options.belongs_to_meal_plan_event,
	recipe_steps.id,
	recipe_steps.index,
	valid_preparations.id,
	valid_preparations.name,
	valid_preparations.description,
	valid_preparations.icon_path,
	valid_preparations.yields_nothing,
	valid_preparations.restrict_to_ingredients,
	valid_preparations.minimum_ingredient_count,
	valid_preparations.maximum_ingredient_count,
	valid_preparations.minimum_instrument_count,
	valid_preparations.maximum_instrument_count,
	valid_preparations.temperature_required,
	valid_preparations.time_estimate_required,
	valid_preparations.condition_expression_required,
    valid_preparations.consumes_vessel,
    valid_preparations.only_for_vessels,
    valid_preparations.minimum_vessel_count,
    valid_preparations.maximum_vessel_count,
	valid_preparations.slug,
	valid_preparations.past_tense,
	valid_preparations.created_at,
	valid_preparations.last_updated_at,
	valid_preparations.archived_at,
	recipe_steps.minimum_estimated_time_in_seconds,
	recipe_steps.maximum_estimated_time_in_seconds,
	recipe_steps.minimum_temperature_in_celsius,
	recipe_steps.maximum_temperature_in_celsius,
	recipe_steps.notes,
	recipe_steps.explicit_instructions,
	recipe_steps.condition_expression,
	recipe_steps.optional,
	recipe_steps.start_timer_automatically,
	recipe_steps.created_at,
	recipe_steps.last_updated_at,
	recipe_steps.archived_at,
	recipe_steps.belongs_to_recipe,
	meal_plan_tasks.assigned_to_user,
	meal_plan_tasks.status,
	meal_plan_tasks.status_explanation,
	meal_plan_tasks.creation_explanation,
	meal_plan_tasks.created_at,
	meal_plan_tasks.completed_at
FROM meal_plan_tasks
	 FULL OUTER JOIN meal_plan_options ON meal_plan_tasks.belongs_to_meal_plan_option=meal_plan_options.id
	 FULL OUTER JOIN meal_plans ON meal_plan_options.belongs_to_meal_plan=meal_plans.id
	 FULL OUTER JOIN meals ON meal_plan_options.meal_id=meals.id
	 JOIN recipe_steps ON meal_plan_tasks.satisfies_recipe_step=recipe_steps.id
	 JOIN valid_preparations ON recipe_steps.preparation_id=valid_preparations.id
WHERE meal_plan_tasks.belongs_to_meal_plan_option = $1
AND meal_plan_tasks.completed_at IS NULL
`

type ListIncompleteMealPlanTasksByMealPlanOptionRow struct {
	CreatedAt_3                   time.Time
	CreatedAt_2                   time.Time
	ArchivedAt                    sql.NullTime
	CompletedAt                   sql.NullTime
	CreatedAt_4                   sql.NullTime
	ArchivedAt_3                  sql.NullTime
	LastUpdatedAt_3               sql.NullTime
	ArchivedAt_2                  sql.NullTime
	LastUpdatedAt_2               sql.NullTime
	CreatedAt                     sql.NullTime
	LastUpdatedAt                 sql.NullTime
	ExplicitInstructions          string
	BelongsToRecipe               string
	ID_3                          string
	PastTense                     string
	ID_4                          string
	Name                          string
	Description                   string
	IconPath                      string
	Notes_2                       string
	Slug                          string
	ConditionExpression           string
	AssignedCook                  sql.NullString
	StatusExplanation             sql.NullString
	MaximumTemperatureInCelsius   sql.NullString
	Status                        NullPrepStepStatus
	AssignedToUser                sql.NullString
	BelongsToMealPlanEvent        sql.NullString
	AssignedDishwasher            sql.NullString
	MealScale                     sql.NullString
	ID                            sql.NullString
	MinimumTemperatureInCelsius   sql.NullString
	CreationExplanation           sql.NullString
	ID_2                          sql.NullString
	Notes                         sql.NullString
	MealID                        sql.NullString
	MaximumEstimatedTimeInSeconds sql.NullInt64
	MinimumEstimatedTimeInSeconds sql.NullInt64
	MaximumIngredientCount        sql.NullInt32
	MaximumVesselCount            sql.NullInt32
	MaximumInstrumentCount        sql.NullInt32
	MinimumInstrumentCount        int32
	Index                         int32
	MinimumIngredientCount        int32
	MinimumVesselCount            int32
	Chosen                        sql.NullBool
	Tiebroken                     sql.NullBool
	ConsumesVessel                bool
	StartTimerAutomatically       bool
	ConditionExpressionRequired   bool
	TimeEstimateRequired          bool
	TemperatureRequired           bool
	Optional                      bool
	RestrictToIngredients         bool
	YieldsNothing                 bool
	OnlyForVessels                bool
}

func (q *Queries) ListIncompleteMealPlanTasksByMealPlanOption(ctx context.Context, db DBTX, belongsToMealPlanOption string) ([]*ListIncompleteMealPlanTasksByMealPlanOptionRow, error) {
	rows, err := db.QueryContext(ctx, listIncompleteMealPlanTasksByMealPlanOption, belongsToMealPlanOption)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListIncompleteMealPlanTasksByMealPlanOptionRow{}
	for rows.Next() {
		var i ListIncompleteMealPlanTasksByMealPlanOptionRow
		if err := rows.Scan(
			&i.ID,
			&i.ID_2,
			&i.AssignedCook,
			&i.AssignedDishwasher,
			&i.Chosen,
			&i.Tiebroken,
			&i.MealScale,
			&i.MealID,
			&i.Notes,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.BelongsToMealPlanEvent,
			&i.ID_3,
			&i.Index,
			&i.ID_4,
			&i.Name,
			&i.Description,
			&i.IconPath,
			&i.YieldsNothing,
			&i.RestrictToIngredients,
			&i.MinimumIngredientCount,
			&i.MaximumIngredientCount,
			&i.MinimumInstrumentCount,
			&i.MaximumInstrumentCount,
			&i.TemperatureRequired,
			&i.TimeEstimateRequired,
			&i.ConditionExpressionRequired,
			&i.ConsumesVessel,
			&i.OnlyForVessels,
			&i.MinimumVesselCount,
			&i.MaximumVesselCount,
			&i.Slug,
			&i.PastTense,
			&i.CreatedAt_2,
			&i.LastUpdatedAt_2,
			&i.ArchivedAt_2,
			&i.MinimumEstimatedTimeInSeconds,
			&i.MaximumEstimatedTimeInSeconds,
			&i.MinimumTemperatureInCelsius,
			&i.MaximumTemperatureInCelsius,
			&i.Notes_2,
			&i.ExplicitInstructions,
			&i.ConditionExpression,
			&i.Optional,
			&i.StartTimerAutomatically,
			&i.CreatedAt_3,
			&i.LastUpdatedAt_3,
			&i.ArchivedAt_3,
			&i.BelongsToRecipe,
			&i.AssignedToUser,
			&i.Status,
			&i.StatusExplanation,
			&i.CreationExplanation,
			&i.CreatedAt_4,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
