// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: list_incomplete_by_meal_plan_option.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const ListIncompleteMealPlanTasksByMealPlanOption = `-- name: ListIncompleteMealPlanTasksByMealPlanOption :many

SELECT
	meal_plan_tasks.id,
	meal_plan_options.id,
	meal_plan_options.assigned_cook,
	meal_plan_options.assigned_dishwasher,
	meal_plan_options.chosen,
	meal_plan_options.tiebroken,
    meal_plan_options.meal_scale,
	meal_plan_options.meal_id,
	meal_plan_options.notes,
	meal_plan_options.created_at,
	meal_plan_options.last_updated_at,
	meal_plan_options.archived_at,
	meal_plan_options.belongs_to_meal_plan_event,
	recipe_steps.id,
	recipe_steps.index,
	valid_preparations.id,
	valid_preparations.name,
	valid_preparations.description,
	valid_preparations.icon_path,
	valid_preparations.yields_nothing,
	valid_preparations.restrict_to_ingredients,
	valid_preparations.minimum_ingredient_count,
	valid_preparations.maximum_ingredient_count,
	valid_preparations.minimum_instrument_count,
	valid_preparations.maximum_instrument_count,
	valid_preparations.temperature_required,
	valid_preparations.time_estimate_required,
	valid_preparations.condition_expression_required,
    valid_preparations.consumes_vessel,
    valid_preparations.only_for_vessels,
    valid_preparations.minimum_vessel_count,
    valid_preparations.maximum_vessel_count,
	valid_preparations.slug,
	valid_preparations.past_tense,
	valid_preparations.created_at,
	valid_preparations.last_updated_at,
	valid_preparations.archived_at,
	recipe_steps.minimum_estimated_time_in_seconds,
	recipe_steps.maximum_estimated_time_in_seconds,
	recipe_steps.minimum_temperature_in_celsius,
	recipe_steps.maximum_temperature_in_celsius,
	recipe_steps.notes,
	recipe_steps.explicit_instructions,
	recipe_steps.condition_expression,
	recipe_steps.optional,
	recipe_steps.start_timer_automatically,
	recipe_steps.created_at,
	recipe_steps.last_updated_at,
	recipe_steps.archived_at,
	recipe_steps.belongs_to_recipe,
	meal_plan_tasks.assigned_to_user,
	meal_plan_tasks.status,
	meal_plan_tasks.status_explanation,
	meal_plan_tasks.creation_explanation,
	meal_plan_tasks.created_at,
	meal_plan_tasks.completed_at
FROM meal_plan_tasks
	 FULL OUTER JOIN meal_plan_options ON meal_plan_tasks.belongs_to_meal_plan_option=meal_plan_options.id
	 FULL OUTER JOIN meal_plans ON meal_plan_options.belongs_to_meal_plan=meal_plans.id
	 FULL OUTER JOIN meals ON meal_plan_options.meal_id=meals.id
	 JOIN recipe_steps ON meal_plan_tasks.satisfies_recipe_step=recipe_steps.id
	 JOIN valid_preparations ON recipe_steps.preparation_id=valid_preparations.id
WHERE meal_plan_tasks.belongs_to_meal_plan_option = $1
AND meal_plan_tasks.completed_at IS NULL
`

type ListIncompleteMealPlanTasksByMealPlanOptionRow struct {
	ID                            sql.NullString     `db:"id"`
	ID_2                          sql.NullString     `db:"id_2"`
	AssignedCook                  sql.NullString     `db:"assigned_cook"`
	AssignedDishwasher            sql.NullString     `db:"assigned_dishwasher"`
	Chosen                        sql.NullBool       `db:"chosen"`
	Tiebroken                     sql.NullBool       `db:"tiebroken"`
	MealScale                     sql.NullString     `db:"meal_scale"`
	MealID                        sql.NullString     `db:"meal_id"`
	Notes                         sql.NullString     `db:"notes"`
	CreatedAt                     sql.NullTime       `db:"created_at"`
	LastUpdatedAt                 sql.NullTime       `db:"last_updated_at"`
	ArchivedAt                    sql.NullTime       `db:"archived_at"`
	BelongsToMealPlanEvent        sql.NullString     `db:"belongs_to_meal_plan_event"`
	ID_3                          string             `db:"id_3"`
	Index                         int32              `db:"index"`
	ID_4                          string             `db:"id_4"`
	Name                          string             `db:"name"`
	Description                   string             `db:"description"`
	IconPath                      string             `db:"icon_path"`
	YieldsNothing                 bool               `db:"yields_nothing"`
	RestrictToIngredients         bool               `db:"restrict_to_ingredients"`
	MinimumIngredientCount        int32              `db:"minimum_ingredient_count"`
	MaximumIngredientCount        sql.NullInt32      `db:"maximum_ingredient_count"`
	MinimumInstrumentCount        int32              `db:"minimum_instrument_count"`
	MaximumInstrumentCount        sql.NullInt32      `db:"maximum_instrument_count"`
	TemperatureRequired           bool               `db:"temperature_required"`
	TimeEstimateRequired          bool               `db:"time_estimate_required"`
	ConditionExpressionRequired   bool               `db:"condition_expression_required"`
	ConsumesVessel                bool               `db:"consumes_vessel"`
	OnlyForVessels                bool               `db:"only_for_vessels"`
	MinimumVesselCount            int32              `db:"minimum_vessel_count"`
	MaximumVesselCount            sql.NullInt32      `db:"maximum_vessel_count"`
	Slug                          string             `db:"slug"`
	PastTense                     string             `db:"past_tense"`
	CreatedAt_2                   time.Time          `db:"created_at_2"`
	LastUpdatedAt_2               sql.NullTime       `db:"last_updated_at_2"`
	ArchivedAt_2                  sql.NullTime       `db:"archived_at_2"`
	MinimumEstimatedTimeInSeconds sql.NullInt64      `db:"minimum_estimated_time_in_seconds"`
	MaximumEstimatedTimeInSeconds sql.NullInt64      `db:"maximum_estimated_time_in_seconds"`
	MinimumTemperatureInCelsius   sql.NullString     `db:"minimum_temperature_in_celsius"`
	MaximumTemperatureInCelsius   sql.NullString     `db:"maximum_temperature_in_celsius"`
	Notes_2                       string             `db:"notes_2"`
	ExplicitInstructions          string             `db:"explicit_instructions"`
	ConditionExpression           string             `db:"condition_expression"`
	Optional                      bool               `db:"optional"`
	StartTimerAutomatically       bool               `db:"start_timer_automatically"`
	CreatedAt_3                   time.Time          `db:"created_at_3"`
	LastUpdatedAt_3               sql.NullTime       `db:"last_updated_at_3"`
	ArchivedAt_3                  sql.NullTime       `db:"archived_at_3"`
	BelongsToRecipe               string             `db:"belongs_to_recipe"`
	AssignedToUser                sql.NullString     `db:"assigned_to_user"`
	Status                        NullPrepStepStatus `db:"status"`
	StatusExplanation             sql.NullString     `db:"status_explanation"`
	CreationExplanation           sql.NullString     `db:"creation_explanation"`
	CreatedAt_4                   sql.NullTime       `db:"created_at_4"`
	CompletedAt                   sql.NullTime       `db:"completed_at"`
}

func (q *Queries) ListIncompleteMealPlanTasksByMealPlanOption(ctx context.Context, db DBTX, belongsToMealPlanOption string) ([]*ListIncompleteMealPlanTasksByMealPlanOptionRow, error) {
	rows, err := db.QueryContext(ctx, ListIncompleteMealPlanTasksByMealPlanOption, belongsToMealPlanOption)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListIncompleteMealPlanTasksByMealPlanOptionRow{}
	for rows.Next() {
		var i ListIncompleteMealPlanTasksByMealPlanOptionRow
		if err := rows.Scan(
			&i.ID,
			&i.ID_2,
			&i.AssignedCook,
			&i.AssignedDishwasher,
			&i.Chosen,
			&i.Tiebroken,
			&i.MealScale,
			&i.MealID,
			&i.Notes,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.BelongsToMealPlanEvent,
			&i.ID_3,
			&i.Index,
			&i.ID_4,
			&i.Name,
			&i.Description,
			&i.IconPath,
			&i.YieldsNothing,
			&i.RestrictToIngredients,
			&i.MinimumIngredientCount,
			&i.MaximumIngredientCount,
			&i.MinimumInstrumentCount,
			&i.MaximumInstrumentCount,
			&i.TemperatureRequired,
			&i.TimeEstimateRequired,
			&i.ConditionExpressionRequired,
			&i.ConsumesVessel,
			&i.OnlyForVessels,
			&i.MinimumVesselCount,
			&i.MaximumVesselCount,
			&i.Slug,
			&i.PastTense,
			&i.CreatedAt_2,
			&i.LastUpdatedAt_2,
			&i.ArchivedAt_2,
			&i.MinimumEstimatedTimeInSeconds,
			&i.MaximumEstimatedTimeInSeconds,
			&i.MinimumTemperatureInCelsius,
			&i.MaximumTemperatureInCelsius,
			&i.Notes_2,
			&i.ExplicitInstructions,
			&i.ConditionExpression,
			&i.Optional,
			&i.StartTimerAutomatically,
			&i.CreatedAt_3,
			&i.LastUpdatedAt_3,
			&i.ArchivedAt_3,
			&i.BelongsToRecipe,
			&i.AssignedToUser,
			&i.Status,
			&i.StatusExplanation,
			&i.CreationExplanation,
			&i.CreatedAt_4,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
