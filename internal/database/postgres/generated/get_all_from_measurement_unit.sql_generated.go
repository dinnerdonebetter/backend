// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: get_all_from_measurement_unit.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const getAllValidMeasurementConversionsFromMeasurementUnit = `-- name: GetAllValidMeasurementConversionsFromMeasurementUnit :many

SELECT
	valid_measurement_conversions.id,
	valid_measurement_units_from.id,
	valid_measurement_units_from.name,
	valid_measurement_units_from.description,
	valid_measurement_units_from.volumetric,
	valid_measurement_units_from.icon_path,
	valid_measurement_units_from.universal,
	valid_measurement_units_from.metric,
	valid_measurement_units_from.imperial,
	valid_measurement_units_from.slug,
	valid_measurement_units_from.plural_name,
	valid_measurement_units_from.created_at,
	valid_measurement_units_from.last_updated_at,
	valid_measurement_units_from.archived_at,
	valid_measurement_units_to.id,
	valid_measurement_units_to.name,
	valid_measurement_units_to.description,
	valid_measurement_units_to.volumetric,
	valid_measurement_units_to.icon_path,
	valid_measurement_units_to.universal,
	valid_measurement_units_to.metric,
	valid_measurement_units_to.imperial,
	valid_measurement_units_to.slug,
	valid_measurement_units_to.plural_name,
	valid_measurement_units_to.created_at,
	valid_measurement_units_to.last_updated_at,
	valid_measurement_units_to.archived_at,
	valid_ingredients.id,
	valid_ingredients.name,
	valid_ingredients.description,
	valid_ingredients.warning,
	valid_ingredients.contains_egg,
	valid_ingredients.contains_dairy,
	valid_ingredients.contains_peanut,
	valid_ingredients.contains_tree_nut,
	valid_ingredients.contains_soy,
	valid_ingredients.contains_wheat,
	valid_ingredients.contains_shellfish,
	valid_ingredients.contains_sesame,
	valid_ingredients.contains_fish,
	valid_ingredients.contains_gluten,
	valid_ingredients.animal_flesh,
	valid_ingredients.volumetric,
	valid_ingredients.is_liquid,
	valid_ingredients.icon_path,
	valid_ingredients.animal_derived,
	valid_ingredients.plural_name,
	valid_ingredients.restrict_to_preparations,
	valid_ingredients.minimum_ideal_storage_temperature_in_celsius,
	valid_ingredients.maximum_ideal_storage_temperature_in_celsius,
	valid_ingredients.storage_instructions,
	valid_ingredients.slug,
	valid_ingredients.contains_alcohol,
	valid_ingredients.shopping_suggestions,
    valid_ingredients.is_starch,
    valid_ingredients.is_protein,
    valid_ingredients.is_grain,
    valid_ingredients.is_fruit,
    valid_ingredients.is_salt,
    valid_ingredients.is_fat,
    valid_ingredients.is_acid,
    valid_ingredients.is_heat,
	valid_ingredients.created_at,
	valid_ingredients.last_updated_at,
	valid_ingredients.archived_at,
	valid_measurement_conversions.modifier,
	valid_measurement_conversions.notes,
	valid_measurement_conversions.created_at,
	valid_measurement_conversions.last_updated_at,
	valid_measurement_conversions.archived_at
FROM valid_measurement_conversions
	     LEFT JOIN valid_ingredients ON valid_measurement_conversions.only_for_ingredient = valid_ingredients.id
	     JOIN valid_measurement_units AS valid_measurement_units_from ON valid_measurement_conversions.from_unit = valid_measurement_units_from.id
	     JOIN valid_measurement_units AS valid_measurement_units_to ON valid_measurement_conversions.to_unit = valid_measurement_units_to.id
WHERE valid_measurement_conversions.archived_at IS NULL
  AND valid_measurement_units_from.archived_at IS NULL
  AND valid_measurement_units_from.id = $1
  AND valid_measurement_units_to.archived_at IS NULL
`

type GetAllValidMeasurementConversionsFromMeasurementUnitRow struct {
	CreatedAt_4                             time.Time
	CreatedAt_2                             time.Time
	CreatedAt                               time.Time
	LastUpdatedAt                           sql.NullTime
	ArchivedAt                              sql.NullTime
	ArchivedAt_2                            sql.NullTime
	LastUpdatedAt_4                         sql.NullTime
	LastUpdatedAt_2                         sql.NullTime
	CreatedAt_3                             sql.NullTime
	ArchivedAt_4                            sql.NullTime
	LastUpdatedAt_3                         sql.NullTime
	ArchivedAt_3                            sql.NullTime
	Slug                                    string
	Name                                    string
	ID_3                                    string
	Name_2                                  string
	Description_2                           string
	Modifier                                string
	IconPath_2                              string
	ID                                      string
	PluralName                              string
	Notes                                   string
	Slug_2                                  string
	PluralName_2                            string
	ID_2                                    string
	Description                             string
	IconPath                                string
	Slug_3                                  sql.NullString
	Name_3                                  sql.NullString
	Description_3                           sql.NullString
	Warning                                 sql.NullString
	ShoppingSuggestions                     sql.NullString
	ID_4                                    sql.NullString
	StorageInstructions                     sql.NullString
	MaximumIdealStorageTemperatureInCelsius sql.NullString
	MinimumIdealStorageTemperatureInCelsius sql.NullString
	PluralName_3                            sql.NullString
	IconPath_3                              sql.NullString
	ContainsSesame                          sql.NullBool
	ContainsEgg                             sql.NullBool
	ContainsGluten                          sql.NullBool
	AnimalFlesh                             sql.NullBool
	Volumetric_3                            sql.NullBool
	IsLiquid                                sql.NullBool
	ContainsShellfish                       sql.NullBool
	AnimalDerived                           sql.NullBool
	ContainsWheat                           sql.NullBool
	RestrictToPreparations                  sql.NullBool
	ContainsSoy                             sql.NullBool
	ContainsTreeNut                         sql.NullBool
	ContainsPeanut                          sql.NullBool
	ContainsDairy                           sql.NullBool
	ContainsAlcohol                         sql.NullBool
	ContainsFish                            sql.NullBool
	IsStarch                                sql.NullBool
	IsProtein                               sql.NullBool
	IsGrain                                 sql.NullBool
	IsFruit                                 sql.NullBool
	IsSalt                                  sql.NullBool
	IsFat                                   sql.NullBool
	IsAcid                                  sql.NullBool
	IsHeat                                  sql.NullBool
	Volumetric                              sql.NullBool
	Volumetric_2                            sql.NullBool
	Universal_2                             bool
	Metric_2                                bool
	Imperial                                bool
	Metric                                  bool
	Universal                               bool
	Imperial_2                              bool
}

func (q *Queries) GetAllValidMeasurementConversionsFromMeasurementUnit(ctx context.Context, db DBTX, id string) ([]*GetAllValidMeasurementConversionsFromMeasurementUnitRow, error) {
	rows, err := db.QueryContext(ctx, getAllValidMeasurementConversionsFromMeasurementUnit, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetAllValidMeasurementConversionsFromMeasurementUnitRow{}
	for rows.Next() {
		var i GetAllValidMeasurementConversionsFromMeasurementUnitRow
		if err := rows.Scan(
			&i.ID,
			&i.ID_2,
			&i.Name,
			&i.Description,
			&i.Volumetric,
			&i.IconPath,
			&i.Universal,
			&i.Metric,
			&i.Imperial,
			&i.Slug,
			&i.PluralName,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.ID_3,
			&i.Name_2,
			&i.Description_2,
			&i.Volumetric_2,
			&i.IconPath_2,
			&i.Universal_2,
			&i.Metric_2,
			&i.Imperial_2,
			&i.Slug_2,
			&i.PluralName_2,
			&i.CreatedAt_2,
			&i.LastUpdatedAt_2,
			&i.ArchivedAt_2,
			&i.ID_4,
			&i.Name_3,
			&i.Description_3,
			&i.Warning,
			&i.ContainsEgg,
			&i.ContainsDairy,
			&i.ContainsPeanut,
			&i.ContainsTreeNut,
			&i.ContainsSoy,
			&i.ContainsWheat,
			&i.ContainsShellfish,
			&i.ContainsSesame,
			&i.ContainsFish,
			&i.ContainsGluten,
			&i.AnimalFlesh,
			&i.Volumetric_3,
			&i.IsLiquid,
			&i.IconPath_3,
			&i.AnimalDerived,
			&i.PluralName_3,
			&i.RestrictToPreparations,
			&i.MinimumIdealStorageTemperatureInCelsius,
			&i.MaximumIdealStorageTemperatureInCelsius,
			&i.StorageInstructions,
			&i.Slug_3,
			&i.ContainsAlcohol,
			&i.ShoppingSuggestions,
			&i.IsStarch,
			&i.IsProtein,
			&i.IsGrain,
			&i.IsFruit,
			&i.IsSalt,
			&i.IsFat,
			&i.IsAcid,
			&i.IsHeat,
			&i.CreatedAt_3,
			&i.LastUpdatedAt_3,
			&i.ArchivedAt_3,
			&i.Modifier,
			&i.Notes,
			&i.CreatedAt_4,
			&i.LastUpdatedAt_4,
			&i.ArchivedAt_4,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
