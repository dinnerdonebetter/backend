// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: oauth2_clients.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const archiveOAuth2Client = `-- name: ArchiveOAuth2Client :exec

UPDATE oauth2_clients SET
	archived_at = NOW()
WHERE archived_at IS NULL
	AND id = $1
`

func (q *Queries) ArchiveOAuth2Client(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, archiveOAuth2Client, id)
	return err
}

const createOAuth2Client = `-- name: CreateOAuth2Client :exec

INSERT INTO oauth2_clients (id,"name",client_id,client_secret) VALUES ($1,$2,$3,$4)
`

type CreateOAuth2ClientParams struct {
	ID           string
	Name         string
	ClientID     string
	ClientSecret string
}

func (q *Queries) CreateOAuth2Client(ctx context.Context, db DBTX, arg *CreateOAuth2ClientParams) error {
	_, err := db.ExecContext(ctx, createOAuth2Client,
		arg.ID,
		arg.Name,
		arg.ClientID,
		arg.ClientSecret,
	)
	return err
}

const getOAuth2ClientByClientID = `-- name: GetOAuth2ClientByClientID :one

SELECT
	oauth2_clients.id,
	oauth2_clients.name,
	oauth2_clients.client_id,
	oauth2_clients.client_secret,
	oauth2_clients.created_at,
	oauth2_clients.archived_at
FROM oauth2_clients
WHERE oauth2_clients.archived_at IS NULL
	AND oauth2_clients.client_id = $1
`

type GetOAuth2ClientByClientIDRow struct {
	ID           string
	Name         string
	ClientID     string
	ClientSecret string
	CreatedAt    time.Time
	ArchivedAt   sql.NullTime
}

func (q *Queries) GetOAuth2ClientByClientID(ctx context.Context, db DBTX, clientID string) (*GetOAuth2ClientByClientIDRow, error) {
	row := db.QueryRowContext(ctx, getOAuth2ClientByClientID, clientID)
	var i GetOAuth2ClientByClientIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ClientID,
		&i.ClientSecret,
		&i.CreatedAt,
		&i.ArchivedAt,
	)
	return &i, err
}

const getOAuth2ClientByDatabaseID = `-- name: GetOAuth2ClientByDatabaseID :one

SELECT
	oauth2_clients.id,
	oauth2_clients.name,
	oauth2_clients.client_id,
	oauth2_clients.client_secret,
	oauth2_clients.created_at,
	oauth2_clients.archived_at
FROM oauth2_clients
WHERE oauth2_clients.archived_at IS NULL
	AND oauth2_clients.id = $1
`

type GetOAuth2ClientByDatabaseIDRow struct {
	ID           string
	Name         string
	ClientID     string
	ClientSecret string
	CreatedAt    time.Time
	ArchivedAt   sql.NullTime
}

func (q *Queries) GetOAuth2ClientByDatabaseID(ctx context.Context, db DBTX, id string) (*GetOAuth2ClientByDatabaseIDRow, error) {
	row := db.QueryRowContext(ctx, getOAuth2ClientByDatabaseID, id)
	var i GetOAuth2ClientByDatabaseIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ClientID,
		&i.ClientSecret,
		&i.CreatedAt,
		&i.ArchivedAt,
	)
	return &i, err
}
