// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: get_for_meal_plan_event.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const getMealPlanOptionsForMealPlanEvent = `-- name: GetMealPlanOptionsForMealPlanEvent :many

SELECT
	meal_plan_options.id,
	meal_plan_options.assigned_cook,
	meal_plan_options.assigned_dishwasher,
	meal_plan_options.chosen,
	meal_plan_options.tiebroken,
    meal_plan_options.meal_scale,
	meal_plan_options.meal_id,
	meal_plan_options.notes,
	meal_plan_options.created_at,
	meal_plan_options.last_updated_at,
	meal_plan_options.archived_at,
	meal_plan_options.belongs_to_meal_plan_event,
	meals.id,
	meals.name,
	meals.description,
	meals.min_estimated_portions,
	meals.max_estimated_portions,
    meals.eligible_for_meal_plans,
	meals.created_at,
	meals.last_updated_at,
	meals.archived_at,
	meals.created_by_user
FROM meal_plan_options
	JOIN meal_plan_events ON meal_plan_options.belongs_to_meal_plan_event = meal_plan_events.id
	JOIN meal_plans ON meal_plan_events.belongs_to_meal_plan = meal_plans.id
	JOIN meals ON meal_plan_options.meal_id = meals.id
WHERE
	meal_plan_options.archived_at IS NULL
	AND meal_plan_options.belongs_to_meal_plan_event = $1
	AND meal_plan_events.id = $1
	AND meal_plan_events.belongs_to_meal_plan = $2
	AND meal_plans.archived_at IS NULL
	AND meal_plans.id = $2
`

type GetMealPlanOptionsForMealPlanEventParams struct {
	BelongsToMealPlanEvent sql.NullString
	BelongsToMealPlan      string
}

type GetMealPlanOptionsForMealPlanEventRow struct {
	ID                     string
	AssignedCook           sql.NullString
	AssignedDishwasher     sql.NullString
	Chosen                 bool
	Tiebroken              bool
	MealScale              string
	MealID                 string
	Notes                  string
	CreatedAt              time.Time
	LastUpdatedAt          sql.NullTime
	ArchivedAt             sql.NullTime
	BelongsToMealPlanEvent sql.NullString
	ID_2                   string
	Name                   string
	Description            string
	MinEstimatedPortions   string
	MaxEstimatedPortions   sql.NullString
	EligibleForMealPlans   bool
	CreatedAt_2            time.Time
	LastUpdatedAt_2        sql.NullTime
	ArchivedAt_2           sql.NullTime
	CreatedByUser          string
}

func (q *Queries) GetMealPlanOptionsForMealPlanEvent(ctx context.Context, db DBTX, arg *GetMealPlanOptionsForMealPlanEventParams) ([]*GetMealPlanOptionsForMealPlanEventRow, error) {
	rows, err := db.QueryContext(ctx, getMealPlanOptionsForMealPlanEvent, arg.BelongsToMealPlanEvent, arg.BelongsToMealPlan)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetMealPlanOptionsForMealPlanEventRow{}
	for rows.Next() {
		var i GetMealPlanOptionsForMealPlanEventRow
		if err := rows.Scan(
			&i.ID,
			&i.AssignedCook,
			&i.AssignedDishwasher,
			&i.Chosen,
			&i.Tiebroken,
			&i.MealScale,
			&i.MealID,
			&i.Notes,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.BelongsToMealPlanEvent,
			&i.ID_2,
			&i.Name,
			&i.Description,
			&i.MinEstimatedPortions,
			&i.MaxEstimatedPortions,
			&i.EligibleForMealPlans,
			&i.CreatedAt_2,
			&i.LastUpdatedAt_2,
			&i.ArchivedAt_2,
			&i.CreatedByUser,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
