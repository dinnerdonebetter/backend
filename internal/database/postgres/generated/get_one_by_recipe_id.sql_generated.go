// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: get_one_by_recipe_id.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const getRecipeStepByRecipeID = `-- name: GetRecipeStepByRecipeID :one

SELECT
	recipe_steps.id,
	recipe_steps.index,
	valid_preparations.id,
	valid_preparations.name,
	valid_preparations.description,
	valid_preparations.icon_path,
	valid_preparations.yields_nothing,
	valid_preparations.restrict_to_ingredients,
	valid_preparations.minimum_ingredient_count,
	valid_preparations.maximum_ingredient_count,
	valid_preparations.minimum_instrument_count,
	valid_preparations.maximum_instrument_count,
	valid_preparations.temperature_required,
	valid_preparations.time_estimate_required,
	valid_preparations.condition_expression_required,
    valid_preparations.consumes_vessel,
    valid_preparations.only_for_vessels,
    valid_preparations.minimum_vessel_count,
    valid_preparations.maximum_vessel_count,
	valid_preparations.slug,
	valid_preparations.past_tense,
	valid_preparations.created_at,
	valid_preparations.last_updated_at,
	valid_preparations.archived_at,
	recipe_steps.minimum_estimated_time_in_seconds,
	recipe_steps.maximum_estimated_time_in_seconds,
	recipe_steps.minimum_temperature_in_celsius,
	recipe_steps.maximum_temperature_in_celsius,
	recipe_steps.notes,
	recipe_steps.explicit_instructions,
	recipe_steps.condition_expression,
	recipe_steps.optional,
	recipe_steps.start_timer_automatically,
	recipe_steps.created_at,
	recipe_steps.last_updated_at,
	recipe_steps.archived_at,
	recipe_steps.belongs_to_recipe
FROM recipe_steps
	JOIN recipes ON recipe_steps.belongs_to_recipe=recipes.id
	JOIN valid_preparations ON recipe_steps.preparation_id=valid_preparations.id
WHERE recipe_steps.archived_at IS NULL
	AND recipe_steps.id = $1
`

type GetRecipeStepByRecipeIDRow struct {
	CreatedAt                     time.Time
	CreatedAt_2                   time.Time
	ArchivedAt_2                  sql.NullTime
	LastUpdatedAt                 sql.NullTime
	ArchivedAt                    sql.NullTime
	LastUpdatedAt_2               sql.NullTime
	ConditionExpression           string
	ID_2                          string
	Description                   string
	ID                            string
	Name                          string
	ExplicitInstructions          string
	Notes                         string
	IconPath                      string
	PastTense                     string
	Slug                          string
	BelongsToRecipe               string
	MaximumTemperatureInCelsius   sql.NullString
	MinimumTemperatureInCelsius   sql.NullString
	MinimumEstimatedTimeInSeconds sql.NullInt64
	MaximumEstimatedTimeInSeconds sql.NullInt64
	MaximumIngredientCount        sql.NullInt32
	MaximumVesselCount            sql.NullInt32
	MaximumInstrumentCount        sql.NullInt32
	MinimumVesselCount            int32
	Index                         int32
	MinimumIngredientCount        int32
	MinimumInstrumentCount        int32
	TemperatureRequired           bool
	TimeEstimateRequired          bool
	ConditionExpressionRequired   bool
	Optional                      bool
	StartTimerAutomatically       bool
	ConsumesVessel                bool
	RestrictToIngredients         bool
	YieldsNothing                 bool
	OnlyForVessels                bool
}

func (q *Queries) GetRecipeStepByRecipeID(ctx context.Context, db DBTX, id string) (*GetRecipeStepByRecipeIDRow, error) {
	row := db.QueryRowContext(ctx, getRecipeStepByRecipeID, id)
	var i GetRecipeStepByRecipeIDRow
	err := row.Scan(
		&i.ID,
		&i.Index,
		&i.ID_2,
		&i.Name,
		&i.Description,
		&i.IconPath,
		&i.YieldsNothing,
		&i.RestrictToIngredients,
		&i.MinimumIngredientCount,
		&i.MaximumIngredientCount,
		&i.MinimumInstrumentCount,
		&i.MaximumInstrumentCount,
		&i.TemperatureRequired,
		&i.TimeEstimateRequired,
		&i.ConditionExpressionRequired,
		&i.ConsumesVessel,
		&i.OnlyForVessels,
		&i.MinimumVesselCount,
		&i.MaximumVesselCount,
		&i.Slug,
		&i.PastTense,
		&i.CreatedAt,
		&i.LastUpdatedAt,
		&i.ArchivedAt,
		&i.MinimumEstimatedTimeInSeconds,
		&i.MaximumEstimatedTimeInSeconds,
		&i.MinimumTemperatureInCelsius,
		&i.MaximumTemperatureInCelsius,
		&i.Notes,
		&i.ExplicitInstructions,
		&i.ConditionExpression,
		&i.Optional,
		&i.StartTimerAutomatically,
		&i.CreatedAt_2,
		&i.LastUpdatedAt_2,
		&i.ArchivedAt_2,
		&i.BelongsToRecipe,
	)
	return &i, err
}
