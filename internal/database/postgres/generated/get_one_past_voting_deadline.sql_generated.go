// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: get_one_past_voting_deadline.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const getOnePastVotingDeadline = `-- name: GetOnePastVotingDeadline :one

SELECT
	meal_plans.id,
	meal_plans.notes,
	meal_plans.status,
	meal_plans.voting_deadline,
	meal_plans.grocery_list_initialized,
	meal_plans.tasks_created,
	meal_plans.election_method,
	meal_plans.created_at,
	meal_plans.last_updated_at,
	meal_plans.archived_at,
	meal_plans.belongs_to_household,
	meal_plans.created_by_user
FROM meal_plans
WHERE meal_plans.archived_at IS NULL
	AND meal_plans.id = $1
	AND meal_plans.belongs_to_household = $2
	AND meal_plans.status = 'awaiting_votes'
	AND NOW() > meal_plans.voting_deadline
`

type GetOnePastVotingDeadlineParams struct {
	ID                 string
	BelongsToHousehold string
}

type GetOnePastVotingDeadlineRow struct {
	VotingDeadline         time.Time
	CreatedAt              time.Time
	LastUpdatedAt          sql.NullTime
	ArchivedAt             sql.NullTime
	ID                     string
	Notes                  string
	Status                 MealPlanStatus
	ElectionMethod         ValidElectionMethod
	BelongsToHousehold     string
	CreatedByUser          string
	GroceryListInitialized bool
	TasksCreated           bool
}

func (q *Queries) GetOnePastVotingDeadline(ctx context.Context, db DBTX, arg *GetOnePastVotingDeadlineParams) (*GetOnePastVotingDeadlineRow, error) {
	row := db.QueryRowContext(ctx, getOnePastVotingDeadline, arg.ID, arg.BelongsToHousehold)
	var i GetOnePastVotingDeadlineRow
	err := row.Scan(
		&i.ID,
		&i.Notes,
		&i.Status,
		&i.VotingDeadline,
		&i.GroceryListInitialized,
		&i.TasksCreated,
		&i.ElectionMethod,
		&i.CreatedAt,
		&i.LastUpdatedAt,
		&i.ArchivedAt,
		&i.BelongsToHousehold,
		&i.CreatedByUser,
	)
	return &i, err
}
