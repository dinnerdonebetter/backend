// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: meal_plan_options_get_one.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const GetMealPlanOption = `-- name: GetMealPlanOption :one
SELECT
	meal_plan_options.id,
	meal_plan_options.assigned_cook,
	meal_plan_options.assigned_dishwasher,
	meal_plan_options.chosen,
	meal_plan_options.tiebroken,
	meal_plan_options.meal_id,
	meal_plan_options.notes,
	meal_plan_options.created_at,
	meal_plan_options.last_updated_at,
	meal_plan_options.archived_at,
	meal_plan_options.belongs_to_meal_plan_event,
	meals.id,
	meals.name,
	meals.description,
	meals.created_at,
	meals.last_updated_at,
	meals.archived_at,
	meals.created_by_user
FROM meal_plan_options
	JOIN meal_plan_events ON meal_plan_options.belongs_to_meal_plan_event = meal_plan_events.id
	JOIN meal_plans ON meal_plan_events.belongs_to_meal_plan = meal_plans.id
	JOIN meals ON meal_plan_options.meal_id = meals.id
WHERE meal_plan_options.archived_at IS NULL
	AND meal_plan_options.belongs_to_meal_plan_event = $2
	AND meal_plan_options.id = $3
	AND meal_plan_events.id = $2
	AND meal_plan_events.belongs_to_meal_plan = $1
	AND meal_plans.archived_at IS NULL
	AND meal_plans.id = $1
`

type GetMealPlanOptionParams struct {
	BelongsToMealPlan      string
	BelongsToMealPlanEvent sql.NullString
	ID                     string
}

type GetMealPlanOptionRow struct {
	ID                     string
	AssignedCook           sql.NullString
	AssignedDishwasher     sql.NullString
	Chosen                 bool
	Tiebroken              bool
	MealID                 string
	Notes                  string
	CreatedAt              time.Time
	LastUpdatedAt          sql.NullTime
	ArchivedAt             sql.NullTime
	BelongsToMealPlanEvent sql.NullString
	ID_2                   string
	Name                   string
	Description            string
	CreatedAt_2            time.Time
	LastUpdatedAt_2        sql.NullTime
	ArchivedAt_2           sql.NullTime
	CreatedByUser          string
}

func (q *Queries) GetMealPlanOption(ctx context.Context, arg *GetMealPlanOptionParams) (*GetMealPlanOptionRow, error) {
	row := q.db.QueryRowContext(ctx, GetMealPlanOption, arg.BelongsToMealPlan, arg.BelongsToMealPlanEvent, arg.ID)
	var i GetMealPlanOptionRow
	err := row.Scan(
		&i.ID,
		&i.AssignedCook,
		&i.AssignedDishwasher,
		&i.Chosen,
		&i.Tiebroken,
		&i.MealID,
		&i.Notes,
		&i.CreatedAt,
		&i.LastUpdatedAt,
		&i.ArchivedAt,
		&i.BelongsToMealPlanEvent,
		&i.ID_2,
		&i.Name,
		&i.Description,
		&i.CreatedAt_2,
		&i.LastUpdatedAt_2,
		&i.ArchivedAt_2,
		&i.CreatedByUser,
	)
	return &i, err
}
