// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: valid_ingredient_measurement_units_get_one.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const GetValidIngredientMeasurementUnit = `-- name: GetValidIngredientMeasurementUnit :exec
SELECT
	valid_ingredient_measurement_units.id,
	valid_ingredient_measurement_units.notes,
	valid_measurement_units.id,
	valid_measurement_units.name,
	valid_measurement_units.description,
	valid_measurement_units.volumetric,
	valid_measurement_units.icon_path,
	valid_measurement_units.universal,
	valid_measurement_units.metric,
	valid_measurement_units.imperial,
	valid_measurement_units.plural_name,
	valid_measurement_units.created_at,
	valid_measurement_units.last_updated_at,
	valid_measurement_units.archived_at,
	valid_ingredients.id,
	valid_ingredients.name,
	valid_ingredients.description,
	valid_ingredients.warning,
	valid_ingredients.contains_egg,
	valid_ingredients.contains_dairy,
	valid_ingredients.contains_peanut,
	valid_ingredients.contains_tree_nut,
	valid_ingredients.contains_soy,
	valid_ingredients.contains_wheat,
	valid_ingredients.contains_shellfish,
	valid_ingredients.contains_sesame,
	valid_ingredients.contains_fish,
	valid_ingredients.contains_gluten,
	valid_ingredients.animal_flesh,
	valid_ingredients.volumetric,
	valid_ingredients.is_liquid,
	valid_ingredients.icon_path,
	valid_ingredients.animal_derived,
	valid_ingredients.plural_name,
	valid_ingredients.restrict_to_preparations,
	valid_ingredients.minimum_ideal_storage_temperature_in_celsius,
	valid_ingredients.maximum_ideal_storage_temperature_in_celsius,
	valid_ingredients.storage_instructions,
	valid_ingredients.created_at,
	valid_ingredients.last_updated_at,
	valid_ingredients.archived_at,
	valid_ingredient_measurement_units.minimum_allowable_quantity,
	valid_ingredient_measurement_units.maximum_allowable_quantity,
	valid_ingredient_measurement_units.created_at,
	valid_ingredient_measurement_units.last_updated_at,
	valid_ingredient_measurement_units.archived_at
FROM valid_ingredient_measurement_units
	JOIN valid_measurement_units ON valid_ingredient_measurement_units.valid_measurement_unit_id = valid_measurement_units.id
	JOIN valid_ingredients ON valid_ingredient_measurement_units.valid_ingredient_id = valid_ingredients.id
WHERE valid_ingredient_measurement_units.archived_at IS NULL
	AND valid_ingredient_measurement_units.id = $1
`

type GetValidIngredientMeasurementUnitRow struct {
	ID                                      string
	Notes                                   string
	ID_2                                    string
	Name                                    string
	Description                             string
	Volumetric                              sql.NullBool
	IconPath                                string
	Universal                               bool
	Metric                                  bool
	Imperial                                bool
	PluralName                              string
	CreatedAt                               time.Time
	LastUpdatedAt                           sql.NullTime
	ArchivedAt                              sql.NullTime
	ID_3                                    string
	Name_2                                  string
	Description_2                           string
	Warning                                 string
	ContainsEgg                             bool
	ContainsDairy                           bool
	ContainsPeanut                          bool
	ContainsTreeNut                         bool
	ContainsSoy                             bool
	ContainsWheat                           bool
	ContainsShellfish                       bool
	ContainsSesame                          bool
	ContainsFish                            bool
	ContainsGluten                          bool
	AnimalFlesh                             bool
	Volumetric_2                            bool
	IsLiquid                                sql.NullBool
	IconPath_2                              string
	AnimalDerived                           bool
	PluralName_2                            string
	RestrictToPreparations                  bool
	MinimumIdealStorageTemperatureInCelsius sql.NullString
	MaximumIdealStorageTemperatureInCelsius sql.NullString
	StorageInstructions                     string
	CreatedAt_2                             time.Time
	LastUpdatedAt_2                         sql.NullTime
	ArchivedAt_2                            sql.NullTime
	MinimumAllowableQuantity                string
	MaximumAllowableQuantity                string
	CreatedAt_3                             time.Time
	LastUpdatedAt_3                         sql.NullTime
	ArchivedAt_3                            sql.NullTime
}

func (q *Queries) GetValidIngredientMeasurementUnit(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, GetValidIngredientMeasurementUnit, id)
	return err
}
