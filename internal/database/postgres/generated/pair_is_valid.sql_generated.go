// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: pair_is_valid.sql

package generated

import (
	"context"
)

const checkValidityOfValidIngredientStateIngredientPair = `-- name: CheckValidityOfValidIngredientStateIngredientPair :one

SELECT EXISTS(
	SELECT id
	FROM valid_ingredient_state_ingredients
	WHERE valid_ingredient = $1
	AND valid_ingredient_state = $2
	AND archived_at IS NULL
)
`

type CheckValidityOfValidIngredientStateIngredientPairParams struct {
	ValidIngredient      string
	ValidIngredientState string
}

func (q *Queries) CheckValidityOfValidIngredientStateIngredientPair(ctx context.Context, db DBTX, arg *CheckValidityOfValidIngredientStateIngredientPairParams) (bool, error) {
	row := db.QueryRowContext(ctx, checkValidityOfValidIngredientStateIngredientPair, arg.ValidIngredient, arg.ValidIngredientState)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const validIngredientMeasurementUnitPairIsValid = `-- name: ValidIngredientMeasurementUnitPairIsValid :one

SELECT EXISTS(
	SELECT id
	FROM valid_ingredient_measurement_units
	WHERE valid_measurement_unit_id = $1
	AND valid_ingredient_id = $2
	AND archived_at IS NULL
)
`

type ValidIngredientMeasurementUnitPairIsValidParams struct {
	ValidMeasurementUnitID string
	ValidIngredientID      string
}

func (q *Queries) ValidIngredientMeasurementUnitPairIsValid(ctx context.Context, db DBTX, arg *ValidIngredientMeasurementUnitPairIsValidParams) (bool, error) {
	row := db.QueryRowContext(ctx, validIngredientMeasurementUnitPairIsValid, arg.ValidMeasurementUnitID, arg.ValidIngredientID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const validIngredientPreparationPairIsValid = `-- name: ValidIngredientPreparationPairIsValid :one

SELECT EXISTS(
	SELECT id
	FROM valid_ingredient_preparations
	WHERE valid_ingredient_id = $1
	AND valid_preparation_id = $2
	AND archived_at IS NULL
)
`

type ValidIngredientPreparationPairIsValidParams struct {
	ValidIngredientID  string
	ValidPreparationID string
}

func (q *Queries) ValidIngredientPreparationPairIsValid(ctx context.Context, db DBTX, arg *ValidIngredientPreparationPairIsValidParams) (bool, error) {
	row := db.QueryRowContext(ctx, validIngredientPreparationPairIsValid, arg.ValidIngredientID, arg.ValidPreparationID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const validPreparationInstrumentPairIsValid = `-- name: ValidPreparationInstrumentPairIsValid :one

SELECT EXISTS(
	SELECT id
	FROM valid_preparation_instruments
	WHERE valid_instrument_id = $1
	AND valid_preparation_id = $2
	AND archived_at IS NULL
)
`

type ValidPreparationInstrumentPairIsValidParams struct {
	ValidInstrumentID  string
	ValidPreparationID string
}

func (q *Queries) ValidPreparationInstrumentPairIsValid(ctx context.Context, db DBTX, arg *ValidPreparationInstrumentPairIsValidParams) (bool, error) {
	row := db.QueryRowContext(ctx, validPreparationInstrumentPairIsValid, arg.ValidInstrumentID, arg.ValidPreparationID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const validPreparationVesselPairIsValid = `-- name: ValidPreparationVesselPairIsValid :one

SELECT EXISTS(
	SELECT id
	FROM valid_preparation_vessels
	WHERE valid_vessel_id = $1
	AND valid_preparation_id = $2
	AND archived_at IS NULL
)
`

type ValidPreparationVesselPairIsValidParams struct {
	ValidVesselID      string
	ValidPreparationID string
}

func (q *Queries) ValidPreparationVesselPairIsValid(ctx context.Context, db DBTX, arg *ValidPreparationVesselPairIsValidParams) (bool, error) {
	row := db.QueryRowContext(ctx, validPreparationVesselPairIsValid, arg.ValidVesselID, arg.ValidPreparationID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
