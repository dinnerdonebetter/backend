// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: valid_preparations_get_random.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const GetRandomValidPreparation = `-- name: GetRandomValidPreparation :one
SELECT
	valid_preparations.id,
	valid_preparations.name,
	valid_preparations.description,
	valid_preparations.icon_path,
	valid_preparations.yields_nothing,
	valid_preparations.restrict_to_ingredients,
	valid_preparations.zero_ingredients_allowable,
	valid_preparations.past_tense,
	valid_preparations.created_at,
	valid_preparations.last_updated_at,
	valid_preparations.archived_at
FROM valid_preparations
WHERE valid_preparations.archived_at IS NULL
	ORDER BY random() LIMIT 1
`

type GetRandomValidPreparationRow struct {
	ID                       string
	Name                     string
	Description              string
	IconPath                 string
	YieldsNothing            bool
	RestrictToIngredients    bool
	ZeroIngredientsAllowable bool
	PastTense                string
	CreatedAt                time.Time
	LastUpdatedAt            sql.NullTime
	ArchivedAt               sql.NullTime
}

func (q *Queries) GetRandomValidPreparation(ctx context.Context) (*GetRandomValidPreparationRow, error) {
	row := q.db.QueryRowContext(ctx, GetRandomValidPreparation)
	var i GetRandomValidPreparationRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IconPath,
		&i.YieldsNothing,
		&i.RestrictToIngredients,
		&i.ZeroIngredientsAllowable,
		&i.PastTense,
		&i.CreatedAt,
		&i.LastUpdatedAt,
		&i.ArchivedAt,
	)
	return &i, err
}
