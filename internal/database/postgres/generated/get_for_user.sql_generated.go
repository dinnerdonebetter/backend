// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: get_for_user.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const getHouseholdUserMembershipsForUser = `-- name: GetHouseholdUserMembershipsForUser :many

SELECT
	household_user_memberships.id,
	household_user_memberships.belongs_to_user,
	household_user_memberships.belongs_to_household,
	household_user_memberships.household_role,
	household_user_memberships.default_household,
	household_user_memberships.created_at,
	household_user_memberships.last_updated_at,
	household_user_memberships.archived_at
FROM household_user_memberships
	JOIN households ON households.id = household_user_memberships.belongs_to_household
WHERE household_user_memberships.archived_at IS NULL
	AND household_user_memberships.belongs_to_user = $1
`

type GetHouseholdUserMembershipsForUserRow struct {
	ID                 string
	BelongsToUser      string
	BelongsToHousehold string
	HouseholdRole      string
	DefaultHousehold   bool
	CreatedAt          time.Time
	LastUpdatedAt      sql.NullTime
	ArchivedAt         sql.NullTime
}

func (q *Queries) GetHouseholdUserMembershipsForUser(ctx context.Context, db DBTX, belongsToUser string) ([]*GetHouseholdUserMembershipsForUserRow, error) {
	rows, err := db.QueryContext(ctx, getHouseholdUserMembershipsForUser, belongsToUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetHouseholdUserMembershipsForUserRow{}
	for rows.Next() {
		var i GetHouseholdUserMembershipsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.BelongsToUser,
			&i.BelongsToHousehold,
			&i.HouseholdRole,
			&i.DefaultHousehold,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserIngredientPreferencesForUser = `-- name: GetUserIngredientPreferencesForUser :many

SELECT
	user_ingredient_preferences.id,
    valid_ingredients.id,
    valid_ingredients.name,
    valid_ingredients.description,
    valid_ingredients.warning,
    valid_ingredients.contains_egg,
    valid_ingredients.contains_dairy,
    valid_ingredients.contains_peanut,
    valid_ingredients.contains_tree_nut,
    valid_ingredients.contains_soy,
    valid_ingredients.contains_wheat,
    valid_ingredients.contains_shellfish,
    valid_ingredients.contains_sesame,
    valid_ingredients.contains_fish,
    valid_ingredients.contains_gluten,
    valid_ingredients.animal_flesh,
    valid_ingredients.volumetric,
    valid_ingredients.is_liquid,
    valid_ingredients.icon_path,
    valid_ingredients.animal_derived,
    valid_ingredients.plural_name,
    valid_ingredients.restrict_to_preparations,
    valid_ingredients.minimum_ideal_storage_temperature_in_celsius,
    valid_ingredients.maximum_ideal_storage_temperature_in_celsius,
    valid_ingredients.storage_instructions,
    valid_ingredients.slug,
    valid_ingredients.contains_alcohol,
    valid_ingredients.shopping_suggestions,
    valid_ingredients.is_starch,
    valid_ingredients.is_protein,
    valid_ingredients.is_grain,
    valid_ingredients.is_fruit,
    valid_ingredients.is_salt,
    valid_ingredients.is_fat,
    valid_ingredients.is_acid,
    valid_ingredients.is_heat,
    valid_ingredients.created_at,
    valid_ingredients.last_updated_at,
    valid_ingredients.archived_at,
    user_ingredient_preferences.rating,
    user_ingredient_preferences.notes,
    user_ingredient_preferences.allergy,
    user_ingredient_preferences.created_at,
    user_ingredient_preferences.last_updated_at,
    user_ingredient_preferences.archived_at,
    user_ingredient_preferences.belongs_to_user
FROM user_ingredient_preferences
  JOIN valid_ingredients ON valid_ingredients.id = user_ingredient_preferences.ingredient
WHERE user_ingredient_preferences.archived_at IS NULL
	AND valid_ingredients.archived_at IS NULL
	AND user_ingredient_preferences.id = $1
	AND user_ingredient_preferences.belongs_to_user = $2
`

type GetUserIngredientPreferencesForUserParams struct {
	ID            string
	BelongsToUser string
}

type GetUserIngredientPreferencesForUserRow struct {
	ID                                      string
	ID_2                                    string
	Name                                    string
	Description                             string
	Warning                                 string
	ContainsEgg                             bool
	ContainsDairy                           bool
	ContainsPeanut                          bool
	ContainsTreeNut                         bool
	ContainsSoy                             bool
	ContainsWheat                           bool
	ContainsShellfish                       bool
	ContainsSesame                          bool
	ContainsFish                            bool
	ContainsGluten                          bool
	AnimalFlesh                             bool
	Volumetric                              bool
	IsLiquid                                sql.NullBool
	IconPath                                string
	AnimalDerived                           bool
	PluralName                              string
	RestrictToPreparations                  bool
	MinimumIdealStorageTemperatureInCelsius sql.NullString
	MaximumIdealStorageTemperatureInCelsius sql.NullString
	StorageInstructions                     string
	Slug                                    string
	ContainsAlcohol                         bool
	ShoppingSuggestions                     string
	IsStarch                                bool
	IsProtein                               bool
	IsGrain                                 bool
	IsFruit                                 bool
	IsSalt                                  bool
	IsFat                                   bool
	IsAcid                                  bool
	IsHeat                                  bool
	CreatedAt                               time.Time
	LastUpdatedAt                           sql.NullTime
	ArchivedAt                              sql.NullTime
	Rating                                  int16
	Notes                                   string
	Allergy                                 bool
	CreatedAt_2                             time.Time
	LastUpdatedAt_2                         sql.NullTime
	ArchivedAt_2                            sql.NullTime
	BelongsToUser                           string
}

func (q *Queries) GetUserIngredientPreferencesForUser(ctx context.Context, db DBTX, arg *GetUserIngredientPreferencesForUserParams) ([]*GetUserIngredientPreferencesForUserRow, error) {
	rows, err := db.QueryContext(ctx, getUserIngredientPreferencesForUser, arg.ID, arg.BelongsToUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetUserIngredientPreferencesForUserRow{}
	for rows.Next() {
		var i GetUserIngredientPreferencesForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.ID_2,
			&i.Name,
			&i.Description,
			&i.Warning,
			&i.ContainsEgg,
			&i.ContainsDairy,
			&i.ContainsPeanut,
			&i.ContainsTreeNut,
			&i.ContainsSoy,
			&i.ContainsWheat,
			&i.ContainsShellfish,
			&i.ContainsSesame,
			&i.ContainsFish,
			&i.ContainsGluten,
			&i.AnimalFlesh,
			&i.Volumetric,
			&i.IsLiquid,
			&i.IconPath,
			&i.AnimalDerived,
			&i.PluralName,
			&i.RestrictToPreparations,
			&i.MinimumIdealStorageTemperatureInCelsius,
			&i.MaximumIdealStorageTemperatureInCelsius,
			&i.StorageInstructions,
			&i.Slug,
			&i.ContainsAlcohol,
			&i.ShoppingSuggestions,
			&i.IsStarch,
			&i.IsProtein,
			&i.IsGrain,
			&i.IsFruit,
			&i.IsSalt,
			&i.IsFat,
			&i.IsAcid,
			&i.IsHeat,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.Rating,
			&i.Notes,
			&i.Allergy,
			&i.CreatedAt_2,
			&i.LastUpdatedAt_2,
			&i.ArchivedAt_2,
			&i.BelongsToUser,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWebhooksForUser = `-- name: GetWebhooksForUser :many

SELECT webhooks.id,
       webhooks.name,
       webhooks.content_type,
       webhooks.url,
       webhooks.method,
       webhook_trigger_events.id,
       webhook_trigger_events.trigger_event,
       webhook_trigger_events.belongs_to_webhook,
       webhook_trigger_events.created_at,
       webhook_trigger_events.archived_at,
       webhooks.created_at,
       webhooks.last_updated_at,
       webhooks.archived_at,
       webhooks.belongs_to_household
  FROM webhooks
       JOIN webhook_trigger_events ON
			webhook_trigger_events.belongs_to_webhook
			= webhooks.id
 WHERE webhook_trigger_events.archived_at IS NULL
       AND webhooks.archived_at IS NULL
       AND webhooks.belongs_to_household = $1
       AND webhooks.id = $2
`

type GetWebhooksForUserParams struct {
	BelongsToHousehold string
	ID                 string
}

type GetWebhooksForUserRow struct {
	ID                 string
	Name               string
	ContentType        string
	URL                string
	Method             string
	ID_2               string
	TriggerEvent       WebhookEvent
	BelongsToWebhook   string
	CreatedAt          time.Time
	ArchivedAt         sql.NullTime
	CreatedAt_2        time.Time
	LastUpdatedAt      sql.NullTime
	ArchivedAt_2       sql.NullTime
	BelongsToHousehold string
}

func (q *Queries) GetWebhooksForUser(ctx context.Context, db DBTX, arg *GetWebhooksForUserParams) ([]*GetWebhooksForUserRow, error) {
	rows, err := db.QueryContext(ctx, getWebhooksForUser, arg.BelongsToHousehold, arg.ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetWebhooksForUserRow{}
	for rows.Next() {
		var i GetWebhooksForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ContentType,
			&i.URL,
			&i.Method,
			&i.ID_2,
			&i.TriggerEvent,
			&i.BelongsToWebhook,
			&i.CreatedAt,
			&i.ArchivedAt,
			&i.CreatedAt_2,
			&i.LastUpdatedAt,
			&i.ArchivedAt_2,
			&i.BelongsToHousehold,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
