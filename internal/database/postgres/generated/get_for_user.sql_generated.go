// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: get_for_user.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const GetHouseholdUserMembershipsForUser = `-- name: GetHouseholdUserMembershipsForUser :many

SELECT
	household_user_memberships.id,
	household_user_memberships.belongs_to_user,
	household_user_memberships.belongs_to_household,
	household_user_memberships.household_role,
	household_user_memberships.default_household,
	household_user_memberships.created_at,
	household_user_memberships.last_updated_at,
	household_user_memberships.archived_at
FROM household_user_memberships
	JOIN households ON households.id = household_user_memberships.belongs_to_household
WHERE household_user_memberships.archived_at IS NULL
	AND household_user_memberships.belongs_to_user = $1
`

type GetHouseholdUserMembershipsForUserRow struct {
	CreatedAt          time.Time    `db:"created_at"`
	LastUpdatedAt      sql.NullTime `db:"last_updated_at"`
	ArchivedAt         sql.NullTime `db:"archived_at"`
	ID                 string       `db:"id"`
	BelongsToUser      string       `db:"belongs_to_user"`
	BelongsToHousehold string       `db:"belongs_to_household"`
	HouseholdRole      string       `db:"household_role"`
	DefaultHousehold   bool         `db:"default_household"`
}

func (q *Queries) GetHouseholdUserMembershipsForUser(ctx context.Context, db DBTX, belongsToUser string) ([]*GetHouseholdUserMembershipsForUserRow, error) {
	rows, err := db.QueryContext(ctx, GetHouseholdUserMembershipsForUser, belongsToUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetHouseholdUserMembershipsForUserRow{}
	for rows.Next() {
		var i GetHouseholdUserMembershipsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.BelongsToUser,
			&i.BelongsToHousehold,
			&i.HouseholdRole,
			&i.DefaultHousehold,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetUserIngredientPreferencesForUser = `-- name: GetUserIngredientPreferencesForUser :many

SELECT
	user_ingredient_preferences.id,
    valid_ingredients.id,
    valid_ingredients.name,
    valid_ingredients.description,
    valid_ingredients.warning,
    valid_ingredients.contains_egg,
    valid_ingredients.contains_dairy,
    valid_ingredients.contains_peanut,
    valid_ingredients.contains_tree_nut,
    valid_ingredients.contains_soy,
    valid_ingredients.contains_wheat,
    valid_ingredients.contains_shellfish,
    valid_ingredients.contains_sesame,
    valid_ingredients.contains_fish,
    valid_ingredients.contains_gluten,
    valid_ingredients.animal_flesh,
    valid_ingredients.volumetric,
    valid_ingredients.is_liquid,
    valid_ingredients.icon_path,
    valid_ingredients.animal_derived,
    valid_ingredients.plural_name,
    valid_ingredients.restrict_to_preparations,
    valid_ingredients.minimum_ideal_storage_temperature_in_celsius,
    valid_ingredients.maximum_ideal_storage_temperature_in_celsius,
    valid_ingredients.storage_instructions,
    valid_ingredients.slug,
    valid_ingredients.contains_alcohol,
    valid_ingredients.shopping_suggestions,
    valid_ingredients.is_starch,
    valid_ingredients.is_protein,
    valid_ingredients.is_grain,
    valid_ingredients.is_fruit,
    valid_ingredients.is_salt,
    valid_ingredients.is_fat,
    valid_ingredients.is_acid,
    valid_ingredients.is_heat,
    valid_ingredients.created_at,
    valid_ingredients.last_updated_at,
    valid_ingredients.archived_at,
    user_ingredient_preferences.rating,
    user_ingredient_preferences.notes,
    user_ingredient_preferences.allergy,
    user_ingredient_preferences.created_at,
    user_ingredient_preferences.last_updated_at,
    user_ingredient_preferences.archived_at,
    user_ingredient_preferences.belongs_to_user
FROM user_ingredient_preferences
  JOIN valid_ingredients ON valid_ingredients.id = user_ingredient_preferences.ingredient
WHERE user_ingredient_preferences.archived_at IS NULL
	AND valid_ingredients.archived_at IS NULL
	AND user_ingredient_preferences.id = $1
	AND user_ingredient_preferences.belongs_to_user = $2
`

type GetUserIngredientPreferencesForUserParams struct {
	ID            string `db:"id"`
	BelongsToUser string `db:"belongs_to_user"`
}

type GetUserIngredientPreferencesForUserRow struct {
	CreatedAt                               time.Time      `db:"created_at"`
	CreatedAt_2                             time.Time      `db:"created_at_2"`
	ArchivedAt_2                            sql.NullTime   `db:"archived_at_2"`
	LastUpdatedAt                           sql.NullTime   `db:"last_updated_at"`
	ArchivedAt                              sql.NullTime   `db:"archived_at"`
	LastUpdatedAt_2                         sql.NullTime   `db:"last_updated_at_2"`
	ShoppingSuggestions                     string         `db:"shopping_suggestions"`
	Slug                                    string         `db:"slug"`
	Warning                                 string         `db:"warning"`
	Notes                                   string         `db:"notes"`
	PluralName                              string         `db:"plural_name"`
	ID                                      string         `db:"id"`
	Description                             string         `db:"description"`
	Name                                    string         `db:"name"`
	ID_2                                    string         `db:"id_2"`
	StorageInstructions                     string         `db:"storage_instructions"`
	BelongsToUser                           string         `db:"belongs_to_user"`
	IconPath                                string         `db:"icon_path"`
	MinimumIdealStorageTemperatureInCelsius sql.NullString `db:"minimum_ideal_storage_temperature_in_celsius"`
	MaximumIdealStorageTemperatureInCelsius sql.NullString `db:"maximum_ideal_storage_temperature_in_celsius"`
	Rating                                  int16          `db:"rating"`
	IsLiquid                                sql.NullBool   `db:"is_liquid"`
	ContainsShellfish                       bool           `db:"contains_shellfish"`
	IsFat                                   bool           `db:"is_fat"`
	AnimalDerived                           bool           `db:"animal_derived"`
	Volumetric                              bool           `db:"volumetric"`
	ContainsAlcohol                         bool           `db:"contains_alcohol"`
	AnimalFlesh                             bool           `db:"animal_flesh"`
	IsStarch                                bool           `db:"is_starch"`
	IsProtein                               bool           `db:"is_protein"`
	IsGrain                                 bool           `db:"is_grain"`
	IsFruit                                 bool           `db:"is_fruit"`
	IsSalt                                  bool           `db:"is_salt"`
	RestrictToPreparations                  bool           `db:"restrict_to_preparations"`
	IsAcid                                  bool           `db:"is_acid"`
	IsHeat                                  bool           `db:"is_heat"`
	ContainsGluten                          bool           `db:"contains_gluten"`
	ContainsFish                            bool           `db:"contains_fish"`
	ContainsSesame                          bool           `db:"contains_sesame"`
	ContainsWheat                           bool           `db:"contains_wheat"`
	ContainsSoy                             bool           `db:"contains_soy"`
	Allergy                                 bool           `db:"allergy"`
	ContainsTreeNut                         bool           `db:"contains_tree_nut"`
	ContainsPeanut                          bool           `db:"contains_peanut"`
	ContainsDairy                           bool           `db:"contains_dairy"`
	ContainsEgg                             bool           `db:"contains_egg"`
}

func (q *Queries) GetUserIngredientPreferencesForUser(ctx context.Context, db DBTX, arg *GetUserIngredientPreferencesForUserParams) ([]*GetUserIngredientPreferencesForUserRow, error) {
	rows, err := db.QueryContext(ctx, GetUserIngredientPreferencesForUser, arg.ID, arg.BelongsToUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetUserIngredientPreferencesForUserRow{}
	for rows.Next() {
		var i GetUserIngredientPreferencesForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.ID_2,
			&i.Name,
			&i.Description,
			&i.Warning,
			&i.ContainsEgg,
			&i.ContainsDairy,
			&i.ContainsPeanut,
			&i.ContainsTreeNut,
			&i.ContainsSoy,
			&i.ContainsWheat,
			&i.ContainsShellfish,
			&i.ContainsSesame,
			&i.ContainsFish,
			&i.ContainsGluten,
			&i.AnimalFlesh,
			&i.Volumetric,
			&i.IsLiquid,
			&i.IconPath,
			&i.AnimalDerived,
			&i.PluralName,
			&i.RestrictToPreparations,
			&i.MinimumIdealStorageTemperatureInCelsius,
			&i.MaximumIdealStorageTemperatureInCelsius,
			&i.StorageInstructions,
			&i.Slug,
			&i.ContainsAlcohol,
			&i.ShoppingSuggestions,
			&i.IsStarch,
			&i.IsProtein,
			&i.IsGrain,
			&i.IsFruit,
			&i.IsSalt,
			&i.IsFat,
			&i.IsAcid,
			&i.IsHeat,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.Rating,
			&i.Notes,
			&i.Allergy,
			&i.CreatedAt_2,
			&i.LastUpdatedAt_2,
			&i.ArchivedAt_2,
			&i.BelongsToUser,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetWebhooksForUser = `-- name: GetWebhooksForUser :many

SELECT webhooks.id,
       webhooks.name,
       webhooks.content_type,
       webhooks.url,
       webhooks.method,
       webhook_trigger_events.id,
       webhook_trigger_events.trigger_event,
       webhook_trigger_events.belongs_to_webhook,
       webhook_trigger_events.created_at,
       webhook_trigger_events.archived_at,
       webhooks.created_at,
       webhooks.last_updated_at,
       webhooks.archived_at,
       webhooks.belongs_to_household
  FROM webhooks
       JOIN webhook_trigger_events ON
			webhook_trigger_events.belongs_to_webhook
			= webhooks.id
 WHERE webhook_trigger_events.archived_at IS NULL
       AND webhooks.archived_at IS NULL
       AND webhooks.belongs_to_household = $1
       AND webhooks.id = $2
`

type GetWebhooksForUserParams struct {
	BelongsToHousehold string `db:"belongs_to_household"`
	ID                 string `db:"id"`
}

type GetWebhooksForUserRow struct {
	ID                 string       `db:"id"`
	Name               string       `db:"name"`
	ContentType        string       `db:"content_type"`
	Url                string       `db:"url"`
	Method             string       `db:"method"`
	ID_2               string       `db:"id_2"`
	TriggerEvent       WebhookEvent `db:"trigger_event"`
	BelongsToWebhook   string       `db:"belongs_to_webhook"`
	CreatedAt          time.Time    `db:"created_at"`
	ArchivedAt         sql.NullTime `db:"archived_at"`
	CreatedAt_2        time.Time    `db:"created_at_2"`
	LastUpdatedAt      sql.NullTime `db:"last_updated_at"`
	ArchivedAt_2       sql.NullTime `db:"archived_at_2"`
	BelongsToHousehold string       `db:"belongs_to_household"`
}

func (q *Queries) GetWebhooksForUser(ctx context.Context, db DBTX, arg *GetWebhooksForUserParams) ([]*GetWebhooksForUserRow, error) {
	rows, err := db.QueryContext(ctx, GetWebhooksForUser, arg.BelongsToHousehold, arg.ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetWebhooksForUserRow{}
	for rows.Next() {
		var i GetWebhooksForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ContentType,
			&i.Url,
			&i.Method,
			&i.ID_2,
			&i.TriggerEvent,
			&i.BelongsToWebhook,
			&i.CreatedAt,
			&i.ArchivedAt,
			&i.CreatedAt_2,
			&i.LastUpdatedAt,
			&i.ArchivedAt_2,
			&i.BelongsToHousehold,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
