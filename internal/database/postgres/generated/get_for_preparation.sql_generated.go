// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: get_for_preparation.sql

package generated

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
)

const getValidIngredientPreparationsForPreparation = `-- name: GetValidIngredientPreparationsForPreparation :many

SELECT
    valid_ingredient_preparations.id as valid_ingredient_preparation_id,
    valid_ingredient_preparations.notes as valid_ingredient_preparation_notes,
    valid_preparations.id as valid_preparation_id,
    valid_preparations.name as valid_preparation_name,
    valid_preparations.description as valid_preparation_description,
    valid_preparations.icon_path as valid_preparation_icon_path,
    valid_preparations.yields_nothing as valid_preparation_yields_nothing,
    valid_preparations.restrict_to_ingredients as valid_preparation_restrict_to_ingredients,
    valid_preparations.minimum_ingredient_count as valid_preparation_minimum_ingredient_count,
    valid_preparations.maximum_ingredient_count as valid_preparation_maximum_ingredient_count,
    valid_preparations.minimum_instrument_count as valid_preparation_minimum_instrument_count,
    valid_preparations.maximum_instrument_count as valid_preparation_maximum_instrument_count,
    valid_preparations.temperature_required as valid_preparation_temperature_required,
    valid_preparations.time_estimate_required as valid_preparation_time_estimate_required,
    valid_preparations.condition_expression_required as valid_preparation_condition_expression_required,
    valid_preparations.consumes_vessel as valid_preparation_consumes_vessel,
    valid_preparations.only_for_vessels as valid_preparation_only_for_vessels,
    valid_preparations.minimum_vessel_count as valid_preparation_minimum_vessel_count,
    valid_preparations.maximum_vessel_count as valid_preparation_maximum_vessel_count,
    valid_preparations.slug as valid_preparation_slug,
    valid_preparations.past_tense as valid_preparation_past_tense,
    valid_preparations.created_at as valid_preparation_created_at,
    valid_preparations.last_updated_at as valid_preparation_last_updated_at,
    valid_preparations.archived_at as valid_preparation_archived_at,
    valid_ingredients.id as valid_ingredient_id,
    valid_ingredients.name as valid_ingredient_name,
    valid_ingredients.description as valid_ingredient_description,
    valid_ingredients.warning as valid_ingredient_warning,
    valid_ingredients.contains_egg as valid_ingredient_contains_egg,
    valid_ingredients.contains_dairy as valid_ingredient_contains_dairy,
    valid_ingredients.contains_peanut as valid_ingredient_contains_peanut,
    valid_ingredients.contains_tree_nut as valid_ingredient_contains_tree_nut,
    valid_ingredients.contains_soy as valid_ingredient_contains_soy,
    valid_ingredients.contains_wheat as valid_ingredient_contains_wheat,
    valid_ingredients.contains_shellfish as valid_ingredient_contains_shellfish,
    valid_ingredients.contains_sesame as valid_ingredient_contains_sesame,
    valid_ingredients.contains_fish as valid_ingredient_contains_fish,
    valid_ingredients.contains_gluten as valid_ingredient_contains_gluten,
    valid_ingredients.animal_flesh as valid_ingredient_animal_flesh,
    valid_ingredients.volumetric as valid_ingredient_volumetric,
    valid_ingredients.is_liquid as valid_ingredient_is_liquid,
    valid_ingredients.icon_path as valid_ingredient_icon_path,
    valid_ingredients.animal_derived as valid_ingredient_animal_derived,
    valid_ingredients.plural_name as valid_ingredient_plural_name,
    valid_ingredients.restrict_to_preparations as valid_ingredient_restrict_to_preparations,
    valid_ingredients.minimum_ideal_storage_temperature_in_celsius as valid_ingredient_minimum_ideal_storage_temperature_in_celsius,
    valid_ingredients.maximum_ideal_storage_temperature_in_celsius as valid_ingredient_maximum_ideal_storage_temperature_in_celsius,
    valid_ingredients.storage_instructions as valid_ingredient_storage_instructions,
    valid_ingredients.slug as valid_ingredient_slug,
    valid_ingredients.contains_alcohol as valid_ingredient_contains_alcohol,
    valid_ingredients.shopping_suggestions as valid_ingredient_shopping_suggestions,
    valid_ingredients.is_starch as valid_ingredient_is_starch,
    valid_ingredients.is_protein as valid_ingredient_is_protein,
    valid_ingredients.is_grain as valid_ingredient_is_grain,
    valid_ingredients.is_fruit as valid_ingredient_is_fruit,
    valid_ingredients.is_salt as valid_ingredient_is_salt,
    valid_ingredients.is_fat as valid_ingredient_is_fat,
    valid_ingredients.is_acid as valid_ingredient_is_acid,
    valid_ingredients.is_heat as valid_ingredient_is_heat,
    valid_ingredients.created_at as valid_ingredient_created_at,
    valid_ingredients.last_updated_at as valid_ingredient_last_updated_at,
    valid_ingredients.archived_at as valid_ingredient_archived_at,
    valid_ingredient_preparations.created_at as valid_ingredient_preparation_created_at,
    valid_ingredient_preparations.last_updated_at as valid_ingredient_preparation_last_updated_at,
    valid_ingredient_preparations.archived_at as valid_ingredient_preparation_archived_at,
    (
        SELECT
            COUNT(valid_ingredient_preparations.id)
        FROM
            valid_ingredient_preparations
        WHERE
            valid_ingredient_preparations.archived_at IS NULL
          AND valid_ingredient_preparations.created_at > COALESCE($1, (SELECT NOW() - interval '999 years'))
          AND valid_ingredient_preparations.created_at < COALESCE($2, (SELECT NOW() + interval '999 years'))
          AND (valid_ingredient_preparations.last_updated_at IS NULL OR valid_ingredient_preparations.last_updated_at > COALESCE($3, (SELECT NOW() - interval '999 years')))
          AND (valid_ingredient_preparations.last_updated_at IS NULL OR valid_ingredient_preparations.last_updated_at < COALESCE($4, (SELECT NOW() + interval '999 years')))
          AND valid_ingredient_preparations.valid_preparation_id = ANY($5::text[])
    ) as filtered_count,
    (
        SELECT
            COUNT(valid_ingredient_preparations.id)
        FROM
            valid_ingredient_preparations
        WHERE
            valid_ingredient_preparations.archived_at IS NULL
    ) as total_count
FROM
    valid_ingredient_preparations
        JOIN valid_ingredients ON valid_ingredient_preparations.valid_ingredient_id = valid_ingredients.id
        JOIN valid_preparations ON valid_ingredient_preparations.valid_preparation_id = valid_preparations.id
WHERE
    valid_ingredient_preparations.archived_at IS NULL
  AND valid_ingredient_preparations.created_at > COALESCE($1, (SELECT NOW() - interval '999 years'))
  AND valid_ingredient_preparations.created_at < COALESCE($2, (SELECT NOW() + interval '999 years'))
  AND (valid_ingredient_preparations.last_updated_at IS NULL OR valid_ingredient_preparations.last_updated_at > COALESCE($3, (SELECT NOW() - interval '999 years')))
  AND (valid_ingredient_preparations.last_updated_at IS NULL OR valid_ingredient_preparations.last_updated_at < COALESCE($4, (SELECT NOW() + interval '999 years')))
  AND valid_ingredient_preparations.valid_preparation_id = ANY($5::text[])
OFFSET $6
LIMIT $7
`

type GetValidIngredientPreparationsForPreparationParams struct {
	CreatedAfter  sql.NullTime
	CreatedBefore sql.NullTime
	UpdatedAfter  sql.NullTime
	UpdatedBefore sql.NullTime
	IDs           []string
	QueryOffset   sql.NullInt32
	QueryLimit    sql.NullInt32
}

type GetValidIngredientPreparationsForPreparationRow struct {
	ValidPreparationCreatedAt                              time.Time
	ValidIngredientPreparationCreatedAt                    time.Time
	ValidIngredientCreatedAt                               time.Time
	ValidIngredientPreparationArchivedAt                   sql.NullTime
	ValidIngredientLastUpdatedAt                           sql.NullTime
	ValidPreparationArchivedAt                             sql.NullTime
	ValidPreparationLastUpdatedAt                          sql.NullTime
	ValidIngredientArchivedAt                              sql.NullTime
	ValidIngredientPreparationLastUpdatedAt                sql.NullTime
	ValidIngredientIconPath                                string
	ValidPreparationPastTense                              string
	ValidIngredientPreparationID                           string
	ValidIngredientPluralName                              string
	ValidIngredientPreparationNotes                        string
	ValidPreparationName                                   string
	ValidPreparationID                                     string
	ValidIngredientWarning                                 string
	ValidIngredientStorageInstructions                     string
	ValidIngredientSlug                                    string
	ValidPreparationSlug                                   string
	ValidIngredientDescription                             string
	ValidIngredientShoppingSuggestions                     string
	ValidPreparationIconPath                               string
	ValidPreparationDescription                            string
	ValidIngredientID                                      string
	ValidIngredientName                                    string
	ValidIngredientMinimumIdealStorageTemperatureInCelsius sql.NullString
	ValidIngredientMaximumIdealStorageTemperatureInCelsius sql.NullString
	TotalCount                                             int64
	FilteredCount                                          int64
	ValidPreparationMaximumIngredientCount                 sql.NullInt32
	ValidPreparationMaximumVesselCount                     sql.NullInt32
	ValidPreparationMaximumInstrumentCount                 sql.NullInt32
	ValidPreparationMinimumVesselCount                     int32
	ValidPreparationMinimumInstrumentCount                 int32
	ValidPreparationMinimumIngredientCount                 int32
	ValidIngredientIsLiquid                                sql.NullBool
	ValidPreparationConsumesVessel                         bool
	ValidIngredientAnimalFlesh                             bool
	ValidIngredientVolumetric                              bool
	ValidIngredientContainsGluten                          bool
	ValidIngredientContainsFish                            bool
	ValidIngredientAnimalDerived                           bool
	ValidIngredientContainsSesame                          bool
	ValidIngredientRestrictToPreparations                  bool
	ValidIngredientContainsShellfish                       bool
	ValidIngredientContainsWheat                           bool
	ValidIngredientContainsSoy                             bool
	ValidIngredientContainsTreeNut                         bool
	ValidIngredientContainsAlcohol                         bool
	ValidIngredientContainsPeanut                          bool
	ValidIngredientIsStarch                                bool
	ValidIngredientIsProtein                               bool
	ValidIngredientIsGrain                                 bool
	ValidIngredientIsFruit                                 bool
	ValidIngredientIsSalt                                  bool
	ValidIngredientIsFat                                   bool
	ValidIngredientIsAcid                                  bool
	ValidIngredientIsHeat                                  bool
	ValidIngredientContainsDairy                           bool
	ValidIngredientContainsEgg                             bool
	ValidPreparationOnlyForVessels                         bool
	ValidPreparationConditionExpressionRequired            bool
	ValidPreparationTimeEstimateRequired                   bool
	ValidPreparationTemperatureRequired                    bool
	ValidPreparationRestrictToIngredients                  bool
	ValidPreparationYieldsNothing                          bool
}

func (q *Queries) GetValidIngredientPreparationsForPreparation(ctx context.Context, db DBTX, arg *GetValidIngredientPreparationsForPreparationParams) ([]*GetValidIngredientPreparationsForPreparationRow, error) {
	rows, err := db.QueryContext(ctx, getValidIngredientPreparationsForPreparation,
		arg.CreatedAfter,
		arg.CreatedBefore,
		arg.UpdatedAfter,
		arg.UpdatedBefore,
		pq.Array(arg.IDs),
		arg.QueryOffset,
		arg.QueryLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetValidIngredientPreparationsForPreparationRow{}
	for rows.Next() {
		var i GetValidIngredientPreparationsForPreparationRow
		if err := rows.Scan(
			&i.ValidIngredientPreparationID,
			&i.ValidIngredientPreparationNotes,
			&i.ValidPreparationID,
			&i.ValidPreparationName,
			&i.ValidPreparationDescription,
			&i.ValidPreparationIconPath,
			&i.ValidPreparationYieldsNothing,
			&i.ValidPreparationRestrictToIngredients,
			&i.ValidPreparationMinimumIngredientCount,
			&i.ValidPreparationMaximumIngredientCount,
			&i.ValidPreparationMinimumInstrumentCount,
			&i.ValidPreparationMaximumInstrumentCount,
			&i.ValidPreparationTemperatureRequired,
			&i.ValidPreparationTimeEstimateRequired,
			&i.ValidPreparationConditionExpressionRequired,
			&i.ValidPreparationConsumesVessel,
			&i.ValidPreparationOnlyForVessels,
			&i.ValidPreparationMinimumVesselCount,
			&i.ValidPreparationMaximumVesselCount,
			&i.ValidPreparationSlug,
			&i.ValidPreparationPastTense,
			&i.ValidPreparationCreatedAt,
			&i.ValidPreparationLastUpdatedAt,
			&i.ValidPreparationArchivedAt,
			&i.ValidIngredientID,
			&i.ValidIngredientName,
			&i.ValidIngredientDescription,
			&i.ValidIngredientWarning,
			&i.ValidIngredientContainsEgg,
			&i.ValidIngredientContainsDairy,
			&i.ValidIngredientContainsPeanut,
			&i.ValidIngredientContainsTreeNut,
			&i.ValidIngredientContainsSoy,
			&i.ValidIngredientContainsWheat,
			&i.ValidIngredientContainsShellfish,
			&i.ValidIngredientContainsSesame,
			&i.ValidIngredientContainsFish,
			&i.ValidIngredientContainsGluten,
			&i.ValidIngredientAnimalFlesh,
			&i.ValidIngredientVolumetric,
			&i.ValidIngredientIsLiquid,
			&i.ValidIngredientIconPath,
			&i.ValidIngredientAnimalDerived,
			&i.ValidIngredientPluralName,
			&i.ValidIngredientRestrictToPreparations,
			&i.ValidIngredientMinimumIdealStorageTemperatureInCelsius,
			&i.ValidIngredientMaximumIdealStorageTemperatureInCelsius,
			&i.ValidIngredientStorageInstructions,
			&i.ValidIngredientSlug,
			&i.ValidIngredientContainsAlcohol,
			&i.ValidIngredientShoppingSuggestions,
			&i.ValidIngredientIsStarch,
			&i.ValidIngredientIsProtein,
			&i.ValidIngredientIsGrain,
			&i.ValidIngredientIsFruit,
			&i.ValidIngredientIsSalt,
			&i.ValidIngredientIsFat,
			&i.ValidIngredientIsAcid,
			&i.ValidIngredientIsHeat,
			&i.ValidIngredientCreatedAt,
			&i.ValidIngredientLastUpdatedAt,
			&i.ValidIngredientArchivedAt,
			&i.ValidIngredientPreparationCreatedAt,
			&i.ValidIngredientPreparationLastUpdatedAt,
			&i.ValidIngredientPreparationArchivedAt,
			&i.FilteredCount,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getValidPreparationInstrumentsForPreparation = `-- name: GetValidPreparationInstrumentsForPreparation :many

SELECT
    valid_preparation_instruments.id as valid_preparation_instrument_id,
    valid_preparation_instruments.notes as valid_preparation_instrument_notes,
    valid_preparations.id as valid_preparation_id,
    valid_preparations.name as valid_preparation_name,
    valid_preparations.description as valid_preparation_description,
    valid_preparations.icon_path as valid_preparation_icon_path,
    valid_preparations.yields_nothing as valid_preparation_yields_nothing,
    valid_preparations.restrict_to_ingredients as valid_preparation_restrict_to_ingredients,
    valid_preparations.minimum_ingredient_count as valid_preparation_minimum_ingredient_count,
    valid_preparations.maximum_ingredient_count as valid_preparation_maximum_ingredient_count,
    valid_preparations.minimum_instrument_count as valid_preparation_minimum_instrument_count,
    valid_preparations.maximum_instrument_count as valid_preparation_maximum_instrument_count,
    valid_preparations.temperature_required as valid_preparation_temperature_required,
    valid_preparations.time_estimate_required as valid_preparation_time_estimate_required,
    valid_preparations.condition_expression_required as valid_preparation_condition_expression_required,
    valid_preparations.consumes_vessel as valid_preparation_consumes_vessel,
    valid_preparations.only_for_vessels as valid_preparation_only_for_vessels,
    valid_preparations.minimum_vessel_count as valid_preparation_minimum_vessel_count,
    valid_preparations.maximum_vessel_count as valid_preparation_maximum_vessel_count,
    valid_preparations.slug as valid_preparation_slug,
    valid_preparations.past_tense as valid_preparation_past_tense,
    valid_preparations.created_at as valid_preparation_created_at,
    valid_preparations.last_updated_at as valid_preparation_last_updated_at,
    valid_preparations.archived_at as valid_preparation_archived_at,
    valid_instruments.id as valid_instrument_id,
    valid_instruments.name as valid_instrument_name,
    valid_instruments.plural_name as valid_instrument_plural_name,
    valid_instruments.description as valid_instrument_description,
    valid_instruments.icon_path as valid_instrument_icon_path,
    valid_instruments.usable_for_storage as valid_instrument_usable_for_storage,
    valid_instruments.display_in_summary_lists as valid_instrument_display_in_summary_lists,
    valid_instruments.include_in_generated_instructions as valid_instrument_include_in_generated_instructions,
    valid_instruments.slug as valid_instrument_slug,
    valid_instruments.created_at as valid_instrument_created_at,
    valid_instruments.last_updated_at as valid_instrument_last_updated_at,
    valid_instruments.archived_at as valid_instrument_archived_at,
    valid_preparation_instruments.created_at as valid_preparation_instrument_created_at,
    valid_preparation_instruments.last_updated_at as valid_preparation_instrument_last_updated_at,
    valid_preparation_instruments.archived_at as valid_preparation_instrument_archived_at,
    (
        SELECT
            COUNT(valid_preparation_instruments.id)
        FROM
            valid_preparation_instruments
                JOIN valid_instruments ON valid_preparation_instruments.valid_instrument_id = valid_instruments.id
                JOIN valid_preparations ON valid_preparation_instruments.valid_preparation_id = valid_preparations.id
        WHERE
            valid_preparation_instruments.archived_at IS NULL
            AND valid_instruments.archived_at IS NULL
            AND valid_preparations.archived_at IS NULL
            AND valid_preparation_instruments.created_at > COALESCE($1, (SELECT NOW() - interval '999 years'))
            AND valid_preparation_instruments.created_at < COALESCE($2, (SELECT NOW() + interval '999 years'))
            AND (
                valid_preparation_instruments.last_updated_at IS NULL
                OR valid_preparation_instruments.last_updated_at > COALESCE($3, (SELECT NOW() - interval '999 years'))
            )
            AND (
                valid_preparation_instruments.last_updated_at IS NULL
                OR valid_preparation_instruments.last_updated_at < COALESCE($4, (SELECT NOW() + interval '999 years'))
            )
    ) as filtered_count,
    (
        SELECT
            COUNT(valid_preparation_instruments.id)
        FROM
            valid_preparation_instruments
                JOIN valid_instruments ON valid_preparation_instruments.valid_instrument_id = valid_instruments.id
                JOIN valid_preparations ON valid_preparation_instruments.valid_preparation_id = valid_preparations.id
        WHERE
            valid_preparation_instruments.archived_at IS NULL
            AND valid_instruments.archived_at IS NULL
            AND valid_preparations.archived_at IS NULL
    ) as total_count
FROM
    valid_preparation_instruments
    JOIN valid_instruments ON valid_preparation_instruments.valid_instrument_id = valid_instruments.id
    JOIN valid_preparations ON valid_preparation_instruments.valid_preparation_id = valid_preparations.id
WHERE
    valid_preparation_instruments.archived_at IS NULL
    AND valid_preparation_instruments.valid_preparation_id = ANY($5::text[])
    AND valid_instruments.archived_at IS NULL
    AND valid_preparations.archived_at IS NULL
    AND valid_preparation_instruments.created_at > COALESCE($1, (SELECT NOW() - interval '999 years'))
    AND valid_preparation_instruments.created_at < COALESCE($2, (SELECT NOW() + interval '999 years'))
    AND (
        valid_preparation_instruments.last_updated_at IS NULL
        OR valid_preparation_instruments.last_updated_at > COALESCE($3, (SELECT NOW() - interval '999 years'))
    )
    AND (
        valid_preparation_instruments.last_updated_at IS NULL
        OR valid_preparation_instruments.last_updated_at < COALESCE($4, (SELECT NOW() + interval '999 years'))
    )
GROUP BY
    valid_preparation_instruments.id,
    valid_preparations.id,
    valid_instruments.id
ORDER BY
    valid_preparation_instruments.id
    LIMIT $7
    OFFSET $6
`

type GetValidPreparationInstrumentsForPreparationParams struct {
	CreatedBefore sql.NullTime
	CreatedAfter  sql.NullTime
	UpdatedBefore sql.NullTime
	UpdatedAfter  sql.NullTime
	IDs           []string
	QueryOffset   sql.NullInt32
	QueryLimit    sql.NullInt32
}

type GetValidPreparationInstrumentsForPreparationRow struct {
	ValidPreparationInstrumentCreatedAt           time.Time
	ValidPreparationCreatedAt                     time.Time
	ValidInstrumentCreatedAt                      time.Time
	ValidInstrumentArchivedAt                     sql.NullTime
	ValidPreparationInstrumentLastUpdatedAt       sql.NullTime
	ValidPreparationArchivedAt                    sql.NullTime
	ValidPreparationLastUpdatedAt                 sql.NullTime
	ValidInstrumentLastUpdatedAt                  sql.NullTime
	ValidPreparationInstrumentArchivedAt          sql.NullTime
	ValidPreparationInstrumentID                  string
	ValidPreparationID                            string
	ValidInstrumentDescription                    string
	ValidInstrumentPluralName                     string
	ValidPreparationName                          string
	ValidInstrumentIconPath                       string
	ValidInstrumentName                           string
	ValidPreparationIconPath                      string
	ValidInstrumentSlug                           string
	ValidInstrumentID                             string
	ValidPreparationSlug                          string
	ValidPreparationPastTense                     string
	ValidPreparationInstrumentNotes               string
	ValidPreparationDescription                   string
	TotalCount                                    int64
	FilteredCount                                 int64
	ValidPreparationMaximumVesselCount            sql.NullInt32
	ValidPreparationMaximumIngredientCount        sql.NullInt32
	ValidPreparationMaximumInstrumentCount        sql.NullInt32
	ValidPreparationMinimumInstrumentCount        int32
	ValidPreparationMinimumVesselCount            int32
	ValidPreparationMinimumIngredientCount        int32
	ValidInstrumentUsableForStorage               bool
	ValidInstrumentDisplayInSummaryLists          bool
	ValidInstrumentIncludeInGeneratedInstructions bool
	ValidPreparationOnlyForVessels                bool
	ValidPreparationConsumesVessel                bool
	ValidPreparationConditionExpressionRequired   bool
	ValidPreparationTimeEstimateRequired          bool
	ValidPreparationTemperatureRequired           bool
	ValidPreparationRestrictToIngredients         bool
	ValidPreparationYieldsNothing                 bool
}

func (q *Queries) GetValidPreparationInstrumentsForPreparation(ctx context.Context, db DBTX, arg *GetValidPreparationInstrumentsForPreparationParams) ([]*GetValidPreparationInstrumentsForPreparationRow, error) {
	rows, err := db.QueryContext(ctx, getValidPreparationInstrumentsForPreparation,
		arg.CreatedBefore,
		arg.CreatedAfter,
		arg.UpdatedBefore,
		arg.UpdatedAfter,
		pq.Array(arg.IDs),
		arg.QueryOffset,
		arg.QueryLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetValidPreparationInstrumentsForPreparationRow{}
	for rows.Next() {
		var i GetValidPreparationInstrumentsForPreparationRow
		if err := rows.Scan(
			&i.ValidPreparationInstrumentID,
			&i.ValidPreparationInstrumentNotes,
			&i.ValidPreparationID,
			&i.ValidPreparationName,
			&i.ValidPreparationDescription,
			&i.ValidPreparationIconPath,
			&i.ValidPreparationYieldsNothing,
			&i.ValidPreparationRestrictToIngredients,
			&i.ValidPreparationMinimumIngredientCount,
			&i.ValidPreparationMaximumIngredientCount,
			&i.ValidPreparationMinimumInstrumentCount,
			&i.ValidPreparationMaximumInstrumentCount,
			&i.ValidPreparationTemperatureRequired,
			&i.ValidPreparationTimeEstimateRequired,
			&i.ValidPreparationConditionExpressionRequired,
			&i.ValidPreparationConsumesVessel,
			&i.ValidPreparationOnlyForVessels,
			&i.ValidPreparationMinimumVesselCount,
			&i.ValidPreparationMaximumVesselCount,
			&i.ValidPreparationSlug,
			&i.ValidPreparationPastTense,
			&i.ValidPreparationCreatedAt,
			&i.ValidPreparationLastUpdatedAt,
			&i.ValidPreparationArchivedAt,
			&i.ValidInstrumentID,
			&i.ValidInstrumentName,
			&i.ValidInstrumentPluralName,
			&i.ValidInstrumentDescription,
			&i.ValidInstrumentIconPath,
			&i.ValidInstrumentUsableForStorage,
			&i.ValidInstrumentDisplayInSummaryLists,
			&i.ValidInstrumentIncludeInGeneratedInstructions,
			&i.ValidInstrumentSlug,
			&i.ValidInstrumentCreatedAt,
			&i.ValidInstrumentLastUpdatedAt,
			&i.ValidInstrumentArchivedAt,
			&i.ValidPreparationInstrumentCreatedAt,
			&i.ValidPreparationInstrumentLastUpdatedAt,
			&i.ValidPreparationInstrumentArchivedAt,
			&i.FilteredCount,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getValidPreparationVesselsForPreparation = `-- name: GetValidPreparationVesselsForPreparation :many
SELECT
    valid_preparation_vessels.id as valid_preparation_vessel_id,
    valid_preparation_vessels.notes as valid_preparation_vessel_notes,
    valid_preparations.id as valid_preparation_id,
    valid_preparations.name as valid_preparation_name,
    valid_preparations.description as valid_preparation_description,
    valid_preparations.icon_path as valid_preparation_icon_path,
    valid_preparations.yields_nothing as valid_preparation_yields_nothing,
    valid_preparations.restrict_to_ingredients as valid_preparation_restrict_to_ingredients,
    valid_preparations.minimum_ingredient_count as valid_preparation_minimum_ingredient_count,
    valid_preparations.maximum_ingredient_count as valid_preparation_maximum_ingredient_count,
    valid_preparations.minimum_instrument_count as valid_preparation_minimum_instrument_count,
    valid_preparations.maximum_instrument_count as valid_preparation_maximum_instrument_count,
    valid_preparations.temperature_required as valid_preparation_temperature_required,
    valid_preparations.time_estimate_required as valid_preparation_time_estimate_required,
    valid_preparations.condition_expression_required as valid_preparation_condition_expression_required,
    valid_preparations.consumes_vessel as valid_preparation_consumes_vessel,
    valid_preparations.only_for_vessels as valid_preparation_only_for_vessels,
    valid_preparations.minimum_vessel_count as valid_preparation_minimum_vessel_count,
    valid_preparations.maximum_vessel_count as valid_preparation_maximum_vessel_count,
    valid_preparations.slug as valid_preparation_slug,
    valid_preparations.past_tense as valid_preparation_past_tense,
    valid_preparations.created_at as valid_preparation_created_at,
    valid_preparations.last_updated_at as valid_preparation_last_updated_at,
    valid_preparations.archived_at as valid_preparation_archived_at,
    valid_vessels.id as valid_vessel_id,
    valid_vessels.name as valid_vessel_name,
    valid_vessels.plural_name as valid_vessel_plural_name,
    valid_vessels.description as valid_vessel_description,
    valid_vessels.icon_path as valid_vessel_icon_path,
    valid_vessels.usable_for_storage as valid_vessel_usable_for_storage,
    valid_vessels.slug as valid_vessel_slug,
    valid_vessels.display_in_summary_lists as valid_vessel_display_in_summary_lists,
    valid_vessels.include_in_generated_instructions as valid_vessel_include_in_generated_instructions,
    valid_vessels.capacity::float as valid_vessel_capacity,
    valid_measurement_units.id as valid_measurement_unit_id,
    valid_measurement_units.name as valid_measurement_unit_name,
    valid_measurement_units.description as valid_measurement_unit_description,
    valid_measurement_units.volumetric as valid_measurement_unit_volumetric,
    valid_measurement_units.icon_path as valid_measurement_unit_icon_path,
    valid_measurement_units.universal as valid_measurement_unit_universal,
    valid_measurement_units.metric as valid_measurement_unit_metric,
    valid_measurement_units.imperial as valid_measurement_unit_imperial,
    valid_measurement_units.slug as valid_measurement_unit_slug,
    valid_measurement_units.plural_name as valid_measurement_unit_plural_name,
    valid_measurement_units.created_at as valid_measurement_unit_created_at,
    valid_measurement_units.last_updated_at as valid_measurement_unit_last_updated_at,
    valid_measurement_units.archived_at as valid_measurement_unit_archived_at,
    valid_vessels.width_in_millimeters::float as valid_vessel_width_in_millimeters,
    valid_vessels.length_in_millimeters::float as valid_vessel_length_in_millimeters,
    valid_vessels.height_in_millimeters::float as valid_vessel_height_in_millimeters,
    valid_vessels.shape as valid_vessel_shape,
    valid_vessels.created_at as valid_vessel_created_at,
    valid_vessels.last_updated_at as valid_vessel_last_updated_at,
    valid_vessels.archived_at as valid_vessel_archived_at,
    valid_preparation_vessels.created_at as valid_preparation_vessel_created_at,
    valid_preparation_vessels.last_updated_at as valid_preparation_vessel_last_updated_at,
    valid_preparation_vessels.archived_at as valid_preparation_vessel_archived_at,
    (
        SELECT
            COUNT(valid_preparation_vessels.id)
        FROM
            valid_preparation_vessels
        WHERE
            valid_preparation_vessels.archived_at IS NULL
            AND valid_preparation_vessels.created_at > COALESCE($1, (SELECT NOW() - interval '999 years'))
            AND valid_preparation_vessels.created_at < COALESCE($2, (SELECT NOW() + interval '999 years'))
            AND (
                valid_preparation_vessels.last_updated_at IS NULL
                OR valid_preparation_vessels.last_updated_at > COALESCE($3, (SELECT NOW() - interval '999 years'))
            )
            AND (
                valid_preparation_vessels.last_updated_at IS NULL
                OR valid_preparation_vessels.last_updated_at < COALESCE($4, (SELECT NOW() + interval '999 years'))
            )
    ) as filtered_count,
    (
        SELECT
            COUNT(valid_preparation_vessels.id)
        FROM
            valid_preparation_vessels
        WHERE
            valid_preparation_vessels.archived_at IS NULL
    ) as total_count
FROM
    valid_preparation_vessels
        JOIN valid_vessels ON valid_preparation_vessels.valid_vessel_id = valid_vessels.id
        JOIN valid_preparations ON valid_preparation_vessels.valid_preparation_id = valid_preparations.id
        LEFT JOIN valid_measurement_units ON valid_vessels.capacity_unit = valid_measurement_units.id
WHERE
    valid_preparation_vessels.archived_at IS NULL
    AND valid_vessels.archived_at IS NULL
    AND valid_preparations.archived_at IS NULL
    AND valid_measurement_units.archived_at IS NULL
    AND valid_preparation_vessels.created_at > COALESCE($1, (SELECT NOW() - interval '999 years'))
    AND valid_preparation_vessels.created_at < COALESCE($2, (SELECT NOW() + interval '999 years'))
    AND (
        valid_preparation_vessels.last_updated_at IS NULL
        OR valid_preparation_vessels.last_updated_at > COALESCE($3, (SELECT NOW() - interval '999 years'))
    )
    AND (
        valid_preparation_vessels.last_updated_at IS NULL
        OR valid_preparation_vessels.last_updated_at < COALESCE($4, (SELECT NOW() + interval '999 years'))
    )
    AND valid_preparation_vessels.valid_preparation_id = ANY($5::text[])
OFFSET $6
LIMIT $7
`

type GetValidPreparationVesselsForPreparationParams struct {
	CreatedBefore sql.NullTime
	CreatedAfter  sql.NullTime
	UpdatedBefore sql.NullTime
	UpdatedAfter  sql.NullTime
	IDs           []string
	QueryOffset   sql.NullInt32
	QueryLimit    sql.NullInt32
}

type GetValidPreparationVesselsForPreparationRow struct {
	ValidPreparationCreatedAt                   time.Time
	ValidPreparationVesselCreatedAt             time.Time
	ValidVesselCreatedAt                        time.Time
	ValidMeasurementUnitArchivedAt              sql.NullTime
	ValidPreparationArchivedAt                  sql.NullTime
	ValidPreparationLastUpdatedAt               sql.NullTime
	ValidMeasurementUnitCreatedAt               sql.NullTime
	ValidMeasurementUnitLastUpdatedAt           sql.NullTime
	ValidPreparationVesselArchivedAt            sql.NullTime
	ValidPreparationVesselLastUpdatedAt         sql.NullTime
	ValidVesselArchivedAt                       sql.NullTime
	ValidVesselLastUpdatedAt                    sql.NullTime
	ValidVesselShape                            VesselShape
	ValidPreparationSlug                        string
	ValidPreparationIconPath                    string
	ValidPreparationDescription                 string
	ValidPreparationVesselID                    string
	ValidVesselSlug                             string
	ValidVesselIconPath                         string
	ValidVesselDescription                      string
	ValidPreparationPastTense                   string
	ValidPreparationName                        string
	ValidPreparationID                          string
	ValidPreparationVesselNotes                 string
	ValidVesselID                               string
	ValidVesselName                             string
	ValidVesselPluralName                       string
	ValidMeasurementUnitPluralName              sql.NullString
	ValidMeasurementUnitSlug                    sql.NullString
	ValidMeasurementUnitIconPath                sql.NullString
	ValidMeasurementUnitDescription             sql.NullString
	ValidMeasurementUnitName                    sql.NullString
	ValidMeasurementUnitID                      sql.NullString
	ValidVesselWidthInMillimeters               float64
	TotalCount                                  int64
	FilteredCount                               int64
	ValidVesselCapacity                         float64
	ValidVesselHeightInMillimeters              float64
	ValidVesselLengthInMillimeters              float64
	ValidPreparationMaximumIngredientCount      sql.NullInt32
	ValidPreparationMaximumInstrumentCount      sql.NullInt32
	ValidPreparationMaximumVesselCount          sql.NullInt32
	ValidPreparationMinimumVesselCount          int32
	ValidPreparationMinimumIngredientCount      int32
	ValidPreparationMinimumInstrumentCount      int32
	ValidMeasurementUnitUniversal               sql.NullBool
	ValidMeasurementUnitImperial                sql.NullBool
	ValidMeasurementUnitVolumetric              sql.NullBool
	ValidMeasurementUnitMetric                  sql.NullBool
	ValidPreparationOnlyForVessels              bool
	ValidPreparationTemperatureRequired         bool
	ValidPreparationTimeEstimateRequired        bool
	ValidPreparationConsumesVessel              bool
	ValidVesselUsableForStorage                 bool
	ValidPreparationConditionExpressionRequired bool
	ValidPreparationRestrictToIngredients       bool
	ValidPreparationYieldsNothing               bool
	ValidVesselDisplayInSummaryLists            bool
	ValidVesselIncludeInGeneratedInstructions   bool
}

func (q *Queries) GetValidPreparationVesselsForPreparation(ctx context.Context, db DBTX, arg *GetValidPreparationVesselsForPreparationParams) ([]*GetValidPreparationVesselsForPreparationRow, error) {
	rows, err := db.QueryContext(ctx, getValidPreparationVesselsForPreparation,
		arg.CreatedBefore,
		arg.CreatedAfter,
		arg.UpdatedBefore,
		arg.UpdatedAfter,
		pq.Array(arg.IDs),
		arg.QueryOffset,
		arg.QueryLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetValidPreparationVesselsForPreparationRow{}
	for rows.Next() {
		var i GetValidPreparationVesselsForPreparationRow
		if err := rows.Scan(
			&i.ValidPreparationVesselID,
			&i.ValidPreparationVesselNotes,
			&i.ValidPreparationID,
			&i.ValidPreparationName,
			&i.ValidPreparationDescription,
			&i.ValidPreparationIconPath,
			&i.ValidPreparationYieldsNothing,
			&i.ValidPreparationRestrictToIngredients,
			&i.ValidPreparationMinimumIngredientCount,
			&i.ValidPreparationMaximumIngredientCount,
			&i.ValidPreparationMinimumInstrumentCount,
			&i.ValidPreparationMaximumInstrumentCount,
			&i.ValidPreparationTemperatureRequired,
			&i.ValidPreparationTimeEstimateRequired,
			&i.ValidPreparationConditionExpressionRequired,
			&i.ValidPreparationConsumesVessel,
			&i.ValidPreparationOnlyForVessels,
			&i.ValidPreparationMinimumVesselCount,
			&i.ValidPreparationMaximumVesselCount,
			&i.ValidPreparationSlug,
			&i.ValidPreparationPastTense,
			&i.ValidPreparationCreatedAt,
			&i.ValidPreparationLastUpdatedAt,
			&i.ValidPreparationArchivedAt,
			&i.ValidVesselID,
			&i.ValidVesselName,
			&i.ValidVesselPluralName,
			&i.ValidVesselDescription,
			&i.ValidVesselIconPath,
			&i.ValidVesselUsableForStorage,
			&i.ValidVesselSlug,
			&i.ValidVesselDisplayInSummaryLists,
			&i.ValidVesselIncludeInGeneratedInstructions,
			&i.ValidVesselCapacity,
			&i.ValidMeasurementUnitID,
			&i.ValidMeasurementUnitName,
			&i.ValidMeasurementUnitDescription,
			&i.ValidMeasurementUnitVolumetric,
			&i.ValidMeasurementUnitIconPath,
			&i.ValidMeasurementUnitUniversal,
			&i.ValidMeasurementUnitMetric,
			&i.ValidMeasurementUnitImperial,
			&i.ValidMeasurementUnitSlug,
			&i.ValidMeasurementUnitPluralName,
			&i.ValidMeasurementUnitCreatedAt,
			&i.ValidMeasurementUnitLastUpdatedAt,
			&i.ValidMeasurementUnitArchivedAt,
			&i.ValidVesselWidthInMillimeters,
			&i.ValidVesselLengthInMillimeters,
			&i.ValidVesselHeightInMillimeters,
			&i.ValidVesselShape,
			&i.ValidVesselCreatedAt,
			&i.ValidVesselLastUpdatedAt,
			&i.ValidVesselArchivedAt,
			&i.ValidPreparationVesselCreatedAt,
			&i.ValidPreparationVesselLastUpdatedAt,
			&i.ValidPreparationVesselArchivedAt,
			&i.FilteredCount,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
