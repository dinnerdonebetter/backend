// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: meals.sql

package generated

import (
	"context"
	"database/sql"
)

const ArchiveMeal = `-- name: ArchiveMeal :exec
UPDATE meals SET archived_on = extract(epoch FROM NOW()) WHERE archived_on IS NULL AND created_by_user = $1 AND id = $2
`

type ArchiveMealParams struct {
	CreatedByUser string
	ID            string
}

func (q *Queries) ArchiveMeal(ctx context.Context, arg *ArchiveMealParams) error {
	_, err := q.db.ExecContext(ctx, ArchiveMeal, arg.CreatedByUser, arg.ID)
	return err
}

const CreateMeal = `-- name: CreateMeal :exec
INSERT INTO meals (id,name,description,created_by_user) VALUES ($1,$2,$3,$4)
`

type CreateMealParams struct {
	ID            string
	Name          string
	Description   string
	CreatedByUser string
}

func (q *Queries) CreateMeal(ctx context.Context, arg *CreateMealParams) error {
	_, err := q.db.ExecContext(ctx, CreateMeal,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.CreatedByUser,
	)
	return err
}

const CreateMealRecipe = `-- name: CreateMealRecipe :exec
INSERT INTO meal_recipes (id,meal_id,recipe_id) VALUES ($1,$2,$3)
`

type CreateMealRecipeParams struct {
	ID       string
	MealID   string
	RecipeID string
}

func (q *Queries) CreateMealRecipe(ctx context.Context, arg *CreateMealRecipeParams) error {
	_, err := q.db.ExecContext(ctx, CreateMealRecipe, arg.ID, arg.MealID, arg.RecipeID)
	return err
}

const GetMealByID = `-- name: GetMealByID :one
SELECT
	meals.id,
	meals.name,
	meals.description,
	meals.created_on,
	meals.last_updated_on,
	meals.archived_on,
	meals.created_by_user,
	meal_recipes.recipe_id
FROM meals
	FULL OUTER JOIN meal_recipes ON meal_recipes.meal_id=meals.id
WHERE meals.archived_on IS NULL
	AND meal_recipes.archived_on IS NULL
	AND meals.id = $1
`

type GetMealByIDRow struct {
	ID            sql.NullString
	Name          sql.NullString
	Description   sql.NullString
	CreatedOn     sql.NullInt64
	LastUpdatedOn sql.NullInt64
	ArchivedOn    sql.NullInt64
	CreatedByUser sql.NullString
	RecipeID      sql.NullString
}

func (q *Queries) GetMealByID(ctx context.Context, id string) (*GetMealByIDRow, error) {
	row := q.db.QueryRowContext(ctx, GetMealByID, id)
	var i GetMealByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedOn,
		&i.LastUpdatedOn,
		&i.ArchivedOn,
		&i.CreatedByUser,
		&i.RecipeID,
	)
	return &i, err
}

const GetTotalMealsCount = `-- name: GetTotalMealsCount :one
SELECT COUNT(meals.id) FROM meals WHERE meals.archived_on IS NULL
`

func (q *Queries) GetTotalMealsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, GetTotalMealsCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const MealExists = `-- name: MealExists :one
SELECT EXISTS ( SELECT meals.id FROM meals WHERE meals.archived_on IS NULL AND meals.id = $1 )
`

func (q *Queries) MealExists(ctx context.Context, id string) (bool, error) {
	row := q.db.QueryRowContext(ctx, MealExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
