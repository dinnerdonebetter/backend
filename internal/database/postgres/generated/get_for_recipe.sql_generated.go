// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: get_for_recipe.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const GetRecipeStepIngredientsForRecipe = `-- name: GetRecipeStepIngredientsForRecipe :many

SELECT
	recipe_step_ingredients.id,
	recipe_step_ingredients.name,
	recipe_step_ingredients.optional,
	valid_ingredients.id,
	valid_ingredients.name,
	valid_ingredients.description,
	valid_ingredients.warning,
	valid_ingredients.contains_egg,
	valid_ingredients.contains_dairy,
	valid_ingredients.contains_peanut,
	valid_ingredients.contains_tree_nut,
	valid_ingredients.contains_soy,
	valid_ingredients.contains_wheat,
	valid_ingredients.contains_shellfish,
	valid_ingredients.contains_sesame,
	valid_ingredients.contains_fish,
	valid_ingredients.contains_gluten,
	valid_ingredients.animal_flesh,
	valid_ingredients.volumetric,
	valid_ingredients.is_liquid,
	valid_ingredients.icon_path,
	valid_ingredients.animal_derived,
	valid_ingredients.plural_name,
	valid_ingredients.restrict_to_preparations,
	valid_ingredients.minimum_ideal_storage_temperature_in_celsius,
	valid_ingredients.maximum_ideal_storage_temperature_in_celsius,
	valid_ingredients.storage_instructions,
	valid_ingredients.slug,
	valid_ingredients.contains_alcohol,
	valid_ingredients.shopping_suggestions,
    valid_ingredients.is_starch,
    valid_ingredients.is_protein,
    valid_ingredients.is_grain,
    valid_ingredients.is_fruit,
    valid_ingredients.is_salt,
    valid_ingredients.is_fat,
    valid_ingredients.is_acid,
    valid_ingredients.is_heat,
	valid_ingredients.created_at,
	valid_ingredients.last_updated_at,
	valid_ingredients.archived_at,
	valid_measurement_units.id,
	valid_measurement_units.name,
	valid_measurement_units.description,
	valid_measurement_units.volumetric,
	valid_measurement_units.icon_path,
	valid_measurement_units.universal,
	valid_measurement_units.metric,
	valid_measurement_units.imperial,
	valid_measurement_units.slug,
	valid_measurement_units.plural_name,
	valid_measurement_units.created_at,
	valid_measurement_units.last_updated_at,
	valid_measurement_units.archived_at,
	recipe_step_ingredients.minimum_quantity_value,
	recipe_step_ingredients.maximum_quantity_value,
	recipe_step_ingredients.quantity_notes,
	recipe_step_ingredients.recipe_step_product_id,
	recipe_step_ingredients.ingredient_notes,
	recipe_step_ingredients.option_index,
	recipe_step_ingredients.to_taste,
	recipe_step_ingredients.product_percentage_to_use,
    recipe_step_ingredients.vessel_index,
    recipe_step_ingredients.recipe_step_product_recipe_id,
	recipe_step_ingredients.created_at,
	recipe_step_ingredients.last_updated_at,
	recipe_step_ingredients.archived_at,
	recipe_step_ingredients.belongs_to_recipe_step
FROM
	recipe_step_ingredients
	JOIN recipe_steps ON recipe_step_ingredients.belongs_to_recipe_step = recipe_steps.id
	JOIN recipes ON recipe_steps.belongs_to_recipe = recipes.id
	LEFT JOIN valid_ingredients ON recipe_step_ingredients.ingredient_id = valid_ingredients.id
	JOIN valid_measurement_units ON recipe_step_ingredients.measurement_unit = valid_measurement_units.id
WHERE
	recipe_step_ingredients.archived_at IS NULL
	AND recipes.id = $1
GROUP BY
	recipe_step_ingredients.id,
	valid_measurement_units.id,
	valid_ingredients.id
ORDER BY
	recipe_step_ingredients.id
`

type GetRecipeStepIngredientsForRecipeRow struct {
	CreatedAt_3                             time.Time      `db:"created_at_3"`
	CreatedAt_2                             time.Time      `db:"created_at_2"`
	LastUpdatedAt_2                         sql.NullTime   `db:"last_updated_at_2"`
	CreatedAt                               sql.NullTime   `db:"created_at"`
	LastUpdatedAt                           sql.NullTime   `db:"last_updated_at"`
	ArchivedAt                              sql.NullTime   `db:"archived_at"`
	ArchivedAt_2                            sql.NullTime   `db:"archived_at_2"`
	ArchivedAt_3                            sql.NullTime   `db:"archived_at_3"`
	LastUpdatedAt_3                         sql.NullTime   `db:"last_updated_at_3"`
	ID_3                                    string         `db:"id_3"`
	Description_2                           string         `db:"description_2"`
	IconPath_2                              string         `db:"icon_path_2"`
	Slug_2                                  string         `db:"slug_2"`
	PluralName_2                            string         `db:"plural_name_2"`
	IngredientNotes                         string         `db:"ingredient_notes"`
	Name_3                                  string         `db:"name_3"`
	QuantityNotes                           string         `db:"quantity_notes"`
	ID                                      string         `db:"id"`
	BelongsToRecipeStep                     string         `db:"belongs_to_recipe_step"`
	MinimumQuantityValue                    string         `db:"minimum_quantity_value"`
	Name                                    string         `db:"name"`
	MaximumQuantityValue                    sql.NullString `db:"maximum_quantity_value"`
	Warning                                 sql.NullString `db:"warning"`
	IconPath                                sql.NullString `db:"icon_path"`
	MinimumIdealStorageTemperatureInCelsius sql.NullString `db:"minimum_ideal_storage_temperature_in_celsius"`
	MaximumIdealStorageTemperatureInCelsius sql.NullString `db:"maximum_ideal_storage_temperature_in_celsius"`
	StorageInstructions                     sql.NullString `db:"storage_instructions"`
	Slug                                    sql.NullString `db:"slug"`
	RecipeStepProductID                     sql.NullString `db:"recipe_step_product_id"`
	ShoppingSuggestions                     sql.NullString `db:"shopping_suggestions"`
	ID_2                                    sql.NullString `db:"id_2"`
	ProductPercentageToUse                  sql.NullString `db:"product_percentage_to_use"`
	Name_2                                  sql.NullString `db:"name_2"`
	RecipeStepProductRecipeID               sql.NullString `db:"recipe_step_product_recipe_id"`
	PluralName                              sql.NullString `db:"plural_name"`
	Description                             sql.NullString `db:"description"`
	VesselIndex                             sql.NullInt32  `db:"vessel_index"`
	OptionIndex                             int32          `db:"option_index"`
	AnimalFlesh                             sql.NullBool   `db:"animal_flesh"`
	ContainsAlcohol                         sql.NullBool   `db:"contains_alcohol"`
	IsAcid                                  sql.NullBool   `db:"is_acid"`
	IsFat                                   sql.NullBool   `db:"is_fat"`
	IsSalt                                  sql.NullBool   `db:"is_salt"`
	IsFruit                                 sql.NullBool   `db:"is_fruit"`
	Volumetric_2                            sql.NullBool   `db:"volumetric_2"`
	IsGrain                                 sql.NullBool   `db:"is_grain"`
	IsHeat                                  sql.NullBool   `db:"is_heat"`
	ContainsEgg                             sql.NullBool   `db:"contains_egg"`
	ContainsDairy                           sql.NullBool   `db:"contains_dairy"`
	IsProtein                               sql.NullBool   `db:"is_protein"`
	IsStarch                                sql.NullBool   `db:"is_starch"`
	ContainsTreeNut                         sql.NullBool   `db:"contains_tree_nut"`
	RestrictToPreparations                  sql.NullBool   `db:"restrict_to_preparations"`
	AnimalDerived                           sql.NullBool   `db:"animal_derived"`
	IsLiquid                                sql.NullBool   `db:"is_liquid"`
	Volumetric                              sql.NullBool   `db:"volumetric"`
	ContainsGluten                          sql.NullBool   `db:"contains_gluten"`
	ContainsFish                            sql.NullBool   `db:"contains_fish"`
	ContainsSesame                          sql.NullBool   `db:"contains_sesame"`
	ContainsShellfish                       sql.NullBool   `db:"contains_shellfish"`
	ContainsPeanut                          sql.NullBool   `db:"contains_peanut"`
	ContainsWheat                           sql.NullBool   `db:"contains_wheat"`
	ContainsSoy                             sql.NullBool   `db:"contains_soy"`
	Universal                               bool           `db:"universal"`
	ToTaste                                 bool           `db:"to_taste"`
	Imperial                                bool           `db:"imperial"`
	Metric                                  bool           `db:"metric"`
	Optional                                bool           `db:"optional"`
}

func (q *Queries) GetRecipeStepIngredientsForRecipe(ctx context.Context, db DBTX, id string) ([]*GetRecipeStepIngredientsForRecipeRow, error) {
	rows, err := db.QueryContext(ctx, GetRecipeStepIngredientsForRecipe, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetRecipeStepIngredientsForRecipeRow{}
	for rows.Next() {
		var i GetRecipeStepIngredientsForRecipeRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Optional,
			&i.ID_2,
			&i.Name_2,
			&i.Description,
			&i.Warning,
			&i.ContainsEgg,
			&i.ContainsDairy,
			&i.ContainsPeanut,
			&i.ContainsTreeNut,
			&i.ContainsSoy,
			&i.ContainsWheat,
			&i.ContainsShellfish,
			&i.ContainsSesame,
			&i.ContainsFish,
			&i.ContainsGluten,
			&i.AnimalFlesh,
			&i.Volumetric,
			&i.IsLiquid,
			&i.IconPath,
			&i.AnimalDerived,
			&i.PluralName,
			&i.RestrictToPreparations,
			&i.MinimumIdealStorageTemperatureInCelsius,
			&i.MaximumIdealStorageTemperatureInCelsius,
			&i.StorageInstructions,
			&i.Slug,
			&i.ContainsAlcohol,
			&i.ShoppingSuggestions,
			&i.IsStarch,
			&i.IsProtein,
			&i.IsGrain,
			&i.IsFruit,
			&i.IsSalt,
			&i.IsFat,
			&i.IsAcid,
			&i.IsHeat,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.ID_3,
			&i.Name_3,
			&i.Description_2,
			&i.Volumetric_2,
			&i.IconPath_2,
			&i.Universal,
			&i.Metric,
			&i.Imperial,
			&i.Slug_2,
			&i.PluralName_2,
			&i.CreatedAt_2,
			&i.LastUpdatedAt_2,
			&i.ArchivedAt_2,
			&i.MinimumQuantityValue,
			&i.MaximumQuantityValue,
			&i.QuantityNotes,
			&i.RecipeStepProductID,
			&i.IngredientNotes,
			&i.OptionIndex,
			&i.ToTaste,
			&i.ProductPercentageToUse,
			&i.VesselIndex,
			&i.RecipeStepProductRecipeID,
			&i.CreatedAt_3,
			&i.LastUpdatedAt_3,
			&i.ArchivedAt_3,
			&i.BelongsToRecipeStep,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetRecipeStepInstrumentsForRecipe = `-- name: GetRecipeStepInstrumentsForRecipe :many

SELECT
	recipe_step_instruments.id,
	valid_instruments.id,
	valid_instruments.name,
	valid_instruments.plural_name,
	valid_instruments.description,
	valid_instruments.icon_path,
	valid_instruments.usable_for_storage,
	valid_instruments.display_in_summary_lists,
	valid_instruments.include_in_generated_instructions,
	valid_instruments.slug,
	valid_instruments.created_at,
	valid_instruments.last_updated_at,
	valid_instruments.archived_at,
	recipe_step_instruments.recipe_step_product_id,
	recipe_step_instruments.name,
	recipe_step_instruments.notes,
	recipe_step_instruments.preference_rank,
	recipe_step_instruments.optional,
	recipe_step_instruments.minimum_quantity,
	recipe_step_instruments.maximum_quantity,
	recipe_step_instruments.option_index,
	recipe_step_instruments.created_at,
	recipe_step_instruments.last_updated_at,
	recipe_step_instruments.archived_at,
	recipe_step_instruments.belongs_to_recipe_step
FROM recipe_step_instruments
	LEFT JOIN valid_instruments ON recipe_step_instruments.instrument_id=valid_instruments.id
	JOIN recipe_steps ON recipe_step_instruments.belongs_to_recipe_step=recipe_steps.id
	JOIN recipes ON recipe_steps.belongs_to_recipe=recipes.id
WHERE recipe_step_instruments.archived_at IS NULL
	AND recipe_steps.archived_at IS NULL
	AND recipe_steps.belongs_to_recipe = $1
	AND recipes.archived_at IS NULL
	AND recipes.id = $1
`

type GetRecipeStepInstrumentsForRecipeRow struct {
	CreatedAt_2                    time.Time      `db:"created_at_2"`
	ArchivedAt                     sql.NullTime   `db:"archived_at"`
	ArchivedAt_2                   sql.NullTime   `db:"archived_at_2"`
	LastUpdatedAt_2                sql.NullTime   `db:"last_updated_at_2"`
	LastUpdatedAt                  sql.NullTime   `db:"last_updated_at"`
	CreatedAt                      sql.NullTime   `db:"created_at"`
	Name_2                         string         `db:"name_2"`
	BelongsToRecipeStep            string         `db:"belongs_to_recipe_step"`
	ID                             string         `db:"id"`
	Notes                          string         `db:"notes"`
	Description                    sql.NullString `db:"description"`
	PluralName                     sql.NullString `db:"plural_name"`
	IconPath                       sql.NullString `db:"icon_path"`
	Slug                           sql.NullString `db:"slug"`
	RecipeStepProductID            sql.NullString `db:"recipe_step_product_id"`
	Name                           sql.NullString `db:"name"`
	ID_2                           sql.NullString `db:"id_2"`
	MaximumQuantity                sql.NullInt32  `db:"maximum_quantity"`
	MinimumQuantity                int32          `db:"minimum_quantity"`
	OptionIndex                    int32          `db:"option_index"`
	PreferenceRank                 int32          `db:"preference_rank"`
	IncludeInGeneratedInstructions sql.NullBool   `db:"include_in_generated_instructions"`
	DisplayInSummaryLists          sql.NullBool   `db:"display_in_summary_lists"`
	UsableForStorage               sql.NullBool   `db:"usable_for_storage"`
	Optional                       bool           `db:"optional"`
}

func (q *Queries) GetRecipeStepInstrumentsForRecipe(ctx context.Context, db DBTX, belongsToRecipe string) ([]*GetRecipeStepInstrumentsForRecipeRow, error) {
	rows, err := db.QueryContext(ctx, GetRecipeStepInstrumentsForRecipe, belongsToRecipe)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetRecipeStepInstrumentsForRecipeRow{}
	for rows.Next() {
		var i GetRecipeStepInstrumentsForRecipeRow
		if err := rows.Scan(
			&i.ID,
			&i.ID_2,
			&i.Name,
			&i.PluralName,
			&i.Description,
			&i.IconPath,
			&i.UsableForStorage,
			&i.DisplayInSummaryLists,
			&i.IncludeInGeneratedInstructions,
			&i.Slug,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.RecipeStepProductID,
			&i.Name_2,
			&i.Notes,
			&i.PreferenceRank,
			&i.Optional,
			&i.MinimumQuantity,
			&i.MaximumQuantity,
			&i.OptionIndex,
			&i.CreatedAt_2,
			&i.LastUpdatedAt_2,
			&i.ArchivedAt_2,
			&i.BelongsToRecipeStep,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetRecipeStepProductsForRecipe = `-- name: GetRecipeStepProductsForRecipe :many

SELECT
	recipe_step_products.id,
	recipe_step_products.name,
	recipe_step_products.type,
	valid_measurement_units.id,
	valid_measurement_units.name,
	valid_measurement_units.description,
	valid_measurement_units.volumetric,
	valid_measurement_units.icon_path,
	valid_measurement_units.universal,
	valid_measurement_units.metric,
	valid_measurement_units.imperial,
	valid_measurement_units.slug,
	valid_measurement_units.plural_name,
	valid_measurement_units.created_at,
	valid_measurement_units.last_updated_at,
	valid_measurement_units.archived_at,
	recipe_step_products.minimum_quantity_value,
	recipe_step_products.maximum_quantity_value,
	recipe_step_products.quantity_notes,
	recipe_step_products.compostable,
	recipe_step_products.maximum_storage_duration_in_seconds,
	recipe_step_products.minimum_storage_temperature_in_celsius,
	recipe_step_products.maximum_storage_temperature_in_celsius,
	recipe_step_products.storage_instructions,
	recipe_step_products.is_liquid,
	recipe_step_products.is_waste,
    recipe_step_products.index,
    recipe_step_products.contained_in_vessel_index,
	recipe_step_products.created_at,
	recipe_step_products.last_updated_at,
	recipe_step_products.archived_at,
	recipe_step_products.belongs_to_recipe_step
FROM recipe_step_products
	JOIN recipe_steps ON recipe_step_products.belongs_to_recipe_step=recipe_steps.id
	JOIN recipes ON recipe_steps.belongs_to_recipe=recipes.id
	LEFT OUTER JOIN valid_measurement_units ON recipe_step_products.measurement_unit=valid_measurement_units.id
WHERE recipe_step_products.archived_at IS NULL
	AND recipe_steps.archived_at IS NULL
	AND recipe_steps.belongs_to_recipe = $1
	AND recipes.archived_at IS NULL
	AND recipes.id = $1
`

type GetRecipeStepProductsForRecipeRow struct {
	CreatedAt_2                        time.Time             `db:"created_at_2"`
	ArchivedAt_2                       sql.NullTime          `db:"archived_at_2"`
	ArchivedAt                         sql.NullTime          `db:"archived_at"`
	LastUpdatedAt                      sql.NullTime          `db:"last_updated_at"`
	CreatedAt                          sql.NullTime          `db:"created_at"`
	LastUpdatedAt_2                    sql.NullTime          `db:"last_updated_at_2"`
	QuantityNotes                      string                `db:"quantity_notes"`
	Name                               string                `db:"name"`
	ID                                 string                `db:"id"`
	BelongsToRecipeStep                string                `db:"belongs_to_recipe_step"`
	StorageInstructions                string                `db:"storage_instructions"`
	Type                               RecipeStepProductType `db:"type"`
	MinimumStorageTemperatureInCelsius sql.NullString        `db:"minimum_storage_temperature_in_celsius"`
	Name_2                             sql.NullString        `db:"name_2"`
	ID_2                               sql.NullString        `db:"id_2"`
	Slug                               sql.NullString        `db:"slug"`
	MinimumQuantityValue               sql.NullString        `db:"minimum_quantity_value"`
	MaximumQuantityValue               sql.NullString        `db:"maximum_quantity_value"`
	IconPath                           sql.NullString        `db:"icon_path"`
	PluralName                         sql.NullString        `db:"plural_name"`
	MaximumStorageTemperatureInCelsius sql.NullString        `db:"maximum_storage_temperature_in_celsius"`
	Description                        sql.NullString        `db:"description"`
	MaximumStorageDurationInSeconds    sql.NullInt32         `db:"maximum_storage_duration_in_seconds"`
	ContainedInVesselIndex             sql.NullInt32         `db:"contained_in_vessel_index"`
	Index                              int32                 `db:"index"`
	Universal                          sql.NullBool          `db:"universal"`
	Imperial                           sql.NullBool          `db:"imperial"`
	Metric                             sql.NullBool          `db:"metric"`
	Volumetric                         sql.NullBool          `db:"volumetric"`
	IsWaste                            bool                  `db:"is_waste"`
	IsLiquid                           bool                  `db:"is_liquid"`
	Compostable                        bool                  `db:"compostable"`
}

func (q *Queries) GetRecipeStepProductsForRecipe(ctx context.Context, db DBTX, belongsToRecipe string) ([]*GetRecipeStepProductsForRecipeRow, error) {
	rows, err := db.QueryContext(ctx, GetRecipeStepProductsForRecipe, belongsToRecipe)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetRecipeStepProductsForRecipeRow{}
	for rows.Next() {
		var i GetRecipeStepProductsForRecipeRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.ID_2,
			&i.Name_2,
			&i.Description,
			&i.Volumetric,
			&i.IconPath,
			&i.Universal,
			&i.Metric,
			&i.Imperial,
			&i.Slug,
			&i.PluralName,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.MinimumQuantityValue,
			&i.MaximumQuantityValue,
			&i.QuantityNotes,
			&i.Compostable,
			&i.MaximumStorageDurationInSeconds,
			&i.MinimumStorageTemperatureInCelsius,
			&i.MaximumStorageTemperatureInCelsius,
			&i.StorageInstructions,
			&i.IsLiquid,
			&i.IsWaste,
			&i.Index,
			&i.ContainedInVesselIndex,
			&i.CreatedAt_2,
			&i.LastUpdatedAt_2,
			&i.ArchivedAt_2,
			&i.BelongsToRecipeStep,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetRecipeStepVesselsForRecipe = `-- name: GetRecipeStepVesselsForRecipe :many

SELECT
	recipe_step_vessels.id,
	valid_vessels.id,
    valid_vessels.name,
    valid_vessels.plural_name,
    valid_vessels.description,
    valid_vessels.icon_path,
    valid_vessels.usable_for_storage,
    valid_vessels.slug,
    valid_vessels.display_in_summary_lists,
    valid_vessels.include_in_generated_instructions,
    valid_vessels.capacity,
	valid_measurement_units.id,
	valid_measurement_units.name,
	valid_measurement_units.description,
	valid_measurement_units.volumetric,
	valid_measurement_units.icon_path,
	valid_measurement_units.universal,
	valid_measurement_units.metric,
	valid_measurement_units.imperial,
	valid_measurement_units.slug,
	valid_measurement_units.plural_name,
	valid_measurement_units.created_at,
	valid_measurement_units.last_updated_at,
	valid_measurement_units.archived_at,
    valid_vessels.width_in_millimeters,
    valid_vessels.length_in_millimeters,
    valid_vessels.height_in_millimeters,
    valid_vessels.shape,
    valid_vessels.created_at,
    valid_vessels.last_updated_at,
    valid_vessels.archived_at,
    recipe_step_vessels.name,
    recipe_step_vessels.notes,
    recipe_step_vessels.belongs_to_recipe_step,
    recipe_step_vessels.recipe_step_product_id,
    recipe_step_vessels.vessel_predicate,
    recipe_step_vessels.minimum_quantity,
    recipe_step_vessels.maximum_quantity,
    recipe_step_vessels.unavailable_after_step,
    recipe_step_vessels.created_at,
    recipe_step_vessels.last_updated_at,
    recipe_step_vessels.archived_at
FROM recipe_step_vessels
	LEFT JOIN valid_vessels ON recipe_step_vessels.valid_vessel_id=valid_vessels.id
    LEFT JOIN valid_measurement_units ON valid_vessels.capacity_unit=valid_measurement_units.id
	JOIN recipe_steps ON recipe_step_vessels.belongs_to_recipe_step=recipe_steps.id
	JOIN recipes ON recipe_steps.belongs_to_recipe=recipes.id
WHERE recipe_step_vessels.archived_at IS NULL
	AND recipe_steps.archived_at IS NULL
	AND recipe_steps.belongs_to_recipe = $1
	AND recipes.archived_at IS NULL
	AND recipes.id = $1
`

type GetRecipeStepVesselsForRecipeRow struct {
	CreatedAt_3                    time.Time       `db:"created_at_3"`
	LastUpdatedAt_2                sql.NullTime    `db:"last_updated_at_2"`
	LastUpdatedAt_3                sql.NullTime    `db:"last_updated_at_3"`
	ArchivedAt_3                   sql.NullTime    `db:"archived_at_3"`
	ArchivedAt_2                   sql.NullTime    `db:"archived_at_2"`
	CreatedAt                      sql.NullTime    `db:"created_at"`
	CreatedAt_2                    sql.NullTime    `db:"created_at_2"`
	ArchivedAt                     sql.NullTime    `db:"archived_at"`
	LastUpdatedAt                  sql.NullTime    `db:"last_updated_at"`
	VesselPredicate                string          `db:"vessel_predicate"`
	BelongsToRecipeStep            string          `db:"belongs_to_recipe_step"`
	Notes                          string          `db:"notes"`
	Name_3                         string          `db:"name_3"`
	ID                             string          `db:"id"`
	Capacity                       sql.NullString  `db:"capacity"`
	IconPath                       sql.NullString  `db:"icon_path"`
	ID_2                           sql.NullString  `db:"id_2"`
	Name                           sql.NullString  `db:"name"`
	PluralName                     sql.NullString  `db:"plural_name"`
	Slug_2                         sql.NullString  `db:"slug_2"`
	PluralName_2                   sql.NullString  `db:"plural_name_2"`
	Description                    sql.NullString  `db:"description"`
	Description_2                  sql.NullString  `db:"description_2"`
	Name_2                         sql.NullString  `db:"name_2"`
	WidthInMillimeters             sql.NullString  `db:"width_in_millimeters"`
	LengthInMillimeters            sql.NullString  `db:"length_in_millimeters"`
	HeightInMillimeters            sql.NullString  `db:"height_in_millimeters"`
	Shape                          NullVesselShape `db:"shape"`
	ID_3                           sql.NullString  `db:"id_3"`
	RecipeStepProductID            sql.NullString  `db:"recipe_step_product_id"`
	IconPath_2                     sql.NullString  `db:"icon_path_2"`
	Slug                           sql.NullString  `db:"slug"`
	MaximumQuantity                sql.NullInt32   `db:"maximum_quantity"`
	MinimumQuantity                int32           `db:"minimum_quantity"`
	UsableForStorage               sql.NullBool    `db:"usable_for_storage"`
	DisplayInSummaryLists          sql.NullBool    `db:"display_in_summary_lists"`
	IncludeInGeneratedInstructions sql.NullBool    `db:"include_in_generated_instructions"`
	Volumetric                     sql.NullBool    `db:"volumetric"`
	Imperial                       sql.NullBool    `db:"imperial"`
	Metric                         sql.NullBool    `db:"metric"`
	Universal                      sql.NullBool    `db:"universal"`
	UnavailableAfterStep           bool            `db:"unavailable_after_step"`
}

func (q *Queries) GetRecipeStepVesselsForRecipe(ctx context.Context, db DBTX, belongsToRecipe string) ([]*GetRecipeStepVesselsForRecipeRow, error) {
	rows, err := db.QueryContext(ctx, GetRecipeStepVesselsForRecipe, belongsToRecipe)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetRecipeStepVesselsForRecipeRow{}
	for rows.Next() {
		var i GetRecipeStepVesselsForRecipeRow
		if err := rows.Scan(
			&i.ID,
			&i.ID_2,
			&i.Name,
			&i.PluralName,
			&i.Description,
			&i.IconPath,
			&i.UsableForStorage,
			&i.Slug,
			&i.DisplayInSummaryLists,
			&i.IncludeInGeneratedInstructions,
			&i.Capacity,
			&i.ID_3,
			&i.Name_2,
			&i.Description_2,
			&i.Volumetric,
			&i.IconPath_2,
			&i.Universal,
			&i.Metric,
			&i.Imperial,
			&i.Slug_2,
			&i.PluralName_2,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.WidthInMillimeters,
			&i.LengthInMillimeters,
			&i.HeightInMillimeters,
			&i.Shape,
			&i.CreatedAt_2,
			&i.LastUpdatedAt_2,
			&i.ArchivedAt_2,
			&i.Name_3,
			&i.Notes,
			&i.BelongsToRecipeStep,
			&i.RecipeStepProductID,
			&i.VesselPredicate,
			&i.MinimumQuantity,
			&i.MaximumQuantity,
			&i.UnavailableAfterStep,
			&i.CreatedAt_3,
			&i.LastUpdatedAt_3,
			&i.ArchivedAt_3,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
