// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: get_for_recipe.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const getRecipeStepIngredientsForRecipe = `-- name: GetRecipeStepIngredientsForRecipe :many

SELECT
	recipe_step_ingredients.id,
	recipe_step_ingredients.name,
	recipe_step_ingredients.optional,
	valid_ingredients.id,
	valid_ingredients.name,
	valid_ingredients.description,
	valid_ingredients.warning,
	valid_ingredients.contains_egg,
	valid_ingredients.contains_dairy,
	valid_ingredients.contains_peanut,
	valid_ingredients.contains_tree_nut,
	valid_ingredients.contains_soy,
	valid_ingredients.contains_wheat,
	valid_ingredients.contains_shellfish,
	valid_ingredients.contains_sesame,
	valid_ingredients.contains_fish,
	valid_ingredients.contains_gluten,
	valid_ingredients.animal_flesh,
	valid_ingredients.volumetric,
	valid_ingredients.is_liquid,
	valid_ingredients.icon_path,
	valid_ingredients.animal_derived,
	valid_ingredients.plural_name,
	valid_ingredients.restrict_to_preparations,
	valid_ingredients.minimum_ideal_storage_temperature_in_celsius,
	valid_ingredients.maximum_ideal_storage_temperature_in_celsius,
	valid_ingredients.storage_instructions,
	valid_ingredients.slug,
	valid_ingredients.contains_alcohol,
	valid_ingredients.shopping_suggestions,
    valid_ingredients.is_starch,
    valid_ingredients.is_protein,
    valid_ingredients.is_grain,
    valid_ingredients.is_fruit,
    valid_ingredients.is_salt,
    valid_ingredients.is_fat,
    valid_ingredients.is_acid,
    valid_ingredients.is_heat,
	valid_ingredients.created_at,
	valid_ingredients.last_updated_at,
	valid_ingredients.archived_at,
	valid_measurement_units.id,
	valid_measurement_units.name,
	valid_measurement_units.description,
	valid_measurement_units.volumetric,
	valid_measurement_units.icon_path,
	valid_measurement_units.universal,
	valid_measurement_units.metric,
	valid_measurement_units.imperial,
	valid_measurement_units.slug,
	valid_measurement_units.plural_name,
	valid_measurement_units.created_at,
	valid_measurement_units.last_updated_at,
	valid_measurement_units.archived_at,
	recipe_step_ingredients.minimum_quantity_value,
	recipe_step_ingredients.maximum_quantity_value,
	recipe_step_ingredients.quantity_notes,
	recipe_step_ingredients.recipe_step_product_id,
	recipe_step_ingredients.ingredient_notes,
	recipe_step_ingredients.option_index,
	recipe_step_ingredients.to_taste,
	recipe_step_ingredients.product_percentage_to_use,
    recipe_step_ingredients.vessel_index,
    recipe_step_ingredients.recipe_step_product_recipe_id,
	recipe_step_ingredients.created_at,
	recipe_step_ingredients.last_updated_at,
	recipe_step_ingredients.archived_at,
	recipe_step_ingredients.belongs_to_recipe_step
FROM
	recipe_step_ingredients
	JOIN recipe_steps ON recipe_step_ingredients.belongs_to_recipe_step = recipe_steps.id
	JOIN recipes ON recipe_steps.belongs_to_recipe = recipes.id
	LEFT JOIN valid_ingredients ON recipe_step_ingredients.ingredient_id = valid_ingredients.id
	JOIN valid_measurement_units ON recipe_step_ingredients.measurement_unit = valid_measurement_units.id
WHERE
	recipe_step_ingredients.archived_at IS NULL
	AND recipes.id = $1
GROUP BY
	recipe_step_ingredients.id,
	valid_measurement_units.id,
	valid_ingredients.id
ORDER BY
	recipe_step_ingredients.id
`

type GetRecipeStepIngredientsForRecipeRow struct {
	CreatedAt_3                             time.Time
	CreatedAt_2                             time.Time
	LastUpdatedAt_2                         sql.NullTime
	CreatedAt                               sql.NullTime
	LastUpdatedAt                           sql.NullTime
	ArchivedAt                              sql.NullTime
	ArchivedAt_2                            sql.NullTime
	ArchivedAt_3                            sql.NullTime
	LastUpdatedAt_3                         sql.NullTime
	ID_3                                    string
	Description_2                           string
	IconPath_2                              string
	Slug_2                                  string
	PluralName_2                            string
	IngredientNotes                         string
	Name_3                                  string
	QuantityNotes                           string
	ID                                      string
	BelongsToRecipeStep                     string
	MinimumQuantityValue                    string
	Name                                    string
	MaximumQuantityValue                    sql.NullString
	Warning                                 sql.NullString
	IconPath                                sql.NullString
	MinimumIdealStorageTemperatureInCelsius sql.NullString
	MaximumIdealStorageTemperatureInCelsius sql.NullString
	StorageInstructions                     sql.NullString
	Slug                                    sql.NullString
	RecipeStepProductID                     sql.NullString
	ShoppingSuggestions                     sql.NullString
	ID_2                                    sql.NullString
	ProductPercentageToUse                  sql.NullString
	Name_2                                  sql.NullString
	RecipeStepProductRecipeID               sql.NullString
	PluralName                              sql.NullString
	Description                             sql.NullString
	VesselIndex                             sql.NullInt32
	OptionIndex                             int32
	AnimalFlesh                             sql.NullBool
	ContainsAlcohol                         sql.NullBool
	IsAcid                                  sql.NullBool
	IsFat                                   sql.NullBool
	IsSalt                                  sql.NullBool
	IsFruit                                 sql.NullBool
	Volumetric_2                            sql.NullBool
	IsGrain                                 sql.NullBool
	IsHeat                                  sql.NullBool
	ContainsEgg                             sql.NullBool
	ContainsDairy                           sql.NullBool
	IsProtein                               sql.NullBool
	IsStarch                                sql.NullBool
	ContainsTreeNut                         sql.NullBool
	RestrictToPreparations                  sql.NullBool
	AnimalDerived                           sql.NullBool
	IsLiquid                                sql.NullBool
	Volumetric                              sql.NullBool
	ContainsGluten                          sql.NullBool
	ContainsFish                            sql.NullBool
	ContainsSesame                          sql.NullBool
	ContainsShellfish                       sql.NullBool
	ContainsPeanut                          sql.NullBool
	ContainsWheat                           sql.NullBool
	ContainsSoy                             sql.NullBool
	Universal                               bool
	ToTaste                                 bool
	Imperial                                bool
	Metric                                  bool
	Optional                                bool
}

func (q *Queries) GetRecipeStepIngredientsForRecipe(ctx context.Context, db DBTX, id string) ([]*GetRecipeStepIngredientsForRecipeRow, error) {
	rows, err := db.QueryContext(ctx, getRecipeStepIngredientsForRecipe, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetRecipeStepIngredientsForRecipeRow{}
	for rows.Next() {
		var i GetRecipeStepIngredientsForRecipeRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Optional,
			&i.ID_2,
			&i.Name_2,
			&i.Description,
			&i.Warning,
			&i.ContainsEgg,
			&i.ContainsDairy,
			&i.ContainsPeanut,
			&i.ContainsTreeNut,
			&i.ContainsSoy,
			&i.ContainsWheat,
			&i.ContainsShellfish,
			&i.ContainsSesame,
			&i.ContainsFish,
			&i.ContainsGluten,
			&i.AnimalFlesh,
			&i.Volumetric,
			&i.IsLiquid,
			&i.IconPath,
			&i.AnimalDerived,
			&i.PluralName,
			&i.RestrictToPreparations,
			&i.MinimumIdealStorageTemperatureInCelsius,
			&i.MaximumIdealStorageTemperatureInCelsius,
			&i.StorageInstructions,
			&i.Slug,
			&i.ContainsAlcohol,
			&i.ShoppingSuggestions,
			&i.IsStarch,
			&i.IsProtein,
			&i.IsGrain,
			&i.IsFruit,
			&i.IsSalt,
			&i.IsFat,
			&i.IsAcid,
			&i.IsHeat,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.ID_3,
			&i.Name_3,
			&i.Description_2,
			&i.Volumetric_2,
			&i.IconPath_2,
			&i.Universal,
			&i.Metric,
			&i.Imperial,
			&i.Slug_2,
			&i.PluralName_2,
			&i.CreatedAt_2,
			&i.LastUpdatedAt_2,
			&i.ArchivedAt_2,
			&i.MinimumQuantityValue,
			&i.MaximumQuantityValue,
			&i.QuantityNotes,
			&i.RecipeStepProductID,
			&i.IngredientNotes,
			&i.OptionIndex,
			&i.ToTaste,
			&i.ProductPercentageToUse,
			&i.VesselIndex,
			&i.RecipeStepProductRecipeID,
			&i.CreatedAt_3,
			&i.LastUpdatedAt_3,
			&i.ArchivedAt_3,
			&i.BelongsToRecipeStep,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecipeStepInstrumentsForRecipe = `-- name: GetRecipeStepInstrumentsForRecipe :many

SELECT
	recipe_step_instruments.id,
	valid_instruments.id,
	valid_instruments.name,
	valid_instruments.plural_name,
	valid_instruments.description,
	valid_instruments.icon_path,
	valid_instruments.usable_for_storage,
	valid_instruments.display_in_summary_lists,
	valid_instruments.include_in_generated_instructions,
	valid_instruments.slug,
	valid_instruments.created_at,
	valid_instruments.last_updated_at,
	valid_instruments.archived_at,
	recipe_step_instruments.recipe_step_product_id,
	recipe_step_instruments.name,
	recipe_step_instruments.notes,
	recipe_step_instruments.preference_rank,
	recipe_step_instruments.optional,
	recipe_step_instruments.minimum_quantity,
	recipe_step_instruments.maximum_quantity,
	recipe_step_instruments.option_index,
	recipe_step_instruments.created_at,
	recipe_step_instruments.last_updated_at,
	recipe_step_instruments.archived_at,
	recipe_step_instruments.belongs_to_recipe_step
FROM recipe_step_instruments
	LEFT JOIN valid_instruments ON recipe_step_instruments.instrument_id=valid_instruments.id
	JOIN recipe_steps ON recipe_step_instruments.belongs_to_recipe_step=recipe_steps.id
	JOIN recipes ON recipe_steps.belongs_to_recipe=recipes.id
WHERE recipe_step_instruments.archived_at IS NULL
	AND recipe_steps.archived_at IS NULL
	AND recipe_steps.belongs_to_recipe = $1
	AND recipes.archived_at IS NULL
	AND recipes.id = $1
`

type GetRecipeStepInstrumentsForRecipeRow struct {
	CreatedAt_2                    time.Time
	ArchivedAt                     sql.NullTime
	ArchivedAt_2                   sql.NullTime
	LastUpdatedAt_2                sql.NullTime
	LastUpdatedAt                  sql.NullTime
	CreatedAt                      sql.NullTime
	Name_2                         string
	BelongsToRecipeStep            string
	ID                             string
	Notes                          string
	Description                    sql.NullString
	PluralName                     sql.NullString
	IconPath                       sql.NullString
	Slug                           sql.NullString
	RecipeStepProductID            sql.NullString
	Name                           sql.NullString
	ID_2                           sql.NullString
	MaximumQuantity                sql.NullInt32
	MinimumQuantity                int32
	OptionIndex                    int32
	PreferenceRank                 int32
	IncludeInGeneratedInstructions sql.NullBool
	DisplayInSummaryLists          sql.NullBool
	UsableForStorage               sql.NullBool
	Optional                       bool
}

func (q *Queries) GetRecipeStepInstrumentsForRecipe(ctx context.Context, db DBTX, belongsToRecipe string) ([]*GetRecipeStepInstrumentsForRecipeRow, error) {
	rows, err := db.QueryContext(ctx, getRecipeStepInstrumentsForRecipe, belongsToRecipe)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetRecipeStepInstrumentsForRecipeRow{}
	for rows.Next() {
		var i GetRecipeStepInstrumentsForRecipeRow
		if err := rows.Scan(
			&i.ID,
			&i.ID_2,
			&i.Name,
			&i.PluralName,
			&i.Description,
			&i.IconPath,
			&i.UsableForStorage,
			&i.DisplayInSummaryLists,
			&i.IncludeInGeneratedInstructions,
			&i.Slug,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.RecipeStepProductID,
			&i.Name_2,
			&i.Notes,
			&i.PreferenceRank,
			&i.Optional,
			&i.MinimumQuantity,
			&i.MaximumQuantity,
			&i.OptionIndex,
			&i.CreatedAt_2,
			&i.LastUpdatedAt_2,
			&i.ArchivedAt_2,
			&i.BelongsToRecipeStep,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecipeStepProductsForRecipe = `-- name: GetRecipeStepProductsForRecipe :many

SELECT
	recipe_step_products.id,
	recipe_step_products.name,
	recipe_step_products.type,
	valid_measurement_units.id,
	valid_measurement_units.name,
	valid_measurement_units.description,
	valid_measurement_units.volumetric,
	valid_measurement_units.icon_path,
	valid_measurement_units.universal,
	valid_measurement_units.metric,
	valid_measurement_units.imperial,
	valid_measurement_units.slug,
	valid_measurement_units.plural_name,
	valid_measurement_units.created_at,
	valid_measurement_units.last_updated_at,
	valid_measurement_units.archived_at,
	recipe_step_products.minimum_quantity_value,
	recipe_step_products.maximum_quantity_value,
	recipe_step_products.quantity_notes,
	recipe_step_products.compostable,
	recipe_step_products.maximum_storage_duration_in_seconds,
	recipe_step_products.minimum_storage_temperature_in_celsius,
	recipe_step_products.maximum_storage_temperature_in_celsius,
	recipe_step_products.storage_instructions,
	recipe_step_products.is_liquid,
	recipe_step_products.is_waste,
    recipe_step_products.index,
    recipe_step_products.contained_in_vessel_index,
	recipe_step_products.created_at,
	recipe_step_products.last_updated_at,
	recipe_step_products.archived_at,
	recipe_step_products.belongs_to_recipe_step
FROM recipe_step_products
	JOIN recipe_steps ON recipe_step_products.belongs_to_recipe_step=recipe_steps.id
	JOIN recipes ON recipe_steps.belongs_to_recipe=recipes.id
	LEFT OUTER JOIN valid_measurement_units ON recipe_step_products.measurement_unit=valid_measurement_units.id
WHERE recipe_step_products.archived_at IS NULL
	AND recipe_steps.archived_at IS NULL
	AND recipe_steps.belongs_to_recipe = $1
	AND recipes.archived_at IS NULL
	AND recipes.id = $1
`

type GetRecipeStepProductsForRecipeRow struct {
	CreatedAt_2                        time.Time
	ArchivedAt_2                       sql.NullTime
	ArchivedAt                         sql.NullTime
	LastUpdatedAt                      sql.NullTime
	CreatedAt                          sql.NullTime
	LastUpdatedAt_2                    sql.NullTime
	QuantityNotes                      string
	Name                               string
	ID                                 string
	BelongsToRecipeStep                string
	StorageInstructions                string
	Type                               RecipeStepProductType
	MinimumStorageTemperatureInCelsius sql.NullString
	Name_2                             sql.NullString
	ID_2                               sql.NullString
	Slug                               sql.NullString
	MinimumQuantityValue               sql.NullString
	MaximumQuantityValue               sql.NullString
	IconPath                           sql.NullString
	PluralName                         sql.NullString
	MaximumStorageTemperatureInCelsius sql.NullString
	Description                        sql.NullString
	MaximumStorageDurationInSeconds    sql.NullInt32
	ContainedInVesselIndex             sql.NullInt32
	Index                              int32
	Universal                          sql.NullBool
	Imperial                           sql.NullBool
	Metric                             sql.NullBool
	Volumetric                         sql.NullBool
	IsWaste                            bool
	IsLiquid                           bool
	Compostable                        bool
}

func (q *Queries) GetRecipeStepProductsForRecipe(ctx context.Context, db DBTX, belongsToRecipe string) ([]*GetRecipeStepProductsForRecipeRow, error) {
	rows, err := db.QueryContext(ctx, getRecipeStepProductsForRecipe, belongsToRecipe)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetRecipeStepProductsForRecipeRow{}
	for rows.Next() {
		var i GetRecipeStepProductsForRecipeRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.ID_2,
			&i.Name_2,
			&i.Description,
			&i.Volumetric,
			&i.IconPath,
			&i.Universal,
			&i.Metric,
			&i.Imperial,
			&i.Slug,
			&i.PluralName,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.MinimumQuantityValue,
			&i.MaximumQuantityValue,
			&i.QuantityNotes,
			&i.Compostable,
			&i.MaximumStorageDurationInSeconds,
			&i.MinimumStorageTemperatureInCelsius,
			&i.MaximumStorageTemperatureInCelsius,
			&i.StorageInstructions,
			&i.IsLiquid,
			&i.IsWaste,
			&i.Index,
			&i.ContainedInVesselIndex,
			&i.CreatedAt_2,
			&i.LastUpdatedAt_2,
			&i.ArchivedAt_2,
			&i.BelongsToRecipeStep,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecipeStepVesselsForRecipe = `-- name: GetRecipeStepVesselsForRecipe :many

SELECT
	recipe_step_vessels.id,
	valid_vessels.id,
    valid_vessels.name,
    valid_vessels.plural_name,
    valid_vessels.description,
    valid_vessels.icon_path,
    valid_vessels.usable_for_storage,
    valid_vessels.slug,
    valid_vessels.display_in_summary_lists,
    valid_vessels.include_in_generated_instructions,
    valid_vessels.capacity,
	valid_measurement_units.id,
	valid_measurement_units.name,
	valid_measurement_units.description,
	valid_measurement_units.volumetric,
	valid_measurement_units.icon_path,
	valid_measurement_units.universal,
	valid_measurement_units.metric,
	valid_measurement_units.imperial,
	valid_measurement_units.slug,
	valid_measurement_units.plural_name,
	valid_measurement_units.created_at,
	valid_measurement_units.last_updated_at,
	valid_measurement_units.archived_at,
    valid_vessels.width_in_millimeters,
    valid_vessels.length_in_millimeters,
    valid_vessels.height_in_millimeters,
    valid_vessels.shape,
    valid_vessels.created_at,
    valid_vessels.last_updated_at,
    valid_vessels.archived_at,
    recipe_step_vessels.name,
    recipe_step_vessels.notes,
    recipe_step_vessels.belongs_to_recipe_step,
    recipe_step_vessels.recipe_step_product_id,
    recipe_step_vessels.vessel_predicate,
    recipe_step_vessels.minimum_quantity,
    recipe_step_vessels.maximum_quantity,
    recipe_step_vessels.unavailable_after_step,
    recipe_step_vessels.created_at,
    recipe_step_vessels.last_updated_at,
    recipe_step_vessels.archived_at
FROM recipe_step_vessels
	LEFT JOIN valid_vessels ON recipe_step_vessels.valid_vessel_id=valid_vessels.id
    LEFT JOIN valid_measurement_units ON valid_vessels.capacity_unit=valid_measurement_units.id
	JOIN recipe_steps ON recipe_step_vessels.belongs_to_recipe_step=recipe_steps.id
	JOIN recipes ON recipe_steps.belongs_to_recipe=recipes.id
WHERE recipe_step_vessels.archived_at IS NULL
	AND recipe_steps.archived_at IS NULL
	AND recipe_steps.belongs_to_recipe = $1
	AND recipes.archived_at IS NULL
	AND recipes.id = $1
`

type GetRecipeStepVesselsForRecipeRow struct {
	CreatedAt_3                    time.Time
	LastUpdatedAt_2                sql.NullTime
	LastUpdatedAt_3                sql.NullTime
	ArchivedAt_3                   sql.NullTime
	ArchivedAt_2                   sql.NullTime
	CreatedAt                      sql.NullTime
	CreatedAt_2                    sql.NullTime
	ArchivedAt                     sql.NullTime
	LastUpdatedAt                  sql.NullTime
	VesselPredicate                string
	BelongsToRecipeStep            string
	Notes                          string
	Name_3                         string
	ID                             string
	Capacity                       sql.NullString
	IconPath                       sql.NullString
	ID_2                           sql.NullString
	Name                           sql.NullString
	PluralName                     sql.NullString
	Slug_2                         sql.NullString
	PluralName_2                   sql.NullString
	Description                    sql.NullString
	Description_2                  sql.NullString
	Name_2                         sql.NullString
	WidthInMillimeters             sql.NullString
	LengthInMillimeters            sql.NullString
	HeightInMillimeters            sql.NullString
	Shape                          NullVesselShape
	ID_3                           sql.NullString
	RecipeStepProductID            sql.NullString
	IconPath_2                     sql.NullString
	Slug                           sql.NullString
	MaximumQuantity                sql.NullInt32
	MinimumQuantity                int32
	UsableForStorage               sql.NullBool
	DisplayInSummaryLists          sql.NullBool
	IncludeInGeneratedInstructions sql.NullBool
	Volumetric                     sql.NullBool
	Imperial                       sql.NullBool
	Metric                         sql.NullBool
	Universal                      sql.NullBool
	UnavailableAfterStep           bool
}

func (q *Queries) GetRecipeStepVesselsForRecipe(ctx context.Context, db DBTX, belongsToRecipe string) ([]*GetRecipeStepVesselsForRecipeRow, error) {
	rows, err := db.QueryContext(ctx, getRecipeStepVesselsForRecipe, belongsToRecipe)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetRecipeStepVesselsForRecipeRow{}
	for rows.Next() {
		var i GetRecipeStepVesselsForRecipeRow
		if err := rows.Scan(
			&i.ID,
			&i.ID_2,
			&i.Name,
			&i.PluralName,
			&i.Description,
			&i.IconPath,
			&i.UsableForStorage,
			&i.Slug,
			&i.DisplayInSummaryLists,
			&i.IncludeInGeneratedInstructions,
			&i.Capacity,
			&i.ID_3,
			&i.Name_2,
			&i.Description_2,
			&i.Volumetric,
			&i.IconPath_2,
			&i.Universal,
			&i.Metric,
			&i.Imperial,
			&i.Slug_2,
			&i.PluralName_2,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.WidthInMillimeters,
			&i.LengthInMillimeters,
			&i.HeightInMillimeters,
			&i.Shape,
			&i.CreatedAt_2,
			&i.LastUpdatedAt_2,
			&i.ArchivedAt_2,
			&i.Name_3,
			&i.Notes,
			&i.BelongsToRecipeStep,
			&i.RecipeStepProductID,
			&i.VesselPredicate,
			&i.MinimumQuantity,
			&i.MaximumQuantity,
			&i.UnavailableAfterStep,
			&i.CreatedAt_3,
			&i.LastUpdatedAt_3,
			&i.ArchivedAt_3,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
