// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: meal_plan_options.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const archiveMealPlanOption = `-- name: ArchiveMealPlanOption :exec

UPDATE
	meal_plan_options
SET
	archived_at = NOW()
WHERE
	archived_at IS NULL
	AND belongs_to_meal_plan_event = $1
	AND id = $2
`

type ArchiveMealPlanOptionParams struct {
	ID                     string
	BelongsToMealPlanEvent sql.NullString
}

func (q *Queries) ArchiveMealPlanOption(ctx context.Context, db DBTX, arg *ArchiveMealPlanOptionParams) error {
	_, err := db.ExecContext(ctx, archiveMealPlanOption, arg.BelongsToMealPlanEvent, arg.ID)
	return err
}

const checkMealPlanOptionExistence = `-- name: CheckMealPlanOptionExistence :one

SELECT EXISTS (
	SELECT
	 meal_plan_options.id
	FROM
	 meal_plan_options
		JOIN meal_plan_events ON meal_plan_options.belongs_to_meal_plan_event = meal_plan_events.id
		JOIN meal_plans ON meal_plan_events.belongs_to_meal_plan = meal_plans.id
	WHERE
	 meal_plan_options.archived_at IS NULL
	AND meal_plan_options.belongs_to_meal_plan_event = $1
	AND meal_plan_options.id = $2
	AND meal_plan_events.archived_at IS NULL
	AND meal_plan_events.belongs_to_meal_plan = $3
	AND meal_plan_events.id = $1
	AND meal_plans.archived_at IS NULL
	AND meal_plans.id = $3
)
`

type CheckMealPlanOptionExistenceParams struct {
	MealPlanOptionID string
	MealPlanID       string
	MealPlanEventID  sql.NullString
}

func (q *Queries) CheckMealPlanOptionExistence(ctx context.Context, db DBTX, arg *CheckMealPlanOptionExistenceParams) (bool, error) {
	row := db.QueryRowContext(ctx, checkMealPlanOptionExistence, arg.MealPlanEventID, arg.MealPlanOptionID, arg.MealPlanID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createMealPlanOption = `-- name: CreateMealPlanOption :exec

INSERT INTO meal_plan_options (id,assigned_cook,assigned_dishwasher,meal_id,notes,meal_scale,belongs_to_meal_plan_event,chosen)
VALUES (
    $1, -- sqlc.arg(id),
    $2, -- sqlc.arg(assigned_cook),
    $3, -- sqlc.arg(assigned_dishwasher),
    $4, -- sqlc.arg(meal_id),
    $5, -- sqlc.arg(notes),
    $6, -- sqlc.arg(meal_scale)::float,
    $7, -- sqlc.arg(belongs_to_meal_plan_event),
    $8  -- sqlc.arg(chosen)::bool
)
`

type CreateMealPlanOptionParams struct {
	ID                     string
	AssignedCook           sql.NullString
	AssignedDishwasher     sql.NullString
	MealID                 string
	Notes                  string
	MealScale              string
	BelongsToMealPlanEvent sql.NullString
	Chosen                 bool
}

func (q *Queries) CreateMealPlanOption(ctx context.Context, db DBTX, arg *CreateMealPlanOptionParams) error {
	_, err := db.ExecContext(ctx, createMealPlanOption,
		arg.ID,
		arg.AssignedCook,
		arg.AssignedDishwasher,
		arg.MealID,
		arg.Notes,
		arg.MealScale,
		arg.BelongsToMealPlanEvent,
		arg.Chosen,
	)
	return err
}

const finalizeMealPlanOption = `-- name: FinalizeMealPlanOption :exec

UPDATE meal_plan_options SET chosen = (belongs_to_meal_plan_event = $1 AND id = $2), tiebroken = $3 WHERE archived_at IS NULL AND belongs_to_meal_plan_event = $1 AND id = $2
`

type FinalizeMealPlanOptionParams struct {
	ID                     string
	BelongsToMealPlanEvent sql.NullString
	Tiebroken              bool
}

func (q *Queries) FinalizeMealPlanOption(ctx context.Context, db DBTX, arg *FinalizeMealPlanOptionParams) error {
	_, err := db.ExecContext(ctx, finalizeMealPlanOption, arg.BelongsToMealPlanEvent, arg.ID, arg.Tiebroken)
	return err
}

const getMealPlanOption = `-- name: GetMealPlanOption :one

SELECT
	meal_plan_options.id,
	meal_plan_options.assigned_cook,
	meal_plan_options.assigned_dishwasher,
	meal_plan_options.chosen,
	meal_plan_options.tiebroken,
    meal_plan_options.meal_scale,
	meal_plan_options.meal_id,
	meal_plan_options.notes,
	meal_plan_options.created_at,
	meal_plan_options.last_updated_at,
	meal_plan_options.archived_at,
	meal_plan_options.belongs_to_meal_plan_event,
	meals.id,
	meals.name,
	meals.description,
	meals.min_estimated_portions,
	meals.max_estimated_portions,
    meals.eligible_for_meal_plans,
	meals.created_at,
	meals.last_updated_at,
	meals.archived_at,
	meals.created_by_user
FROM meal_plan_options
	JOIN meal_plan_events ON meal_plan_options.belongs_to_meal_plan_event = meal_plan_events.id
	JOIN meal_plans ON meal_plan_events.belongs_to_meal_plan = meal_plans.id
	JOIN meals ON meal_plan_options.meal_id = meals.id
WHERE meal_plan_options.archived_at IS NULL
	AND meal_plan_options.belongs_to_meal_plan_event = $2
	AND meal_plan_options.id = $3
	AND meal_plan_events.id = $2
	AND meal_plan_events.belongs_to_meal_plan = $1
	AND meal_plans.archived_at IS NULL
	AND meal_plans.id = $1
`

type GetMealPlanOptionParams struct {
	BelongsToMealPlan      string
	ID                     string
	BelongsToMealPlanEvent sql.NullString
}

type GetMealPlanOptionRow struct {
	CreatedAt              time.Time
	CreatedAt_2            time.Time
	ArchivedAt_2           sql.NullTime
	LastUpdatedAt_2        sql.NullTime
	ArchivedAt             sql.NullTime
	LastUpdatedAt          sql.NullTime
	MealScale              string
	MinEstimatedPortions   string
	MealID                 string
	ID                     string
	CreatedByUser          string
	Notes                  string
	ID_2                   string
	Name                   string
	Description            string
	MaxEstimatedPortions   sql.NullString
	BelongsToMealPlanEvent sql.NullString
	AssignedDishwasher     sql.NullString
	AssignedCook           sql.NullString
	EligibleForMealPlans   bool
	Chosen                 bool
	Tiebroken              bool
}

func (q *Queries) GetMealPlanOption(ctx context.Context, db DBTX, arg *GetMealPlanOptionParams) (*GetMealPlanOptionRow, error) {
	row := db.QueryRowContext(ctx, getMealPlanOption, arg.BelongsToMealPlan, arg.BelongsToMealPlanEvent, arg.ID)
	var i GetMealPlanOptionRow
	err := row.Scan(
		&i.ID,
		&i.AssignedCook,
		&i.AssignedDishwasher,
		&i.Chosen,
		&i.Tiebroken,
		&i.MealScale,
		&i.MealID,
		&i.Notes,
		&i.CreatedAt,
		&i.LastUpdatedAt,
		&i.ArchivedAt,
		&i.BelongsToMealPlanEvent,
		&i.ID_2,
		&i.Name,
		&i.Description,
		&i.MinEstimatedPortions,
		&i.MaxEstimatedPortions,
		&i.EligibleForMealPlans,
		&i.CreatedAt_2,
		&i.LastUpdatedAt_2,
		&i.ArchivedAt_2,
		&i.CreatedByUser,
	)
	return &i, err
}

const getMealPlanOptionByID = `-- name: GetMealPlanOptionByID :one

SELECT
	meal_plan_options.id,
	meal_plan_options.assigned_cook,
	meal_plan_options.assigned_dishwasher,
	meal_plan_options.chosen,
	meal_plan_options.tiebroken,
    meal_plan_options.meal_scale,
	meal_plan_options.meal_id,
	meal_plan_options.notes,
	meal_plan_options.created_at,
	meal_plan_options.last_updated_at,
	meal_plan_options.archived_at,
	meal_plan_options.belongs_to_meal_plan_event,
	meals.id,
	meals.name,
	meals.description,
	meals.min_estimated_portions,
	meals.max_estimated_portions,
    meals.eligible_for_meal_plans,
	meals.created_at,
	meals.last_updated_at,
	meals.archived_at,
	meals.created_by_user
FROM meal_plan_options
	JOIN meal_plan_events ON meal_plan_options.belongs_to_meal_plan_event = meal_plan_events.id
	JOIN meal_plans ON meal_plan_events.belongs_to_meal_plan = meal_plans.id
	JOIN meals ON meal_plan_options.meal_id = meals.id
WHERE meal_plan_options.archived_at IS NULL
	AND meal_plan_options.id = $1
`

type GetMealPlanOptionByIDRow struct {
	CreatedAt              time.Time
	CreatedAt_2            time.Time
	ArchivedAt_2           sql.NullTime
	LastUpdatedAt_2        sql.NullTime
	ArchivedAt             sql.NullTime
	LastUpdatedAt          sql.NullTime
	MealScale              string
	MinEstimatedPortions   string
	MealID                 string
	ID                     string
	CreatedByUser          string
	Notes                  string
	ID_2                   string
	Name                   string
	Description            string
	MaxEstimatedPortions   sql.NullString
	BelongsToMealPlanEvent sql.NullString
	AssignedDishwasher     sql.NullString
	AssignedCook           sql.NullString
	EligibleForMealPlans   bool
	Chosen                 bool
	Tiebroken              bool
}

func (q *Queries) GetMealPlanOptionByID(ctx context.Context, db DBTX, id string) (*GetMealPlanOptionByIDRow, error) {
	row := db.QueryRowContext(ctx, getMealPlanOptionByID, id)
	var i GetMealPlanOptionByIDRow
	err := row.Scan(
		&i.ID,
		&i.AssignedCook,
		&i.AssignedDishwasher,
		&i.Chosen,
		&i.Tiebroken,
		&i.MealScale,
		&i.MealID,
		&i.Notes,
		&i.CreatedAt,
		&i.LastUpdatedAt,
		&i.ArchivedAt,
		&i.BelongsToMealPlanEvent,
		&i.ID_2,
		&i.Name,
		&i.Description,
		&i.MinEstimatedPortions,
		&i.MaxEstimatedPortions,
		&i.EligibleForMealPlans,
		&i.CreatedAt_2,
		&i.LastUpdatedAt_2,
		&i.ArchivedAt_2,
		&i.CreatedByUser,
	)
	return &i, err
}

const getMealPlanOptionsForMealPlanEvent = `-- name: GetMealPlanOptionsForMealPlanEvent :many

SELECT
	meal_plan_options.id,
	meal_plan_options.assigned_cook,
	meal_plan_options.assigned_dishwasher,
	meal_plan_options.chosen,
	meal_plan_options.tiebroken,
    meal_plan_options.meal_scale,
	meal_plan_options.meal_id,
	meal_plan_options.notes,
	meal_plan_options.created_at,
	meal_plan_options.last_updated_at,
	meal_plan_options.archived_at,
	meal_plan_options.belongs_to_meal_plan_event,
	meals.id,
	meals.name,
	meals.description,
	meals.min_estimated_portions,
	meals.max_estimated_portions,
    meals.eligible_for_meal_plans,
	meals.created_at,
	meals.last_updated_at,
	meals.archived_at,
	meals.created_by_user
FROM meal_plan_options
	JOIN meal_plan_events ON meal_plan_options.belongs_to_meal_plan_event = meal_plan_events.id
	JOIN meal_plans ON meal_plan_events.belongs_to_meal_plan = meal_plans.id
	JOIN meals ON meal_plan_options.meal_id = meals.id
WHERE
	meal_plan_options.archived_at IS NULL
	AND meal_plan_options.belongs_to_meal_plan_event = $1
	AND meal_plan_events.id = $1
	AND meal_plan_events.belongs_to_meal_plan = $2
	AND meal_plans.archived_at IS NULL
	AND meal_plans.id = $2
`

type GetMealPlanOptionsForMealPlanEventParams struct {
	BelongsToMealPlan      string
	BelongsToMealPlanEvent sql.NullString
}

type GetMealPlanOptionsForMealPlanEventRow struct {
	CreatedAt              time.Time
	CreatedAt_2            time.Time
	ArchivedAt_2           sql.NullTime
	LastUpdatedAt_2        sql.NullTime
	ArchivedAt             sql.NullTime
	LastUpdatedAt          sql.NullTime
	MealScale              string
	MinEstimatedPortions   string
	MealID                 string
	ID                     string
	CreatedByUser          string
	Notes                  string
	ID_2                   string
	Name                   string
	Description            string
	MaxEstimatedPortions   sql.NullString
	BelongsToMealPlanEvent sql.NullString
	AssignedDishwasher     sql.NullString
	AssignedCook           sql.NullString
	EligibleForMealPlans   bool
	Chosen                 bool
	Tiebroken              bool
}

func (q *Queries) GetMealPlanOptionsForMealPlanEvent(ctx context.Context, db DBTX, arg *GetMealPlanOptionsForMealPlanEventParams) ([]*GetMealPlanOptionsForMealPlanEventRow, error) {
	rows, err := db.QueryContext(ctx, getMealPlanOptionsForMealPlanEvent, arg.BelongsToMealPlanEvent, arg.BelongsToMealPlan)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetMealPlanOptionsForMealPlanEventRow{}
	for rows.Next() {
		var i GetMealPlanOptionsForMealPlanEventRow
		if err := rows.Scan(
			&i.ID,
			&i.AssignedCook,
			&i.AssignedDishwasher,
			&i.Chosen,
			&i.Tiebroken,
			&i.MealScale,
			&i.MealID,
			&i.Notes,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.BelongsToMealPlanEvent,
			&i.ID_2,
			&i.Name,
			&i.Description,
			&i.MinEstimatedPortions,
			&i.MaxEstimatedPortions,
			&i.EligibleForMealPlans,
			&i.CreatedAt_2,
			&i.LastUpdatedAt_2,
			&i.ArchivedAt_2,
			&i.CreatedByUser,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMealPlanOption = `-- name: UpdateMealPlanOption :exec

UPDATE meal_plan_options
SET
	assigned_cook = $1,
	assigned_dishwasher = $2,
	meal_id = $3,
	notes = $4,
	meal_scale = $5,
	last_updated_at = NOW()
WHERE archived_at IS NULL
	AND belongs_to_meal_plan_event = $6
	AND id = $7
`

type UpdateMealPlanOptionParams struct {
	MealID                 string
	Notes                  string
	MealScale              string
	ID                     string
	AssignedCook           sql.NullString
	AssignedDishwasher     sql.NullString
	BelongsToMealPlanEvent sql.NullString
}

func (q *Queries) UpdateMealPlanOption(ctx context.Context, db DBTX, arg *UpdateMealPlanOptionParams) error {
	_, err := db.ExecContext(ctx, updateMealPlanOption,
		arg.AssignedCook,
		arg.AssignedDishwasher,
		arg.MealID,
		arg.Notes,
		arg.MealScale,
		arg.BelongsToMealPlanEvent,
		arg.ID,
	)
	return err
}
