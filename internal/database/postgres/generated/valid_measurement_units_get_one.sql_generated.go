// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: valid_measurement_units_get_one.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const GetValidMeasurementUnit = `-- name: GetValidMeasurementUnit :exec
SELECT
	valid_measurement_units.id,
	valid_measurement_units.name,
	valid_measurement_units.description,
	valid_measurement_units.volumetric,
	valid_measurement_units.icon_path,
	valid_measurement_units.universal,
	valid_measurement_units.metric,
	valid_measurement_units.imperial,
	valid_measurement_units.plural_name,
	valid_measurement_units.created_at,
	valid_measurement_units.last_updated_at,
	valid_measurement_units.archived_at
FROM valid_measurement_units
WHERE valid_measurement_units.archived_at IS NULL
	AND valid_measurement_units.id = $1
`

type GetValidMeasurementUnitRow struct {
	CreatedAt     time.Time    `db:"created_at"`
	LastUpdatedAt sql.NullTime `db:"last_updated_at"`
	ArchivedAt    sql.NullTime `db:"archived_at"`
	ID            string       `db:"id"`
	Name          string       `db:"name"`
	Description   string       `db:"description"`
	PluralName    string       `db:"plural_name"`
	IconPath      string       `db:"icon_path"`
	Volumetric    sql.NullBool `db:"volumetric"`
	Metric        bool         `db:"metric"`
	Imperial      bool         `db:"imperial"`
	Universal     bool         `db:"universal"`
}

func (q *Queries) GetValidMeasurementUnit(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, GetValidMeasurementUnit, id)
	return err
}
