// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: valid_ingredient_preparations.sql

package generated

import (
	"context"
	"database/sql"
)

const ArchiveValidIngredientPreparation = `-- name: ArchiveValidIngredientPreparation :exec
UPDATE valid_ingredient_preparations SET archived_on = extract(epoch FROM NOW()) WHERE archived_on IS NULL AND id = $1
`

func (q *Queries) ArchiveValidIngredientPreparation(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, ArchiveValidIngredientPreparation, id)
	return err
}

const CreateValidIngredientPreparation = `-- name: CreateValidIngredientPreparation :exec
INSERT INTO valid_ingredient_preparations (id,notes,valid_preparation_id,valid_ingredient_id) VALUES ($1,$2,$3,$4)
`

type CreateValidIngredientPreparationParams struct {
	ID                 string
	Notes              string
	ValidPreparationID string
	ValidIngredientID  string
}

func (q *Queries) CreateValidIngredientPreparation(ctx context.Context, arg *CreateValidIngredientPreparationParams) error {
	_, err := q.db.ExecContext(ctx, CreateValidIngredientPreparation,
		arg.ID,
		arg.Notes,
		arg.ValidPreparationID,
		arg.ValidIngredientID,
	)
	return err
}

const GetTotalValidIngredientPreparationsCount = `-- name: GetTotalValidIngredientPreparationsCount :one
SELECT COUNT(valid_ingredient_preparations.id) FROM valid_ingredient_preparations WHERE valid_ingredient_preparations.archived_on IS NULL
`

func (q *Queries) GetTotalValidIngredientPreparationsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, GetTotalValidIngredientPreparationsCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const GetValidIngredientPreparation = `-- name: GetValidIngredientPreparation :one
SELECT
    valid_ingredient_preparations.id,
    valid_ingredient_preparations.notes,
    valid_preparations.id,
    valid_preparations.name,
    valid_preparations.description,
    valid_preparations.icon_path,
    valid_preparations.created_on,
    valid_preparations.last_updated_on,
    valid_preparations.archived_on,
    valid_ingredients.id,
    valid_ingredients.name,
    valid_ingredients.description,
    valid_ingredients.warning,
    valid_ingredients.contains_egg,
    valid_ingredients.contains_dairy,
    valid_ingredients.contains_peanut,
    valid_ingredients.contains_tree_nut,
    valid_ingredients.contains_soy,
    valid_ingredients.contains_wheat,
    valid_ingredients.contains_shellfish,
    valid_ingredients.contains_sesame,
    valid_ingredients.contains_fish,
    valid_ingredients.contains_gluten,
    valid_ingredients.animal_flesh,
    valid_ingredients.volumetric,
    valid_ingredients.is_liquid,
    valid_ingredients.icon_path,
    valid_ingredients.created_on,
    valid_ingredients.last_updated_on,
    valid_ingredients.archived_on,
    valid_ingredient_preparations.created_on,
    valid_ingredient_preparations.last_updated_on,
    valid_ingredient_preparations.archived_on
FROM valid_ingredient_preparations
         JOIN valid_ingredients ON valid_ingredient_preparations.valid_ingredient_id = valid_ingredients.id
         JOIN valid_preparations ON valid_ingredient_preparations.valid_preparation_id = valid_preparations.id
WHERE valid_ingredient_preparations.archived_on IS NULL
  AND valid_ingredient_preparations.id = $1
`

type GetValidIngredientPreparationRow struct {
	ID                string
	Notes             string
	ID_2              string
	Name              string
	Description       string
	IconPath          string
	CreatedOn         int64
	LastUpdatedOn     sql.NullInt64
	ArchivedOn        sql.NullInt64
	ID_3              string
	Name_2            string
	Description_2     string
	Warning           string
	ContainsEgg       bool
	ContainsDairy     bool
	ContainsPeanut    bool
	ContainsTreeNut   bool
	ContainsSoy       bool
	ContainsWheat     bool
	ContainsShellfish bool
	ContainsSesame    bool
	ContainsFish      bool
	ContainsGluten    bool
	AnimalFlesh       bool
	Volumetric        bool
	IsLiquid          sql.NullBool
	IconPath_2        string
	CreatedOn_2       int64
	LastUpdatedOn_2   sql.NullInt64
	ArchivedOn_2      sql.NullInt64
	CreatedOn_3       int64
	LastUpdatedOn_3   sql.NullInt64
	ArchivedOn_3      sql.NullInt64
}

func (q *Queries) GetValidIngredientPreparation(ctx context.Context, id string) (*GetValidIngredientPreparationRow, error) {
	row := q.db.QueryRowContext(ctx, GetValidIngredientPreparation, id)
	var i GetValidIngredientPreparationRow
	err := row.Scan(
		&i.ID,
		&i.Notes,
		&i.ID_2,
		&i.Name,
		&i.Description,
		&i.IconPath,
		&i.CreatedOn,
		&i.LastUpdatedOn,
		&i.ArchivedOn,
		&i.ID_3,
		&i.Name_2,
		&i.Description_2,
		&i.Warning,
		&i.ContainsEgg,
		&i.ContainsDairy,
		&i.ContainsPeanut,
		&i.ContainsTreeNut,
		&i.ContainsSoy,
		&i.ContainsWheat,
		&i.ContainsShellfish,
		&i.ContainsSesame,
		&i.ContainsFish,
		&i.ContainsGluten,
		&i.AnimalFlesh,
		&i.Volumetric,
		&i.IsLiquid,
		&i.IconPath_2,
		&i.CreatedOn_2,
		&i.LastUpdatedOn_2,
		&i.ArchivedOn_2,
		&i.CreatedOn_3,
		&i.LastUpdatedOn_3,
		&i.ArchivedOn_3,
	)
	return &i, err
}

const UpdateValidIngredientPreparation = `-- name: UpdateValidIngredientPreparation :exec
UPDATE valid_ingredient_preparations SET notes = $1, valid_preparation_id = $2, valid_ingredient_id = $3, last_updated_on = extract(epoch FROM NOW()) WHERE archived_on IS NULL AND id = $4
`

type UpdateValidIngredientPreparationParams struct {
	Notes              string
	ValidPreparationID string
	ValidIngredientID  string
	ID                 string
}

func (q *Queries) UpdateValidIngredientPreparation(ctx context.Context, arg *UpdateValidIngredientPreparationParams) error {
	_, err := q.db.ExecContext(ctx, UpdateValidIngredientPreparation,
		arg.Notes,
		arg.ValidPreparationID,
		arg.ValidIngredientID,
		arg.ID,
	)
	return err
}

const ValidIngredientPreparationExists = `-- name: ValidIngredientPreparationExists :one
SELECT EXISTS ( SELECT valid_ingredient_preparations.id FROM valid_ingredient_preparations WHERE valid_ingredient_preparations.archived_on IS NULL AND valid_ingredient_preparations.id = $1 )
`

func (q *Queries) ValidIngredientPreparationExists(ctx context.Context, id string) (bool, error) {
	row := q.db.QueryRowContext(ctx, ValidIngredientPreparationExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
