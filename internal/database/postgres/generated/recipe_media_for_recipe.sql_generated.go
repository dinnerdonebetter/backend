// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: recipe_media_for_recipe.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const GetRecipeMediaForRecipe = `-- name: GetRecipeMediaForRecipe :many
SELECT
    recipe_media.id,
    recipe_media.belongs_to_recipe,
    recipe_media.belongs_to_recipe_step,
    recipe_media.mime_type,
    recipe_media.internal_path,
    recipe_media.external_path,
    recipe_media.index,
    recipe_media.created_at,
    recipe_media.last_updated_at,
    recipe_media.archived_at
FROM recipe_media
WHERE recipe_media.belongs_to_recipe = $1
    AND recipe_media.belongs_to_recipe_step IS NULL
    AND recipe_media.archived_at IS NULL
GROUP BY recipe_media.id
ORDER BY recipe_media.id
`

type GetRecipeMediaForRecipeRow struct {
	CreatedAt           time.Time      `db:"created_at"`
	LastUpdatedAt       sql.NullTime   `db:"last_updated_at"`
	ArchivedAt          sql.NullTime   `db:"archived_at"`
	ID                  string         `db:"id"`
	InternalPath        string         `db:"internal_path"`
	ExternalPath        string         `db:"external_path"`
	MimeType            string         `db:"mime_type"`
	BelongsToRecipe     sql.NullString `db:"belongs_to_recipe"`
	BelongsToRecipeStep sql.NullString `db:"belongs_to_recipe_step"`
	Index               int32          `db:"index"`
}

func (q *Queries) GetRecipeMediaForRecipe(ctx context.Context, belongsToRecipe sql.NullString) ([]*GetRecipeMediaForRecipeRow, error) {
	rows, err := q.query(ctx, q.getRecipeMediaForRecipeStmt, GetRecipeMediaForRecipe, belongsToRecipe)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetRecipeMediaForRecipeRow{}
	for rows.Next() {
		var i GetRecipeMediaForRecipeRow
		if err := rows.Scan(
			&i.ID,
			&i.BelongsToRecipe,
			&i.BelongsToRecipeStep,
			&i.MimeType,
			&i.InternalPath,
			&i.ExternalPath,
			&i.Index,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
