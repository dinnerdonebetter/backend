// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: get_by_id_and_author_id.sql

package generated

import (
	"context"
	"database/sql"
)

const getRecipeByIDAndAuthorID = `-- name: GetRecipeByIDAndAuthorID :many

SELECT
	recipes.id,
	recipes.name,
	recipes.slug,
	recipes.source,
	recipes.description,
	recipes.inspired_by_recipe_id,
	recipes.min_estimated_portions,
	recipes.max_estimated_portions,
	recipes.portion_name,
	recipes.plural_portion_name,
	recipes.seal_of_approval,
	recipes.eligible_for_meals,
	recipes.yields_component_type,
	recipes.created_at,
	recipes.last_updated_at,
	recipes.archived_at,
	recipes.created_by_user,
	recipe_steps.id,
	recipe_steps.index,
	valid_preparations.id,
	valid_preparations.name,
	valid_preparations.description,
	valid_preparations.icon_path,
	valid_preparations.yields_nothing,
	valid_preparations.restrict_to_ingredients,
	valid_preparations.minimum_ingredient_count,
	valid_preparations.maximum_ingredient_count,
	valid_preparations.minimum_instrument_count,
	valid_preparations.maximum_instrument_count,
	valid_preparations.temperature_required,
	valid_preparations.time_estimate_required,
	valid_preparations.condition_expression_required,
    valid_preparations.consumes_vessel,
    valid_preparations.only_for_vessels,
    valid_preparations.minimum_vessel_count,
    valid_preparations.maximum_vessel_count,
	valid_preparations.slug,
	valid_preparations.past_tense,
	valid_preparations.created_at,
	valid_preparations.last_updated_at,
	valid_preparations.archived_at,
	recipe_steps.minimum_estimated_time_in_seconds,
	recipe_steps.maximum_estimated_time_in_seconds,
	recipe_steps.minimum_temperature_in_celsius,
	recipe_steps.maximum_temperature_in_celsius,
	recipe_steps.notes,
	recipe_steps.explicit_instructions,
	recipe_steps.condition_expression,
	recipe_steps.optional,
	recipe_steps.start_timer_automatically,
	recipe_steps.created_at,
	recipe_steps.last_updated_at,
	recipe_steps.archived_at,
	recipe_steps.belongs_to_recipe
FROM recipes
	FULL OUTER JOIN recipe_steps ON recipes.id=recipe_steps.belongs_to_recipe
	FULL OUTER JOIN valid_preparations ON recipe_steps.preparation_id=valid_preparations.id
WHERE recipes.archived_at IS NULL
	AND recipes.id = $1
	AND recipes.created_by_user = $2
ORDER BY recipe_steps.index
`

type GetRecipeByIDAndAuthorIDParams struct {
	ID            string
	CreatedByUser string
}

type GetRecipeByIDAndAuthorIDRow struct {
	LastUpdatedAt_2               sql.NullTime
	CreatedAt                     sql.NullTime
	ArchivedAt_3                  sql.NullTime
	LastUpdatedAt_3               sql.NullTime
	CreatedAt_3                   sql.NullTime
	ArchivedAt_2                  sql.NullTime
	CreatedAt_2                   sql.NullTime
	ArchivedAt                    sql.NullTime
	LastUpdatedAt                 sql.NullTime
	MaximumTemperatureInCelsius   sql.NullString
	MinimumTemperatureInCelsius   sql.NullString
	BelongsToRecipe               sql.NullString
	YieldsComponentType           NullComponentType
	PluralPortionName             sql.NullString
	PortionName                   sql.NullString
	MaxEstimatedPortions          sql.NullString
	CreatedByUser                 sql.NullString
	ID_2                          sql.NullString
	Source                        sql.NullString
	ID_3                          sql.NullString
	Name_2                        sql.NullString
	Description_2                 sql.NullString
	IconPath                      sql.NullString
	Description                   sql.NullString
	ConditionExpression           sql.NullString
	ExplicitInstructions          sql.NullString
	Slug                          sql.NullString
	Notes                         sql.NullString
	Name                          sql.NullString
	InspiredByRecipeID            sql.NullString
	ID                            sql.NullString
	MinEstimatedPortions          sql.NullString
	PastTense                     sql.NullString
	Slug_2                        sql.NullString
	MinimumEstimatedTimeInSeconds sql.NullInt64
	MaximumEstimatedTimeInSeconds sql.NullInt64
	MinimumInstrumentCount        sql.NullInt32
	MaximumInstrumentCount        sql.NullInt32
	MaximumIngredientCount        sql.NullInt32
	Index                         sql.NullInt32
	MinimumVesselCount            sql.NullInt32
	MinimumIngredientCount        sql.NullInt32
	MaximumVesselCount            sql.NullInt32
	OnlyForVessels                sql.NullBool
	SealOfApproval                sql.NullBool
	StartTimerAutomatically       sql.NullBool
	ConsumesVessel                sql.NullBool
	RestrictToIngredients         sql.NullBool
	Optional                      sql.NullBool
	TemperatureRequired           sql.NullBool
	YieldsNothing                 sql.NullBool
	TimeEstimateRequired          sql.NullBool
	ConditionExpressionRequired   sql.NullBool
	EligibleForMeals              sql.NullBool
}

func (q *Queries) GetRecipeByIDAndAuthorID(ctx context.Context, db DBTX, arg *GetRecipeByIDAndAuthorIDParams) ([]*GetRecipeByIDAndAuthorIDRow, error) {
	rows, err := db.QueryContext(ctx, getRecipeByIDAndAuthorID, arg.ID, arg.CreatedByUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetRecipeByIDAndAuthorIDRow{}
	for rows.Next() {
		var i GetRecipeByIDAndAuthorIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.Source,
			&i.Description,
			&i.InspiredByRecipeID,
			&i.MinEstimatedPortions,
			&i.MaxEstimatedPortions,
			&i.PortionName,
			&i.PluralPortionName,
			&i.SealOfApproval,
			&i.EligibleForMeals,
			&i.YieldsComponentType,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.CreatedByUser,
			&i.ID_2,
			&i.Index,
			&i.ID_3,
			&i.Name_2,
			&i.Description_2,
			&i.IconPath,
			&i.YieldsNothing,
			&i.RestrictToIngredients,
			&i.MinimumIngredientCount,
			&i.MaximumIngredientCount,
			&i.MinimumInstrumentCount,
			&i.MaximumInstrumentCount,
			&i.TemperatureRequired,
			&i.TimeEstimateRequired,
			&i.ConditionExpressionRequired,
			&i.ConsumesVessel,
			&i.OnlyForVessels,
			&i.MinimumVesselCount,
			&i.MaximumVesselCount,
			&i.Slug_2,
			&i.PastTense,
			&i.CreatedAt_2,
			&i.LastUpdatedAt_2,
			&i.ArchivedAt_2,
			&i.MinimumEstimatedTimeInSeconds,
			&i.MaximumEstimatedTimeInSeconds,
			&i.MinimumTemperatureInCelsius,
			&i.MaximumTemperatureInCelsius,
			&i.Notes,
			&i.ExplicitInstructions,
			&i.ConditionExpression,
			&i.Optional,
			&i.StartTimerAutomatically,
			&i.CreatedAt_3,
			&i.LastUpdatedAt_3,
			&i.ArchivedAt_3,
			&i.BelongsToRecipe,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
