// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: get_by_id_and_author_id.sql

package generated

import (
	"context"
	"database/sql"
)

const GetRecipeByIDAndAuthorID = `-- name: GetRecipeByIDAndAuthorID :many

SELECT
	recipes.id,
	recipes.name,
	recipes.slug,
	recipes.source,
	recipes.description,
	recipes.inspired_by_recipe_id,
	recipes.min_estimated_portions,
	recipes.max_estimated_portions,
	recipes.portion_name,
	recipes.plural_portion_name,
	recipes.seal_of_approval,
	recipes.eligible_for_meals,
	recipes.yields_component_type,
	recipes.created_at,
	recipes.last_updated_at,
	recipes.archived_at,
	recipes.created_by_user,
	recipe_steps.id,
	recipe_steps.index,
	valid_preparations.id,
	valid_preparations.name,
	valid_preparations.description,
	valid_preparations.icon_path,
	valid_preparations.yields_nothing,
	valid_preparations.restrict_to_ingredients,
	valid_preparations.minimum_ingredient_count,
	valid_preparations.maximum_ingredient_count,
	valid_preparations.minimum_instrument_count,
	valid_preparations.maximum_instrument_count,
	valid_preparations.temperature_required,
	valid_preparations.time_estimate_required,
	valid_preparations.condition_expression_required,
    valid_preparations.consumes_vessel,
    valid_preparations.only_for_vessels,
    valid_preparations.minimum_vessel_count,
    valid_preparations.maximum_vessel_count,
	valid_preparations.slug,
	valid_preparations.past_tense,
	valid_preparations.created_at,
	valid_preparations.last_updated_at,
	valid_preparations.archived_at,
	recipe_steps.minimum_estimated_time_in_seconds,
	recipe_steps.maximum_estimated_time_in_seconds,
	recipe_steps.minimum_temperature_in_celsius,
	recipe_steps.maximum_temperature_in_celsius,
	recipe_steps.notes,
	recipe_steps.explicit_instructions,
	recipe_steps.condition_expression,
	recipe_steps.optional,
	recipe_steps.start_timer_automatically,
	recipe_steps.created_at,
	recipe_steps.last_updated_at,
	recipe_steps.archived_at,
	recipe_steps.belongs_to_recipe
FROM recipes
	FULL OUTER JOIN recipe_steps ON recipes.id=recipe_steps.belongs_to_recipe
	FULL OUTER JOIN valid_preparations ON recipe_steps.preparation_id=valid_preparations.id
WHERE recipes.archived_at IS NULL
	AND recipes.id = $1
	AND recipes.created_by_user = $2
ORDER BY recipe_steps.index
`

type GetRecipeByIDAndAuthorIDParams struct {
	ID            string `db:"id"`
	CreatedByUser string `db:"created_by_user"`
}

type GetRecipeByIDAndAuthorIDRow struct {
	LastUpdatedAt_2               sql.NullTime      `db:"last_updated_at_2"`
	CreatedAt                     sql.NullTime      `db:"created_at"`
	ArchivedAt_3                  sql.NullTime      `db:"archived_at_3"`
	LastUpdatedAt_3               sql.NullTime      `db:"last_updated_at_3"`
	CreatedAt_3                   sql.NullTime      `db:"created_at_3"`
	ArchivedAt_2                  sql.NullTime      `db:"archived_at_2"`
	CreatedAt_2                   sql.NullTime      `db:"created_at_2"`
	ArchivedAt                    sql.NullTime      `db:"archived_at"`
	LastUpdatedAt                 sql.NullTime      `db:"last_updated_at"`
	MaximumTemperatureInCelsius   sql.NullString    `db:"maximum_temperature_in_celsius"`
	MinimumTemperatureInCelsius   sql.NullString    `db:"minimum_temperature_in_celsius"`
	BelongsToRecipe               sql.NullString    `db:"belongs_to_recipe"`
	YieldsComponentType           NullComponentType `db:"yields_component_type"`
	PluralPortionName             sql.NullString    `db:"plural_portion_name"`
	PortionName                   sql.NullString    `db:"portion_name"`
	MaxEstimatedPortions          sql.NullString    `db:"max_estimated_portions"`
	CreatedByUser                 sql.NullString    `db:"created_by_user"`
	ID_2                          sql.NullString    `db:"id_2"`
	Source                        sql.NullString    `db:"source"`
	ID_3                          sql.NullString    `db:"id_3"`
	Name_2                        sql.NullString    `db:"name_2"`
	Description_2                 sql.NullString    `db:"description_2"`
	IconPath                      sql.NullString    `db:"icon_path"`
	Description                   sql.NullString    `db:"description"`
	ConditionExpression           sql.NullString    `db:"condition_expression"`
	ExplicitInstructions          sql.NullString    `db:"explicit_instructions"`
	Slug                          sql.NullString    `db:"slug"`
	Notes                         sql.NullString    `db:"notes"`
	Name                          sql.NullString    `db:"name"`
	InspiredByRecipeID            sql.NullString    `db:"inspired_by_recipe_id"`
	ID                            sql.NullString    `db:"id"`
	MinEstimatedPortions          sql.NullString    `db:"min_estimated_portions"`
	PastTense                     sql.NullString    `db:"past_tense"`
	Slug_2                        sql.NullString    `db:"slug_2"`
	MinimumEstimatedTimeInSeconds sql.NullInt64     `db:"minimum_estimated_time_in_seconds"`
	MaximumEstimatedTimeInSeconds sql.NullInt64     `db:"maximum_estimated_time_in_seconds"`
	MinimumInstrumentCount        sql.NullInt32     `db:"minimum_instrument_count"`
	MaximumInstrumentCount        sql.NullInt32     `db:"maximum_instrument_count"`
	MaximumIngredientCount        sql.NullInt32     `db:"maximum_ingredient_count"`
	Index                         sql.NullInt32     `db:"index"`
	MinimumVesselCount            sql.NullInt32     `db:"minimum_vessel_count"`
	MinimumIngredientCount        sql.NullInt32     `db:"minimum_ingredient_count"`
	MaximumVesselCount            sql.NullInt32     `db:"maximum_vessel_count"`
	OnlyForVessels                sql.NullBool      `db:"only_for_vessels"`
	SealOfApproval                sql.NullBool      `db:"seal_of_approval"`
	StartTimerAutomatically       sql.NullBool      `db:"start_timer_automatically"`
	ConsumesVessel                sql.NullBool      `db:"consumes_vessel"`
	RestrictToIngredients         sql.NullBool      `db:"restrict_to_ingredients"`
	Optional                      sql.NullBool      `db:"optional"`
	TemperatureRequired           sql.NullBool      `db:"temperature_required"`
	YieldsNothing                 sql.NullBool      `db:"yields_nothing"`
	TimeEstimateRequired          sql.NullBool      `db:"time_estimate_required"`
	ConditionExpressionRequired   sql.NullBool      `db:"condition_expression_required"`
	EligibleForMeals              sql.NullBool      `db:"eligible_for_meals"`
}

func (q *Queries) GetRecipeByIDAndAuthorID(ctx context.Context, db DBTX, arg *GetRecipeByIDAndAuthorIDParams) ([]*GetRecipeByIDAndAuthorIDRow, error) {
	rows, err := db.QueryContext(ctx, GetRecipeByIDAndAuthorID, arg.ID, arg.CreatedByUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetRecipeByIDAndAuthorIDRow{}
	for rows.Next() {
		var i GetRecipeByIDAndAuthorIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.Source,
			&i.Description,
			&i.InspiredByRecipeID,
			&i.MinEstimatedPortions,
			&i.MaxEstimatedPortions,
			&i.PortionName,
			&i.PluralPortionName,
			&i.SealOfApproval,
			&i.EligibleForMeals,
			&i.YieldsComponentType,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.CreatedByUser,
			&i.ID_2,
			&i.Index,
			&i.ID_3,
			&i.Name_2,
			&i.Description_2,
			&i.IconPath,
			&i.YieldsNothing,
			&i.RestrictToIngredients,
			&i.MinimumIngredientCount,
			&i.MaximumIngredientCount,
			&i.MinimumInstrumentCount,
			&i.MaximumInstrumentCount,
			&i.TemperatureRequired,
			&i.TimeEstimateRequired,
			&i.ConditionExpressionRequired,
			&i.ConsumesVessel,
			&i.OnlyForVessels,
			&i.MinimumVesselCount,
			&i.MaximumVesselCount,
			&i.Slug_2,
			&i.PastTense,
			&i.CreatedAt_2,
			&i.LastUpdatedAt_2,
			&i.ArchivedAt_2,
			&i.MinimumEstimatedTimeInSeconds,
			&i.MaximumEstimatedTimeInSeconds,
			&i.MinimumTemperatureInCelsius,
			&i.MaximumTemperatureInCelsius,
			&i.Notes,
			&i.ExplicitInstructions,
			&i.ConditionExpression,
			&i.Optional,
			&i.StartTimerAutomatically,
			&i.CreatedAt_3,
			&i.LastUpdatedAt_3,
			&i.ArchivedAt_3,
			&i.BelongsToRecipe,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
