// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: recipe_step_completion_conditions.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const archiveRecipeStepCompletionCondition = `-- name: ArchiveRecipeStepCompletionCondition :exec

UPDATE recipe_step_completion_conditions SET archived_at = NOW() WHERE archived_at IS NULL AND belongs_to_recipe_step = $1 AND id = $2
`

type ArchiveRecipeStepCompletionConditionParams struct {
	BelongsToRecipeStep string
	ID                  string
}

func (q *Queries) ArchiveRecipeStepCompletionCondition(ctx context.Context, db DBTX, arg *ArchiveRecipeStepCompletionConditionParams) error {
	_, err := db.ExecContext(ctx, archiveRecipeStepCompletionCondition, arg.BelongsToRecipeStep, arg.ID)
	return err
}

const checkRecipeStepCompletionConditionExistence = `-- name: CheckRecipeStepCompletionConditionExistence :one

SELECT EXISTS ( SELECT recipe_step_completion_conditions.id FROM recipe_step_completion_conditions JOIN recipe_steps ON recipe_step_completion_conditions.belongs_to_recipe_step=recipe_steps.id JOIN recipes ON recipe_steps.belongs_to_recipe=recipes.id WHERE recipe_step_completion_conditions.archived_at IS NULL AND recipe_step_completion_conditions.belongs_to_recipe_step = $1 AND recipe_step_completion_conditions.id = $2 AND recipe_steps.archived_at IS NULL AND recipe_steps.belongs_to_recipe = $3 AND recipe_steps.id = $1 AND recipes.archived_at IS NULL AND recipes.id = $3 )
`

type CheckRecipeStepCompletionConditionExistenceParams struct {
	RecipeStepID                    string
	RecipeStepCompletionConditionID string
	RecipeID                        string
}

func (q *Queries) CheckRecipeStepCompletionConditionExistence(ctx context.Context, db DBTX, arg *CheckRecipeStepCompletionConditionExistenceParams) (bool, error) {
	row := db.QueryRowContext(ctx, checkRecipeStepCompletionConditionExistence, arg.RecipeStepID, arg.RecipeStepCompletionConditionID, arg.RecipeID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createRecipeStepCompletionCondition = `-- name: CreateRecipeStepCompletionCondition :exec

INSERT INTO recipe_step_completion_conditions (
	id,
	belongs_to_recipe_step,
	ingredient_state,
	optional,
	notes
) VALUES ($1,$2,$3,$4,$5)
`

type CreateRecipeStepCompletionConditionParams struct {
	ID                  string
	BelongsToRecipeStep string
	IngredientState     string
	Notes               string
	Optional            bool
}

func (q *Queries) CreateRecipeStepCompletionCondition(ctx context.Context, db DBTX, arg *CreateRecipeStepCompletionConditionParams) error {
	_, err := db.ExecContext(ctx, createRecipeStepCompletionCondition,
		arg.ID,
		arg.BelongsToRecipeStep,
		arg.IngredientState,
		arg.Optional,
		arg.Notes,
	)
	return err
}

const getAllRecipeStepCompletionConditionsForRecipe = `-- name: GetAllRecipeStepCompletionConditionsForRecipe :many

SELECT
	recipe_step_completion_condition_ingredients.id as recipe_step_completion_condition_ingredient_id,
	recipe_step_completion_condition_ingredients.belongs_to_recipe_step_completion_condition as recipe_step_completion_condition_ingredient_belongs_to_recipe_step_completion_condition,
	recipe_step_completion_condition_ingredients.recipe_step_ingredient as recipe_step_completion_condition_ingredient_recipe_step_ingredient,
	recipe_step_completion_conditions.id,
	recipe_step_completion_conditions.belongs_to_recipe_step,
	valid_ingredient_states.id as valid_ingredient_state_id,
	valid_ingredient_states.name as valid_ingredient_state_name,
	valid_ingredient_states.description as valid_ingredient_state_description,
	valid_ingredient_states.icon_path as valid_ingredient_state_icon_path,
	valid_ingredient_states.slug as valid_ingredient_state_slug,
	valid_ingredient_states.past_tense as valid_ingredient_state_past_tense,
	valid_ingredient_states.attribute_type as valid_ingredient_state_attribute_type,
	valid_ingredient_states.created_at as valid_ingredient_state_created_at,
	valid_ingredient_states.last_updated_at as valid_ingredient_state_last_updated_at,
	valid_ingredient_states.archived_at as valid_ingredient_state_archived_at,
	recipe_step_completion_conditions.optional,
	recipe_step_completion_conditions.notes,
	recipe_step_completion_conditions.created_at,
	recipe_step_completion_conditions.last_updated_at,
	recipe_step_completion_conditions.archived_at
FROM recipe_step_completion_condition_ingredients
	LEFT JOIN recipe_step_completion_conditions ON recipe_step_completion_condition_ingredients.belongs_to_recipe_step_completion_condition = recipe_step_completion_conditions.id
	LEFT JOIN recipe_steps ON recipe_step_completion_conditions.belongs_to_recipe_step = recipe_steps.id
	LEFT JOIN recipes ON recipe_steps.belongs_to_recipe = recipes.id
	LEFT JOIN valid_ingredient_states ON recipe_step_completion_conditions.ingredient_state = valid_ingredient_states.id
WHERE recipe_step_completion_conditions.archived_at IS NULL
	AND recipe_step_completion_condition_ingredients.archived_at IS NULL
    AND recipe_steps.archived_at IS NULL
	AND recipes.archived_at IS NULL
    AND valid_ingredient_states.archived_at IS NULL
	AND recipes.id = $1
GROUP BY recipe_step_completion_conditions.id,
	     recipe_step_completion_condition_ingredients.id,
	     valid_ingredient_states.id
`

type GetAllRecipeStepCompletionConditionsForRecipeRow struct {
	ArchivedAt                                               sql.NullTime
	LastUpdatedAt                                            sql.NullTime
	CreatedAt                                                sql.NullTime
	ValidIngredientStateArchivedAt                           sql.NullTime
	ValidIngredientStateLastUpdatedAt                        sql.NullTime
	ValidIngredientStateCreatedAt                            sql.NullTime
	RecipeStepCompletionConditionIngredientID                string
	RecipeStepCompletionConditionIngredientBelongsToRecipeS  string
	RecipeStepCompletionConditionIngredientRecipeStepIngredi string
	ValidIngredientStatePastTense                            sql.NullString
	ValidIngredientStateSlug                                 sql.NullString
	ValidIngredientStateAttributeType                        NullIngredientAttributeType
	ValidIngredientStateIconPath                             sql.NullString
	ValidIngredientStateDescription                          sql.NullString
	ValidIngredientStateName                                 sql.NullString
	Notes                                                    sql.NullString
	ValidIngredientStateID                                   sql.NullString
	BelongsToRecipeStep                                      sql.NullString
	ID                                                       sql.NullString
	Optional                                                 sql.NullBool
}

func (q *Queries) GetAllRecipeStepCompletionConditionsForRecipe(ctx context.Context, db DBTX, id string) ([]*GetAllRecipeStepCompletionConditionsForRecipeRow, error) {
	rows, err := db.QueryContext(ctx, getAllRecipeStepCompletionConditionsForRecipe, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetAllRecipeStepCompletionConditionsForRecipeRow{}
	for rows.Next() {
		var i GetAllRecipeStepCompletionConditionsForRecipeRow
		if err := rows.Scan(
			&i.RecipeStepCompletionConditionIngredientID,
			&i.RecipeStepCompletionConditionIngredientBelongsToRecipeS,
			&i.RecipeStepCompletionConditionIngredientRecipeStepIngredi,
			&i.ID,
			&i.BelongsToRecipeStep,
			&i.ValidIngredientStateID,
			&i.ValidIngredientStateName,
			&i.ValidIngredientStateDescription,
			&i.ValidIngredientStateIconPath,
			&i.ValidIngredientStateSlug,
			&i.ValidIngredientStatePastTense,
			&i.ValidIngredientStateAttributeType,
			&i.ValidIngredientStateCreatedAt,
			&i.ValidIngredientStateLastUpdatedAt,
			&i.ValidIngredientStateArchivedAt,
			&i.Optional,
			&i.Notes,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecipeStepCompletionCondition = `-- name: GetRecipeStepCompletionCondition :one

SELECT
	recipe_step_completion_condition_ingredients.id,
	recipe_step_completion_condition_ingredients.belongs_to_recipe_step_completion_condition,
	recipe_step_completion_condition_ingredients.recipe_step_ingredient,
	recipe_step_completion_conditions.id,
	recipe_step_completion_conditions.belongs_to_recipe_step,
	valid_ingredient_states.id,
	valid_ingredient_states.name,
	valid_ingredient_states.description,
	valid_ingredient_states.icon_path,
	valid_ingredient_states.slug,
	valid_ingredient_states.past_tense,
	valid_ingredient_states.attribute_type,
	valid_ingredient_states.created_at,
	valid_ingredient_states.last_updated_at,
	valid_ingredient_states.archived_at,
	recipe_step_completion_conditions.optional,
	recipe_step_completion_conditions.notes,
	recipe_step_completion_conditions.created_at,
	recipe_step_completion_conditions.last_updated_at,
	recipe_step_completion_conditions.archived_at
FROM recipe_step_completion_conditions
    JOIN recipe_step_completion_condition_ingredients ON recipe_step_completion_condition_ingredients.belongs_to_recipe_step_completion_condition = recipe_step_completion_conditions.id
    JOIN recipe_steps ON recipe_step_completion_conditions.belongs_to_recipe_step = recipe_steps.id
    JOIN recipes ON recipe_steps.belongs_to_recipe = recipes.id
    JOIN valid_ingredient_states ON recipe_step_completion_conditions.ingredient_state = valid_ingredient_states.id
WHERE recipe_step_completion_conditions.archived_at IS NULL
    AND recipe_step_completion_condition_ingredients.archived_at IS NULL
	AND recipe_step_completion_conditions.belongs_to_recipe_step = $2
	AND recipe_step_completion_conditions.id = $3
	AND recipe_steps.archived_at IS NULL
	AND recipe_steps.belongs_to_recipe = $1
	AND recipe_steps.id = $2
	AND recipes.archived_at IS NULL
	AND recipes.id = $1
`

type GetRecipeStepCompletionConditionParams struct {
	BelongsToRecipe     string
	BelongsToRecipeStep string
	ID                  string
}

type GetRecipeStepCompletionConditionRow struct {
	CreatedAt                              time.Time
	CreatedAt_2                            time.Time
	ArchivedAt_2                           sql.NullTime
	LastUpdatedAt_2                        sql.NullTime
	ArchivedAt                             sql.NullTime
	LastUpdatedAt                          sql.NullTime
	PastTense                              string
	ID_3                                   string
	IconPath                               string
	Slug                                   string
	ID                                     string
	AttributeType                          IngredientAttributeType
	Name                                   string
	Description                            string
	BelongsToRecipeStep                    string
	BelongsToRecipeStepCompletionCondition string
	Notes                                  string
	ID_2                                   string
	RecipeStepIngredient                   string
	Optional                               bool
}

func (q *Queries) GetRecipeStepCompletionCondition(ctx context.Context, db DBTX, arg *GetRecipeStepCompletionConditionParams) (*GetRecipeStepCompletionConditionRow, error) {
	row := db.QueryRowContext(ctx, getRecipeStepCompletionCondition, arg.BelongsToRecipe, arg.BelongsToRecipeStep, arg.ID)
	var i GetRecipeStepCompletionConditionRow
	err := row.Scan(
		&i.ID,
		&i.BelongsToRecipeStepCompletionCondition,
		&i.RecipeStepIngredient,
		&i.ID_2,
		&i.BelongsToRecipeStep,
		&i.ID_3,
		&i.Name,
		&i.Description,
		&i.IconPath,
		&i.Slug,
		&i.PastTense,
		&i.AttributeType,
		&i.CreatedAt,
		&i.LastUpdatedAt,
		&i.ArchivedAt,
		&i.Optional,
		&i.Notes,
		&i.CreatedAt_2,
		&i.LastUpdatedAt_2,
		&i.ArchivedAt_2,
	)
	return &i, err
}

const getRecipeStepCompletionConditions = `-- name: GetRecipeStepCompletionConditions :many

SELECT
	recipe_step_completion_condition_ingredients.id,
	recipe_step_completion_condition_ingredients.belongs_to_recipe_step_completion_condition,
	recipe_step_completion_condition_ingredients.recipe_step_ingredient,
	recipe_step_completion_conditions.id,
	recipe_step_completion_conditions.belongs_to_recipe_step,
	valid_ingredient_states.id,
	valid_ingredient_states.name,
	valid_ingredient_states.description,
	valid_ingredient_states.icon_path,
	valid_ingredient_states.slug,
	valid_ingredient_states.past_tense,
	valid_ingredient_states.attribute_type,
	valid_ingredient_states.created_at,
	valid_ingredient_states.last_updated_at,
	valid_ingredient_states.archived_at,
	recipe_step_completion_conditions.optional,
	recipe_step_completion_conditions.notes,
	recipe_step_completion_conditions.created_at,
	recipe_step_completion_conditions.last_updated_at,
	recipe_step_completion_conditions.archived_at,
	(
	    SELECT
	        COUNT(recipe_step_completion_conditions.id)
	    FROM
	        recipe_step_completion_conditions
	    WHERE
	        recipe_step_completion_conditions.archived_at IS NULL
	      AND recipe_step_completion_conditions.created_at > COALESCE($1, (SELECT NOW() - interval '999 years'))
	      AND recipe_step_completion_conditions.created_at < COALESCE($2, (SELECT NOW() + interval '999 years'))
	      AND (recipe_step_completion_conditions.last_updated_at IS NULL OR recipe_step_completion_conditions.last_updated_at > COALESCE($3, (SELECT NOW() - interval '999 years')))
	      AND (recipe_step_completion_conditions.last_updated_at IS NULL OR recipe_step_completion_conditions.last_updated_at < COALESCE($4, (SELECT NOW() + interval '999 years')))
	) as filtered_count,
	(
	    SELECT
	        COUNT(recipe_step_completion_conditions.id)
	    FROM
	        recipe_step_completion_conditions
	    WHERE
	        recipe_step_completion_conditions.archived_at IS NULL
	) as total_count
FROM recipe_step_completion_condition_ingredients
	JOIN recipe_step_completion_conditions ON recipe_step_completion_condition_ingredients.belongs_to_recipe_step_completion_condition = recipe_step_completion_conditions.id
	JOIN recipe_steps ON recipe_step_completion_conditions.belongs_to_recipe_step = recipe_steps.id
	JOIN recipes ON recipe_steps.belongs_to_recipe = recipes.id
	JOIN valid_ingredient_states ON recipe_step_completion_conditions.ingredient_state = valid_ingredient_states.id
WHERE
	recipe_step_completion_conditions.archived_at IS NULL
	AND recipe_step_completion_conditions.created_at > COALESCE($1, (SELECT NOW() - interval '999 years'))
	AND recipe_step_completion_conditions.created_at < COALESCE($2, (SELECT NOW() + interval '999 years'))
	AND (recipe_step_completion_conditions.last_updated_at IS NULL OR recipe_step_completion_conditions.last_updated_at > COALESCE($3, (SELECT NOW() - interval '999 years')))
	AND (recipe_step_completion_conditions.last_updated_at IS NULL OR recipe_step_completion_conditions.last_updated_at < COALESCE($4, (SELECT NOW() + interval '999 years')))
GROUP BY
	recipe_step_completion_conditions.id,
	valid_ingredient_states.id,
	recipe_step_completion_condition_ingredients.id
ORDER BY
	recipe_step_completion_conditions.id
	LIMIT $5
	OFFSET $6
`

type GetRecipeStepCompletionConditionsParams struct {
	CreatedAt       time.Time
	CreatedAt_2     time.Time
	LastUpdatedAt   sql.NullTime
	LastUpdatedAt_2 sql.NullTime
	Limit           int32
	Offset          int32
}

type GetRecipeStepCompletionConditionsRow struct {
	CreatedAt                              time.Time
	CreatedAt_2                            time.Time
	ArchivedAt_2                           sql.NullTime
	LastUpdatedAt_2                        sql.NullTime
	ArchivedAt                             sql.NullTime
	LastUpdatedAt                          sql.NullTime
	PastTense                              string
	ID_3                                   string
	IconPath                               string
	Slug                                   string
	ID                                     string
	AttributeType                          IngredientAttributeType
	Name                                   string
	Description                            string
	BelongsToRecipeStep                    string
	BelongsToRecipeStepCompletionCondition string
	Notes                                  string
	ID_2                                   string
	RecipeStepIngredient                   string
	FilteredCount                          int64
	TotalCount                             int64
	Optional                               bool
}

func (q *Queries) GetRecipeStepCompletionConditions(ctx context.Context, db DBTX, arg *GetRecipeStepCompletionConditionsParams) ([]*GetRecipeStepCompletionConditionsRow, error) {
	rows, err := db.QueryContext(ctx, getRecipeStepCompletionConditions,
		arg.CreatedAt,
		arg.CreatedAt_2,
		arg.LastUpdatedAt,
		arg.LastUpdatedAt_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetRecipeStepCompletionConditionsRow{}
	for rows.Next() {
		var i GetRecipeStepCompletionConditionsRow
		if err := rows.Scan(
			&i.ID,
			&i.BelongsToRecipeStepCompletionCondition,
			&i.RecipeStepIngredient,
			&i.ID_2,
			&i.BelongsToRecipeStep,
			&i.ID_3,
			&i.Name,
			&i.Description,
			&i.IconPath,
			&i.Slug,
			&i.PastTense,
			&i.AttributeType,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.Optional,
			&i.Notes,
			&i.CreatedAt_2,
			&i.LastUpdatedAt_2,
			&i.ArchivedAt_2,
			&i.FilteredCount,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRecipeStepCompletionCondition = `-- name: UpdateRecipeStepCompletionCondition :exec

UPDATE recipe_step_completion_conditions
SET
	optional = $1,
	notes = $2,
	belongs_to_recipe_step = $3,
	ingredient_state = $4,
	last_updated_at = NOW()
WHERE archived_at IS NULL
	AND id = $5
`

type UpdateRecipeStepCompletionConditionParams struct {
	Notes               string
	BelongsToRecipeStep string
	IngredientState     string
	ID                  string
	Optional            bool
}

func (q *Queries) UpdateRecipeStepCompletionCondition(ctx context.Context, db DBTX, arg *UpdateRecipeStepCompletionConditionParams) error {
	_, err := db.ExecContext(ctx, updateRecipeStepCompletionCondition,
		arg.Optional,
		arg.Notes,
		arg.BelongsToRecipeStep,
		arg.IngredientState,
		arg.ID,
	)
	return err
}
