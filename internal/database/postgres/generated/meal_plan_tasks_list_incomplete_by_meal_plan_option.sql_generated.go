// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: meal_plan_tasks_list_incomplete_by_meal_plan_option.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const ListIncompleteMealPlanTaskByMealPlanOption = `-- name: ListIncompleteMealPlanTaskByMealPlanOption :many
SELECT
	meal_plan_tasks.id,
	meal_plan_options.id,
	meal_plan_options.assigned_cook,
	meal_plan_options.assigned_dishwasher,
	meal_plan_options.chosen,
	meal_plan_options.tiebroken,
	meal_plan_options.meal_id,
	meal_plan_options.notes,
	meal_plan_options.created_at,
	meal_plan_options.last_updated_at,
	meal_plan_options.archived_at,
	meal_plan_options.belongs_to_meal_plan_event,
	recipe_steps.id,
	recipe_steps.index,
	valid_preparations.id,
	valid_preparations.name,
	valid_preparations.description,
	valid_preparations.icon_path,
	valid_preparations.yields_nothing,
	valid_preparations.restrict_to_ingredients,
	valid_preparations.zero_ingredients_allowable,
	valid_preparations.past_tense,
	valid_preparations.created_at,
	valid_preparations.last_updated_at,
	valid_preparations.archived_at,
	recipe_steps.minimum_estimated_time_in_seconds,
	recipe_steps.maximum_estimated_time_in_seconds,
	recipe_steps.minimum_temperature_in_celsius,
	recipe_steps.maximum_temperature_in_celsius,
	recipe_steps.notes,
	recipe_steps.explicit_instructions,
	recipe_steps.optional,
	recipe_steps.created_at,
	recipe_steps.last_updated_at,
	recipe_steps.archived_at,
	recipe_steps.belongs_to_recipe,
    meal_plan_tasks.assigned_to_user,
	meal_plan_tasks.status,
	meal_plan_tasks.status_explanation,
	meal_plan_tasks.creation_explanation,
	meal_plan_tasks.created_at,
	meal_plan_tasks.completed_at
FROM meal_plan_tasks
	 FULL OUTER JOIN meal_plan_options ON meal_plan_tasks.belongs_to_meal_plan_option=meal_plan_options.id
	 FULL OUTER JOIN meal_plans ON meal_plan_options.belongs_to_meal_plan=meal_plans.id
	 FULL OUTER JOIN meals ON meal_plan_options.meal_id=meals.id
	 JOIN recipe_steps ON meal_plan_tasks.satisfies_recipe_step=recipe_steps.id
	 JOIN valid_preparations ON recipe_steps.preparation_id=valid_preparations.id
WHERE meal_plan_tasks.belongs_to_meal_plan_option = $1
AND meal_plan_tasks.completed_at IS NULL
`

type ListIncompleteMealPlanTaskByMealPlanOptionRow struct {
	ID                            string
	ID_2                          string
	AssignedCook                  sql.NullString
	AssignedDishwasher            sql.NullString
	Chosen                        bool
	Tiebroken                     bool
	MealID                        string
	Notes                         string
	CreatedAt                     time.Time
	LastUpdatedAt                 sql.NullTime
	ArchivedAt                    sql.NullTime
	BelongsToMealPlanEvent        sql.NullString
	ID_3                          string
	Index                         int32
	ID_4                          string
	Name                          string
	Description                   string
	IconPath                      string
	YieldsNothing                 bool
	RestrictToIngredients         bool
	ZeroIngredientsAllowable      bool
	PastTense                     string
	CreatedAt_2                   time.Time
	LastUpdatedAt_2               sql.NullTime
	ArchivedAt_2                  sql.NullTime
	MinimumEstimatedTimeInSeconds sql.NullInt64
	MaximumEstimatedTimeInSeconds sql.NullInt64
	MinimumTemperatureInCelsius   sql.NullString
	MaximumTemperatureInCelsius   sql.NullString
	Notes_2                       string
	ExplicitInstructions          string
	Optional                      bool
	CreatedAt_3                   time.Time
	LastUpdatedAt_3               sql.NullTime
	ArchivedAt_3                  sql.NullTime
	BelongsToRecipe               string
	AssignedToUser                sql.NullString
	Status                        PrepStepStatus
	StatusExplanation             string
	CreationExplanation           string
	CreatedAt_4                   time.Time
	CompletedAt                   sql.NullTime
}

func (q *Queries) ListIncompleteMealPlanTaskByMealPlanOption(ctx context.Context, belongsToMealPlanOption string) ([]*ListIncompleteMealPlanTaskByMealPlanOptionRow, error) {
	rows, err := q.db.QueryContext(ctx, ListIncompleteMealPlanTaskByMealPlanOption, belongsToMealPlanOption)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListIncompleteMealPlanTaskByMealPlanOptionRow{}
	for rows.Next() {
		var i ListIncompleteMealPlanTaskByMealPlanOptionRow
		if err := rows.Scan(
			&i.ID,
			&i.ID_2,
			&i.AssignedCook,
			&i.AssignedDishwasher,
			&i.Chosen,
			&i.Tiebroken,
			&i.MealID,
			&i.Notes,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.BelongsToMealPlanEvent,
			&i.ID_3,
			&i.Index,
			&i.ID_4,
			&i.Name,
			&i.Description,
			&i.IconPath,
			&i.YieldsNothing,
			&i.RestrictToIngredients,
			&i.ZeroIngredientsAllowable,
			&i.PastTense,
			&i.CreatedAt_2,
			&i.LastUpdatedAt_2,
			&i.ArchivedAt_2,
			&i.MinimumEstimatedTimeInSeconds,
			&i.MaximumEstimatedTimeInSeconds,
			&i.MinimumTemperatureInCelsius,
			&i.MaximumTemperatureInCelsius,
			&i.Notes_2,
			&i.ExplicitInstructions,
			&i.Optional,
			&i.CreatedAt_3,
			&i.LastUpdatedAt_3,
			&i.ArchivedAt_3,
			&i.BelongsToRecipe,
			&i.AssignedToUser,
			&i.Status,
			&i.StatusExplanation,
			&i.CreationExplanation,
			&i.CreatedAt_4,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
