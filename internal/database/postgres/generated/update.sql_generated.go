// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: update.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const updateHousehold = `-- name: UpdateHousehold :exec

UPDATE households
SET
	name = $1,
	contact_phone = $2,
	address_line_1 = $3,
	address_line_2 = $4,
	city = $5,
	state = $6,
	zip_code = $7,
	country = $8,
	latitude = $9,
    longitude = $10,
	last_updated_at = NOW()
WHERE archived_at IS NULL
	AND belongs_to_user = $11
	AND id = $12
`

type UpdateHouseholdParams struct {
	Name          string
	ContactPhone  string
	AddressLine1  string
	AddressLine2  string
	City          string
	State         string
	ZipCode       string
	Country       string
	BelongsToUser string
	ID            string
	Latitude      sql.NullString
	Longitude     sql.NullString
}

func (q *Queries) UpdateHousehold(ctx context.Context, db DBTX, arg *UpdateHouseholdParams) error {
	_, err := db.ExecContext(ctx, updateHousehold,
		arg.Name,
		arg.ContactPhone,
		arg.AddressLine1,
		arg.AddressLine2,
		arg.City,
		arg.State,
		arg.ZipCode,
		arg.Country,
		arg.Latitude,
		arg.Longitude,
		arg.BelongsToUser,
		arg.ID,
	)
	return err
}

const updateHouseholdInstrumentOwnership = `-- name: UpdateHouseholdInstrumentOwnership :exec

UPDATE household_instrument_ownerships
SET
	notes = $1,
	quantity = $2,
	valid_instrument_id = $3,
	last_updated_at = NOW()
WHERE archived_at IS NULL
	AND id = $4
	AND household_instrument_ownerships.belongs_to_household = $5
`

type UpdateHouseholdInstrumentOwnershipParams struct {
	Notes              string
	ValidInstrumentID  string
	ID                 string
	BelongsToHousehold string
	Quantity           int32
}

func (q *Queries) UpdateHouseholdInstrumentOwnership(ctx context.Context, db DBTX, arg *UpdateHouseholdInstrumentOwnershipParams) error {
	_, err := db.ExecContext(ctx, updateHouseholdInstrumentOwnership,
		arg.Notes,
		arg.Quantity,
		arg.ValidInstrumentID,
		arg.ID,
		arg.BelongsToHousehold,
	)
	return err
}

const updateMealPlan = `-- name: UpdateMealPlan :exec

UPDATE meal_plans SET notes = $1, status = $2, voting_deadline = $3, last_updated_at = NOW() WHERE archived_at IS NULL AND belongs_to_household = $4 AND id = $5
`

type UpdateMealPlanParams struct {
	Notes              string
	Status             MealPlanStatus
	VotingDeadline     time.Time
	BelongsToHousehold string
	ID                 string
}

func (q *Queries) UpdateMealPlan(ctx context.Context, db DBTX, arg *UpdateMealPlanParams) error {
	_, err := db.ExecContext(ctx, updateMealPlan,
		arg.Notes,
		arg.Status,
		arg.VotingDeadline,
		arg.BelongsToHousehold,
		arg.ID,
	)
	return err
}

const updateMealPlanEvent = `-- name: UpdateMealPlanEvent :exec

UPDATE meal_plan_events
SET notes = $1,
	starts_at = $2,
	ends_at = $3,
	meal_name = $4,
	belongs_to_meal_plan = $5,
	last_updated_at = NOW()
WHERE archived_at IS NULL
	AND id = $6
`

type UpdateMealPlanEventParams struct {
	Notes             string
	StartsAt          time.Time
	EndsAt            time.Time
	MealName          MealName
	BelongsToMealPlan string
	ID                string
}

func (q *Queries) UpdateMealPlanEvent(ctx context.Context, db DBTX, arg *UpdateMealPlanEventParams) error {
	_, err := db.ExecContext(ctx, updateMealPlanEvent,
		arg.Notes,
		arg.StartsAt,
		arg.EndsAt,
		arg.MealName,
		arg.BelongsToMealPlan,
		arg.ID,
	)
	return err
}

const updateMealPlanGroceryListItem = `-- name: UpdateMealPlanGroceryListItem :exec

UPDATE meal_plan_grocery_list_items
SET
	belongs_to_meal_plan = $1,
	valid_ingredient = $2,
	valid_measurement_unit = $3,
	minimum_quantity_needed = $4,
	maximum_quantity_needed = $5,
	quantity_purchased = $6,
	purchased_measurement_unit = $7,
	purchased_upc = $8,
	purchase_price = $9,
	status_explanation = $10,
	status = $11,
	last_updated_at = NOW()
WHERE archived_at IS NULL
	AND id = $12
`

type UpdateMealPlanGroceryListItemParams struct {
	BelongsToMealPlan        string
	ValidIngredient          string
	ValidMeasurementUnit     string
	MinimumQuantityNeeded    string
	StatusExplanation        string
	Status                   GroceryListItemStatus
	ID                       string
	MaximumQuantityNeeded    sql.NullString
	QuantityPurchased        sql.NullString
	PurchasedMeasurementUnit sql.NullString
	PurchasedUpc             sql.NullString
	PurchasePrice            sql.NullString
}

func (q *Queries) UpdateMealPlanGroceryListItem(ctx context.Context, db DBTX, arg *UpdateMealPlanGroceryListItemParams) error {
	_, err := db.ExecContext(ctx, updateMealPlanGroceryListItem,
		arg.BelongsToMealPlan,
		arg.ValidIngredient,
		arg.ValidMeasurementUnit,
		arg.MinimumQuantityNeeded,
		arg.MaximumQuantityNeeded,
		arg.QuantityPurchased,
		arg.PurchasedMeasurementUnit,
		arg.PurchasedUpc,
		arg.PurchasePrice,
		arg.StatusExplanation,
		arg.Status,
		arg.ID,
	)
	return err
}

const updateMealPlanOption = `-- name: UpdateMealPlanOption :exec

UPDATE meal_plan_options
SET
	assigned_cook = $1,
	assigned_dishwasher = $2,
	meal_id = $3,
	notes = $4,
	meal_scale = $5,
	last_updated_at = NOW()
WHERE archived_at IS NULL
	AND belongs_to_meal_plan_event = $6
	AND id = $7
`

type UpdateMealPlanOptionParams struct {
	MealID                 string
	Notes                  string
	MealScale              string
	ID                     string
	AssignedCook           sql.NullString
	AssignedDishwasher     sql.NullString
	BelongsToMealPlanEvent sql.NullString
}

func (q *Queries) UpdateMealPlanOption(ctx context.Context, db DBTX, arg *UpdateMealPlanOptionParams) error {
	_, err := db.ExecContext(ctx, updateMealPlanOption,
		arg.AssignedCook,
		arg.AssignedDishwasher,
		arg.MealID,
		arg.Notes,
		arg.MealScale,
		arg.BelongsToMealPlanEvent,
		arg.ID,
	)
	return err
}

const updateMealPlanOptionVote = `-- name: UpdateMealPlanOptionVote :exec

UPDATE meal_plan_option_votes SET rank = $1, abstain = $2, notes = $3, by_user = $4, last_updated_at = NOW() WHERE archived_at IS NULL AND belongs_to_meal_plan_option = $5 AND id = $6
`

type UpdateMealPlanOptionVoteParams struct {
	Notes                   string
	ByUser                  string
	BelongsToMealPlanOption string
	ID                      string
	Rank                    int32
	Abstain                 bool
}

func (q *Queries) UpdateMealPlanOptionVote(ctx context.Context, db DBTX, arg *UpdateMealPlanOptionVoteParams) error {
	_, err := db.ExecContext(ctx, updateMealPlanOptionVote,
		arg.Rank,
		arg.Abstain,
		arg.Notes,
		arg.ByUser,
		arg.BelongsToMealPlanOption,
		arg.ID,
	)
	return err
}

const updateRecipe = `-- name: UpdateRecipe :exec

UPDATE recipes SET
    name = $1,
    slug = $2,
    source = $3,
    description = $4,
    inspired_by_recipe_id = $5,
	min_estimated_portions = $6,
	max_estimated_portions = $7,
    portion_name = $8,
    plural_portion_name = $9,
    seal_of_approval = $10,
    eligible_for_meals = $11,
	yields_component_type = $12,
    last_updated_at = NOW()
WHERE archived_at IS NULL
  AND created_by_user = $13
  AND id = $14
`

type UpdateRecipeParams struct {
	YieldsComponentType  ComponentType
	Slug                 string
	Source               string
	Description          string
	ID                   string
	MinEstimatedPortions string
	Name                 string
	PortionName          string
	PluralPortionName    string
	CreatedByUser        string
	MaxEstimatedPortions sql.NullString
	InspiredByRecipeID   sql.NullString
	EligibleForMeals     bool
	SealOfApproval       bool
}

func (q *Queries) UpdateRecipe(ctx context.Context, db DBTX, arg *UpdateRecipeParams) error {
	_, err := db.ExecContext(ctx, updateRecipe,
		arg.Name,
		arg.Slug,
		arg.Source,
		arg.Description,
		arg.InspiredByRecipeID,
		arg.MinEstimatedPortions,
		arg.MaxEstimatedPortions,
		arg.PortionName,
		arg.PluralPortionName,
		arg.SealOfApproval,
		arg.EligibleForMeals,
		arg.YieldsComponentType,
		arg.CreatedByUser,
		arg.ID,
	)
	return err
}

const updateRecipeMedia = `-- name: UpdateRecipeMedia :exec

UPDATE recipe_media
SET
	belongs_to_recipe = $1,
	belongs_to_recipe_step = $2,
	mime_type = $3,
	internal_path = $4,
	external_path = $5,
	"index" = $6,
	last_updated_at = NOW()
WHERE archived_at IS NULL
	AND id = $6
`

type UpdateRecipeMediaParams struct {
	MimeType            string
	InternalPath        string
	ExternalPath        string
	BelongsToRecipe     sql.NullString
	BelongsToRecipeStep sql.NullString
	Index               int32
}

func (q *Queries) UpdateRecipeMedia(ctx context.Context, db DBTX, arg *UpdateRecipeMediaParams) error {
	_, err := db.ExecContext(ctx, updateRecipeMedia,
		arg.BelongsToRecipe,
		arg.BelongsToRecipeStep,
		arg.MimeType,
		arg.InternalPath,
		arg.ExternalPath,
		arg.Index,
	)
	return err
}

const updateRecipePrepTask = `-- name: UpdateRecipePrepTask :exec

UPDATE recipe_prep_tasks SET
	 name = $1,
	 description = $2,
	 notes = $3,
	 optional = $4,
	 explicit_storage_instructions = $5,
	 minimum_time_buffer_before_recipe_in_seconds = $6,
	 maximum_time_buffer_before_recipe_in_seconds = $7,
	 storage_type = $8,
	 minimum_storage_temperature_in_celsius = $9,
	 maximum_storage_temperature_in_celsius = $10,
	 belongs_to_recipe = $11,
	 last_updated_at = NOW()
WHERE archived_at IS NULL AND id = $12
`

type UpdateRecipePrepTaskParams struct {
	Name                                   string
	Description                            string
	Notes                                  string
	ExplicitStorageInstructions            string
	BelongsToRecipe                        string
	ID                                     string
	StorageType                            NullStorageContainerType
	MinimumStorageTemperatureInCelsius     sql.NullString
	MaximumStorageTemperatureInCelsius     sql.NullString
	MaximumTimeBufferBeforeRecipeInSeconds sql.NullInt32
	MinimumTimeBufferBeforeRecipeInSeconds int32
	Optional                               bool
}

func (q *Queries) UpdateRecipePrepTask(ctx context.Context, db DBTX, arg *UpdateRecipePrepTaskParams) error {
	_, err := db.ExecContext(ctx, updateRecipePrepTask,
		arg.Name,
		arg.Description,
		arg.Notes,
		arg.Optional,
		arg.ExplicitStorageInstructions,
		arg.MinimumTimeBufferBeforeRecipeInSeconds,
		arg.MaximumTimeBufferBeforeRecipeInSeconds,
		arg.StorageType,
		arg.MinimumStorageTemperatureInCelsius,
		arg.MaximumStorageTemperatureInCelsius,
		arg.BelongsToRecipe,
		arg.ID,
	)
	return err
}

const updateRecipeRating = `-- name: UpdateRecipeRating :exec

UPDATE recipe_ratings
SET
	recipe_id = $1,
    taste = $2,
    difficulty = $3,
    cleanup = $4,
    instructions = $5,
    overall = $6,
    notes = $7,
	last_updated_at = NOW()
WHERE archived_at IS NULL
	AND id = $8
`

type UpdateRecipeRatingParams struct {
	RecipeID     string
	Notes        string
	ID           string
	Taste        sql.NullString
	Difficulty   sql.NullString
	Cleanup      sql.NullString
	Instructions sql.NullString
	Overall      sql.NullString
}

func (q *Queries) UpdateRecipeRating(ctx context.Context, db DBTX, arg *UpdateRecipeRatingParams) error {
	_, err := db.ExecContext(ctx, updateRecipeRating,
		arg.RecipeID,
		arg.Taste,
		arg.Difficulty,
		arg.Cleanup,
		arg.Instructions,
		arg.Overall,
		arg.Notes,
		arg.ID,
	)
	return err
}

const updateRecipeStep = `-- name: UpdateRecipeStep :exec

UPDATE recipe_steps SET
	index = $1,
	preparation_id = $2,
	minimum_estimated_time_in_seconds = $3,
	maximum_estimated_time_in_seconds = $4,
	minimum_temperature_in_celsius = $5,
	maximum_temperature_in_celsius = $6,
	notes = $7,
	explicit_instructions = $8,
	condition_expression = $9,
	optional = $10,
	start_timer_automatically = $11,
	last_updated_at = NOW()
WHERE archived_at IS NULL
	AND belongs_to_recipe = $12
	AND id = $13
`

type UpdateRecipeStepParams struct {
	ConditionExpression           string
	PreparationID                 string
	ID                            string
	BelongsToRecipe               string
	Notes                         string
	ExplicitInstructions          string
	MinimumTemperatureInCelsius   sql.NullString
	MaximumTemperatureInCelsius   sql.NullString
	MaximumEstimatedTimeInSeconds sql.NullInt64
	MinimumEstimatedTimeInSeconds sql.NullInt64
	Index                         int32
	Optional                      bool
	StartTimerAutomatically       bool
}

func (q *Queries) UpdateRecipeStep(ctx context.Context, db DBTX, arg *UpdateRecipeStepParams) error {
	_, err := db.ExecContext(ctx, updateRecipeStep,
		arg.Index,
		arg.PreparationID,
		arg.MinimumEstimatedTimeInSeconds,
		arg.MaximumEstimatedTimeInSeconds,
		arg.MinimumTemperatureInCelsius,
		arg.MaximumTemperatureInCelsius,
		arg.Notes,
		arg.ExplicitInstructions,
		arg.ConditionExpression,
		arg.Optional,
		arg.StartTimerAutomatically,
		arg.BelongsToRecipe,
		arg.ID,
	)
	return err
}

const updateRecipeStepCompletionCondition = `-- name: UpdateRecipeStepCompletionCondition :exec

UPDATE recipe_step_completion_conditions
SET
	optional = $1,
	notes = $2,
	belongs_to_recipe_step = $3,
	ingredient_state = $4,
	last_updated_at = NOW()
WHERE archived_at IS NULL
	AND id = $5
`

type UpdateRecipeStepCompletionConditionParams struct {
	Notes               string
	BelongsToRecipeStep string
	IngredientState     string
	ID                  string
	Optional            bool
}

func (q *Queries) UpdateRecipeStepCompletionCondition(ctx context.Context, db DBTX, arg *UpdateRecipeStepCompletionConditionParams) error {
	_, err := db.ExecContext(ctx, updateRecipeStepCompletionCondition,
		arg.Optional,
		arg.Notes,
		arg.BelongsToRecipeStep,
		arg.IngredientState,
		arg.ID,
	)
	return err
}

const updateRecipeStepIngredient = `-- name: UpdateRecipeStepIngredient :exec

UPDATE recipe_step_ingredients SET
	ingredient_id = $1,
	name = $2,
	optional = $3,
	measurement_unit = $4,
	minimum_quantity_value = $5,
	maximum_quantity_value = $6,
	quantity_notes = $7,
	recipe_step_product_id = $8,
	ingredient_notes = $9,
	option_index = $10,
	to_taste = $11,
	product_percentage_to_use = $12,
    vessel_index = $13,
    recipe_step_product_recipe_id = $14,
	last_updated_at = NOW()
WHERE archived_at IS NULL AND belongs_to_recipe_step = $15
	AND id = $16
`

type UpdateRecipeStepIngredientParams struct {
	IngredientNotes           string
	Name                      string
	ID                        string
	BelongsToRecipeStep       string
	MinimumQuantityValue      string
	QuantityNotes             string
	IngredientID              sql.NullString
	MaximumQuantityValue      sql.NullString
	RecipeStepProductID       sql.NullString
	ProductPercentageToUse    sql.NullString
	RecipeStepProductRecipeID sql.NullString
	MeasurementUnit           sql.NullString
	VesselIndex               sql.NullInt32
	OptionIndex               int32
	ToTaste                   bool
	Optional                  bool
}

func (q *Queries) UpdateRecipeStepIngredient(ctx context.Context, db DBTX, arg *UpdateRecipeStepIngredientParams) error {
	_, err := db.ExecContext(ctx, updateRecipeStepIngredient,
		arg.IngredientID,
		arg.Name,
		arg.Optional,
		arg.MeasurementUnit,
		arg.MinimumQuantityValue,
		arg.MaximumQuantityValue,
		arg.QuantityNotes,
		arg.RecipeStepProductID,
		arg.IngredientNotes,
		arg.OptionIndex,
		arg.ToTaste,
		arg.ProductPercentageToUse,
		arg.VesselIndex,
		arg.RecipeStepProductRecipeID,
		arg.BelongsToRecipeStep,
		arg.ID,
	)
	return err
}

const updateRecipeStepInstrument = `-- name: UpdateRecipeStepInstrument :exec

UPDATE recipe_step_instruments SET
	instrument_id = $1,
	recipe_step_product_id = $2,
	name = $3,
	notes = $4,
	preference_rank = $5,
	optional = $6,
	option_index = $7,
	minimum_quantity = $8,
	maximum_quantity = $9,
	last_updated_at = NOW()
WHERE archived_at IS NULL
	AND belongs_to_recipe_step = $10
	AND id = $11
`

type UpdateRecipeStepInstrumentParams struct {
	Name                string
	Notes               string
	BelongsToRecipeStep string
	ID                  string
	InstrumentID        sql.NullString
	RecipeStepProductID sql.NullString
	MaximumQuantity     sql.NullInt32
	PreferenceRank      int32
	OptionIndex         int32
	MinimumQuantity     int32
	Optional            bool
}

func (q *Queries) UpdateRecipeStepInstrument(ctx context.Context, db DBTX, arg *UpdateRecipeStepInstrumentParams) error {
	_, err := db.ExecContext(ctx, updateRecipeStepInstrument,
		arg.InstrumentID,
		arg.RecipeStepProductID,
		arg.Name,
		arg.Notes,
		arg.PreferenceRank,
		arg.Optional,
		arg.OptionIndex,
		arg.MinimumQuantity,
		arg.MaximumQuantity,
		arg.BelongsToRecipeStep,
		arg.ID,
	)
	return err
}

const updateRecipeStepProduct = `-- name: UpdateRecipeStepProduct :exec

UPDATE recipe_step_products
SET
	"name" = $1,
	"type" = $2,
	measurement_unit = $3,
	minimum_quantity_value = $4,
	maximum_quantity_value = $5,
	quantity_notes = $6,
	compostable = $7,
	maximum_storage_duration_in_seconds = $8,
	minimum_storage_temperature_in_celsius = $9,
	maximum_storage_temperature_in_celsius = $10,
	storage_instructions = $11,
	is_liquid = $12,
	is_waste = $13,
    "index" = $14,
    contained_in_vessel_index = $15,
	last_updated_at = NOW()
WHERE archived_at IS NULL
	AND belongs_to_recipe_step = $16
	AND id = $17
`

type UpdateRecipeStepProductParams struct {
	Name                               string
	Type                               RecipeStepProductType
	ID                                 string
	BelongsToRecipeStep                string
	StorageInstructions                string
	QuantityNotes                      string
	MinimumStorageTemperatureInCelsius sql.NullString
	MaximumStorageTemperatureInCelsius sql.NullString
	MaximumQuantityValue               sql.NullString
	MinimumQuantityValue               sql.NullString
	MeasurementUnit                    sql.NullString
	MaximumStorageDurationInSeconds    sql.NullInt32
	ContainedInVesselIndex             sql.NullInt32
	Index                              int32
	Compostable                        bool
	IsLiquid                           bool
	IsWaste                            bool
}

func (q *Queries) UpdateRecipeStepProduct(ctx context.Context, db DBTX, arg *UpdateRecipeStepProductParams) error {
	_, err := db.ExecContext(ctx, updateRecipeStepProduct,
		arg.Name,
		arg.Type,
		arg.MeasurementUnit,
		arg.MinimumQuantityValue,
		arg.MaximumQuantityValue,
		arg.QuantityNotes,
		arg.Compostable,
		arg.MaximumStorageDurationInSeconds,
		arg.MinimumStorageTemperatureInCelsius,
		arg.MaximumStorageTemperatureInCelsius,
		arg.StorageInstructions,
		arg.IsLiquid,
		arg.IsWaste,
		arg.Index,
		arg.ContainedInVesselIndex,
		arg.BelongsToRecipeStep,
		arg.ID,
	)
	return err
}

const updateRecipeStepVessel = `-- name: UpdateRecipeStepVessel :exec

UPDATE recipe_step_vessels SET
	name = $1,
	notes = $2,
	belongs_to_recipe_step = $3,
	recipe_step_product_id = $4,
	valid_vessel_id = $5,
	vessel_predicate = $6,
	minimum_quantity = $7,
    maximum_quantity = $8,
    unavailable_after_step = $9,
	last_updated_at = NOW()
WHERE archived_at IS NULL
	AND belongs_to_recipe_step = $10
	AND id = $11
`

type UpdateRecipeStepVesselParams struct {
	Name                  string
	Notes                 string
	BelongsToRecipeStep   string
	VesselPredicate       string
	BelongsToRecipeStep_2 string
	ID                    string
	RecipeStepProductID   sql.NullString
	ValidVesselID         sql.NullString
	MaximumQuantity       sql.NullInt32
	MinimumQuantity       int32
	UnavailableAfterStep  bool
}

func (q *Queries) UpdateRecipeStepVessel(ctx context.Context, db DBTX, arg *UpdateRecipeStepVesselParams) error {
	_, err := db.ExecContext(ctx, updateRecipeStepVessel,
		arg.Name,
		arg.Notes,
		arg.BelongsToRecipeStep,
		arg.RecipeStepProductID,
		arg.ValidVesselID,
		arg.VesselPredicate,
		arg.MinimumQuantity,
		arg.MaximumQuantity,
		arg.UnavailableAfterStep,
		arg.BelongsToRecipeStep_2,
		arg.ID,
	)
	return err
}

const updateServiceSettingConfiguration = `-- name: UpdateServiceSettingConfiguration :exec

UPDATE service_setting_configurations
SET
    value = $1,
    notes = $2,
    service_setting_id = $3,
    belongs_to_user = $4,
    belongs_to_household = $5,
	last_updated_at = NOW()
WHERE archived_at IS NULL
	AND id = $6
`

type UpdateServiceSettingConfigurationParams struct {
	Value              string
	Notes              string
	ServiceSettingID   string
	BelongsToUser      string
	BelongsToHousehold string
	ID                 string
}

func (q *Queries) UpdateServiceSettingConfiguration(ctx context.Context, db DBTX, arg *UpdateServiceSettingConfigurationParams) error {
	_, err := db.ExecContext(ctx, updateServiceSettingConfiguration,
		arg.Value,
		arg.Notes,
		arg.ServiceSettingID,
		arg.BelongsToUser,
		arg.BelongsToHousehold,
		arg.ID,
	)
	return err
}

const updateUser = `-- name: UpdateUser :exec

UPDATE users SET
	username = $1,
	first_name = $2,
	last_name = $3,
	hashed_password = $4,
	avatar_src = $5,
	birthday = $6,
	last_updated_at = NOW()
WHERE archived_at IS NULL
	AND id = $7
`

type UpdateUserParams struct {
	Birthday       sql.NullTime
	Username       string
	FirstName      string
	LastName       string
	HashedPassword string
	ID             string
	AvatarSrc      sql.NullString
}

func (q *Queries) UpdateUser(ctx context.Context, db DBTX, arg *UpdateUserParams) error {
	_, err := db.ExecContext(ctx, updateUser,
		arg.Username,
		arg.FirstName,
		arg.LastName,
		arg.HashedPassword,
		arg.AvatarSrc,
		arg.Birthday,
		arg.ID,
	)
	return err
}

const updateUserIngredientPreference = `-- name: UpdateUserIngredientPreference :exec

UPDATE user_ingredient_preferences
SET
	ingredient = $1,
	rating = $2,
	notes = $3,
	allergy = $4,
	last_updated_at = NOW()
WHERE archived_at IS NULL
	AND id = $5
	AND belongs_to_user = $6
`

type UpdateUserIngredientPreferenceParams struct {
	Ingredient    string
	Notes         string
	ID            string
	BelongsToUser string
	Rating        int16
	Allergy       bool
}

func (q *Queries) UpdateUserIngredientPreference(ctx context.Context, db DBTX, arg *UpdateUserIngredientPreferenceParams) error {
	_, err := db.ExecContext(ctx, updateUserIngredientPreference,
		arg.Ingredient,
		arg.Rating,
		arg.Notes,
		arg.Allergy,
		arg.ID,
		arg.BelongsToUser,
	)
	return err
}

const updateValidIngredient = `-- name: UpdateValidIngredient :exec

UPDATE valid_ingredients SET
	name = $1,
	description = $2,
	warning = $3,
	contains_egg = $4,
	contains_dairy = $5,
	contains_peanut = $6,
	contains_tree_nut = $7,
	contains_soy = $8,
	contains_wheat = $9,
	contains_shellfish = $10,
	contains_sesame = $11,
	contains_fish = $12,
	contains_gluten = $13,
	animal_flesh = $14,
	volumetric = $15::bool,
	is_liquid = $16,
	icon_path = $17,
	animal_derived = $18,
	plural_name = $19,
	restrict_to_preparations = $20,
	minimum_ideal_storage_temperature_in_celsius = $21::float,
	maximum_ideal_storage_temperature_in_celsius = $22::float,
	storage_instructions = $23,
	slug = $24,
	contains_alcohol = $25,
	shopping_suggestions = $26,
    is_starch = $27,
    is_protein = $28,
    is_grain = $29,
    is_fruit = $30,
    is_salt = $31,
    is_fat = $32,
    is_acid = $33,
    is_heat = $34,
	last_updated_at = NOW()
WHERE archived_at IS NULL AND id = $35
`

type UpdateValidIngredientParams struct {
	Description                             string
	Warning                                 string
	ID                                      string
	ShoppingSuggestions                     string
	Slug                                    string
	StorageInstructions                     string
	Name                                    string
	PluralName                              string
	IconPath                                string
	MaximumIdealStorageTemperatureInCelsius sql.NullFloat64
	MinimumIdealStorageTemperatureInCelsius sql.NullFloat64
	IsLiquid                                sql.NullBool
	ContainsWheat                           bool
	ContainsPeanut                          bool
	Volumetric                              bool
	ContainsGluten                          bool
	ContainsFish                            bool
	AnimalDerived                           bool
	ContainsSesame                          bool
	RestrictToPreparations                  bool
	ContainsShellfish                       bool
	ContainsSoy                             bool
	ContainsTreeNut                         bool
	AnimalFlesh                             bool
	ContainsAlcohol                         bool
	ContainsDairy                           bool
	IsStarch                                bool
	IsProtein                               bool
	IsGrain                                 bool
	IsFruit                                 bool
	IsSalt                                  bool
	IsFat                                   bool
	IsAcid                                  bool
	IsHeat                                  bool
	ContainsEgg                             bool
}

func (q *Queries) UpdateValidIngredient(ctx context.Context, db DBTX, arg *UpdateValidIngredientParams) error {
	_, err := db.ExecContext(ctx, updateValidIngredient,
		arg.Name,
		arg.Description,
		arg.Warning,
		arg.ContainsEgg,
		arg.ContainsDairy,
		arg.ContainsPeanut,
		arg.ContainsTreeNut,
		arg.ContainsSoy,
		arg.ContainsWheat,
		arg.ContainsShellfish,
		arg.ContainsSesame,
		arg.ContainsFish,
		arg.ContainsGluten,
		arg.AnimalFlesh,
		arg.Volumetric,
		arg.IsLiquid,
		arg.IconPath,
		arg.AnimalDerived,
		arg.PluralName,
		arg.RestrictToPreparations,
		arg.MinimumIdealStorageTemperatureInCelsius,
		arg.MaximumIdealStorageTemperatureInCelsius,
		arg.StorageInstructions,
		arg.Slug,
		arg.ContainsAlcohol,
		arg.ShoppingSuggestions,
		arg.IsStarch,
		arg.IsProtein,
		arg.IsGrain,
		arg.IsFruit,
		arg.IsSalt,
		arg.IsFat,
		arg.IsAcid,
		arg.IsHeat,
		arg.ID,
	)
	return err
}

const updateValidIngredientGroup = `-- name: UpdateValidIngredientGroup :exec

UPDATE valid_ingredient_groups SET
	name = $1,
	description = $2,
	slug = $3,
	last_updated_at = NOW()
WHERE archived_at IS NULL AND id = $4
`

type UpdateValidIngredientGroupParams struct {
	Name        string
	Description string
	Slug        string
	ID          string
}

func (q *Queries) UpdateValidIngredientGroup(ctx context.Context, db DBTX, arg *UpdateValidIngredientGroupParams) error {
	_, err := db.ExecContext(ctx, updateValidIngredientGroup,
		arg.Name,
		arg.Description,
		arg.Slug,
		arg.ID,
	)
	return err
}

const updateValidIngredientMeasurementUnit = `-- name: UpdateValidIngredientMeasurementUnit :exec

UPDATE valid_ingredient_measurement_units
SET
	notes = $1,
	valid_measurement_unit_id = $2,
	valid_ingredient_id = $3,
	minimum_allowable_quantity = $4,
	maximum_allowable_quantity = $5,
	last_updated_at = NOW()
WHERE archived_at IS NULL
	AND id = $6
`

type UpdateValidIngredientMeasurementUnitParams struct {
	Notes                    string
	ValidMeasurementUnitID   string
	ValidIngredientID        string
	MinimumAllowableQuantity string
	ID                       string
	MaximumAllowableQuantity sql.NullString
}

func (q *Queries) UpdateValidIngredientMeasurementUnit(ctx context.Context, db DBTX, arg *UpdateValidIngredientMeasurementUnitParams) error {
	_, err := db.ExecContext(ctx, updateValidIngredientMeasurementUnit,
		arg.Notes,
		arg.ValidMeasurementUnitID,
		arg.ValidIngredientID,
		arg.MinimumAllowableQuantity,
		arg.MaximumAllowableQuantity,
		arg.ID,
	)
	return err
}

const updateValidIngredientPreparation = `-- name: UpdateValidIngredientPreparation :exec

UPDATE valid_ingredient_preparations SET notes = $1, valid_preparation_id = $2, valid_ingredient_id = $3, last_updated_at = NOW() WHERE archived_at IS NULL AND id = $4
`

type UpdateValidIngredientPreparationParams struct {
	Notes              string
	ValidPreparationID string
	ValidIngredientID  string
	ID                 string
}

func (q *Queries) UpdateValidIngredientPreparation(ctx context.Context, db DBTX, arg *UpdateValidIngredientPreparationParams) error {
	_, err := db.ExecContext(ctx, updateValidIngredientPreparation,
		arg.Notes,
		arg.ValidPreparationID,
		arg.ValidIngredientID,
		arg.ID,
	)
	return err
}

const updateValidIngredientState = `-- name: UpdateValidIngredientState :exec

UPDATE valid_ingredient_states
SET
	name = $1,
	description = $2,
	icon_path = $3,
	slug = $4,
	past_tense = $5,
	attribute_type = $6,
	last_updated_at = NOW()
WHERE archived_at IS NULL
	AND id = $7
`

type UpdateValidIngredientStateParams struct {
	Name          string
	Description   string
	IconPath      string
	Slug          string
	PastTense     string
	AttributeType IngredientAttributeType
	ID            string
}

func (q *Queries) UpdateValidIngredientState(ctx context.Context, db DBTX, arg *UpdateValidIngredientStateParams) error {
	_, err := db.ExecContext(ctx, updateValidIngredientState,
		arg.Name,
		arg.Description,
		arg.IconPath,
		arg.Slug,
		arg.PastTense,
		arg.AttributeType,
		arg.ID,
	)
	return err
}

const updateValidIngredientStateIngredient = `-- name: UpdateValidIngredientStateIngredient :exec

UPDATE valid_ingredient_state_ingredients SET notes = $1, valid_ingredient_state = $2, valid_ingredient = $3, last_updated_at = NOW() WHERE archived_at IS NULL AND id = $4
`

type UpdateValidIngredientStateIngredientParams struct {
	Notes                string
	ValidIngredientState string
	ValidIngredient      string
	ID                   string
}

func (q *Queries) UpdateValidIngredientStateIngredient(ctx context.Context, db DBTX, arg *UpdateValidIngredientStateIngredientParams) error {
	_, err := db.ExecContext(ctx, updateValidIngredientStateIngredient,
		arg.Notes,
		arg.ValidIngredientState,
		arg.ValidIngredient,
		arg.ID,
	)
	return err
}

const updateValidInstrument = `-- name: UpdateValidInstrument :exec

UPDATE valid_instruments
SET
	name = $1,
	plural_name = $2,
	description = $3,
	icon_path = $4,
	usable_for_storage = $5,
	display_in_summary_lists = $6,
	include_in_generated_instructions = $7,
	slug = $8,
	last_updated_at = NOW()
WHERE archived_at IS NULL
	AND id = $9
`

type UpdateValidInstrumentParams struct {
	Name                           string
	PluralName                     string
	Description                    string
	IconPath                       string
	Slug                           string
	ID                             string
	UsableForStorage               bool
	DisplayInSummaryLists          bool
	IncludeInGeneratedInstructions bool
}

func (q *Queries) UpdateValidInstrument(ctx context.Context, db DBTX, arg *UpdateValidInstrumentParams) error {
	_, err := db.ExecContext(ctx, updateValidInstrument,
		arg.Name,
		arg.PluralName,
		arg.Description,
		arg.IconPath,
		arg.UsableForStorage,
		arg.DisplayInSummaryLists,
		arg.IncludeInGeneratedInstructions,
		arg.Slug,
		arg.ID,
	)
	return err
}

const updateValidMeasurementUnit = `-- name: UpdateValidMeasurementUnit :exec

UPDATE valid_measurement_units SET
	name = $1,
	description = $2,
	volumetric = $3,
	icon_path = $4,
	universal = $5,
	metric = $6,
	imperial = $7,
	slug = $8,
	plural_name = $9,
	last_updated_at = NOW()
WHERE archived_at IS NULL AND id = $10
`

type UpdateValidMeasurementUnitParams struct {
	Name        string
	Description string
	IconPath    string
	Slug        string
	PluralName  string
	ID          string
	Volumetric  sql.NullBool
	Universal   bool
	Metric      bool
	Imperial    bool
}

func (q *Queries) UpdateValidMeasurementUnit(ctx context.Context, db DBTX, arg *UpdateValidMeasurementUnitParams) error {
	_, err := db.ExecContext(ctx, updateValidMeasurementUnit,
		arg.Name,
		arg.Description,
		arg.Volumetric,
		arg.IconPath,
		arg.Universal,
		arg.Metric,
		arg.Imperial,
		arg.Slug,
		arg.PluralName,
		arg.ID,
	)
	return err
}

const updateValidMeasurementUnitConversion = `-- name: UpdateValidMeasurementUnitConversion :exec

UPDATE valid_measurement_conversions
SET
	from_unit = $1,
	to_unit = $2,
	only_for_ingredient = $3,
	modifier = $4::float,
	notes = $5,
	last_updated_at = NOW()
WHERE archived_at IS NULL
	AND id = $6
`

type UpdateValidMeasurementUnitConversionParams struct {
	FromUnit          string
	ToUnit            string
	Notes             string
	ID                string
	OnlyForIngredient sql.NullString
	Modifier          float64
}

func (q *Queries) UpdateValidMeasurementUnitConversion(ctx context.Context, db DBTX, arg *UpdateValidMeasurementUnitConversionParams) error {
	_, err := db.ExecContext(ctx, updateValidMeasurementUnitConversion,
		arg.FromUnit,
		arg.ToUnit,
		arg.OnlyForIngredient,
		arg.Modifier,
		arg.Notes,
		arg.ID,
	)
	return err
}

const updateValidPreparation = `-- name: UpdateValidPreparation :exec

UPDATE valid_preparations
SET
	name = $1,
	description = $2,
	icon_path = $3,
	yields_nothing = $4,
	restrict_to_ingredients = $5,
	minimum_ingredient_count = $6,
	maximum_ingredient_count = $7,
	minimum_instrument_count = $8,
	maximum_instrument_count = $9,
	temperature_required = $10,
	time_estimate_required = $11,
	condition_expression_required = $12,
    consumes_vessel = $13,
    only_for_vessels = $14,
    minimum_vessel_count = $15,
    maximum_vessel_count = $16,
	slug = $17,
	past_tense = $18,
	last_updated_at = NOW()
WHERE archived_at IS NULL
	AND id = $19
`

type UpdateValidPreparationParams struct {
	Description                 string
	IconPath                    string
	ID                          string
	Name                        string
	PastTense                   string
	Slug                        string
	MaximumIngredientCount      sql.NullInt32
	MaximumInstrumentCount      sql.NullInt32
	MaximumVesselCount          sql.NullInt32
	MinimumVesselCount          int32
	MinimumIngredientCount      int32
	MinimumInstrumentCount      int32
	RestrictToIngredients       bool
	OnlyForVessels              bool
	ConsumesVessel              bool
	ConditionExpressionRequired bool
	TimeEstimateRequired        bool
	TemperatureRequired         bool
	YieldsNothing               bool
}

func (q *Queries) UpdateValidPreparation(ctx context.Context, db DBTX, arg *UpdateValidPreparationParams) error {
	_, err := db.ExecContext(ctx, updateValidPreparation,
		arg.Name,
		arg.Description,
		arg.IconPath,
		arg.YieldsNothing,
		arg.RestrictToIngredients,
		arg.MinimumIngredientCount,
		arg.MaximumIngredientCount,
		arg.MinimumInstrumentCount,
		arg.MaximumInstrumentCount,
		arg.TemperatureRequired,
		arg.TimeEstimateRequired,
		arg.ConditionExpressionRequired,
		arg.ConsumesVessel,
		arg.OnlyForVessels,
		arg.MinimumVesselCount,
		arg.MaximumVesselCount,
		arg.Slug,
		arg.PastTense,
		arg.ID,
	)
	return err
}

const updateValidPreparationInstrument = `-- name: UpdateValidPreparationInstrument :exec

UPDATE valid_preparation_instruments SET notes = $1, valid_preparation_id = $2, valid_instrument_id = $3, last_updated_at = NOW() WHERE archived_at IS NULL AND id = $4
`

type UpdateValidPreparationInstrumentParams struct {
	Notes              string
	ValidPreparationID string
	ValidInstrumentID  string
	ID                 string
}

func (q *Queries) UpdateValidPreparationInstrument(ctx context.Context, db DBTX, arg *UpdateValidPreparationInstrumentParams) error {
	_, err := db.ExecContext(ctx, updateValidPreparationInstrument,
		arg.Notes,
		arg.ValidPreparationID,
		arg.ValidInstrumentID,
		arg.ID,
	)
	return err
}

const updateValidPreparationVessel = `-- name: UpdateValidPreparationVessel :exec

UPDATE valid_preparation_vessels SET notes = $1, valid_preparation_id = $2, valid_vessel_id = $3, last_updated_at = NOW() WHERE archived_at IS NULL AND id = $4
`

type UpdateValidPreparationVesselParams struct {
	Notes              string
	ValidPreparationID string
	ValidVesselID      string
	ID                 string
}

func (q *Queries) UpdateValidPreparationVessel(ctx context.Context, db DBTX, arg *UpdateValidPreparationVesselParams) error {
	_, err := db.ExecContext(ctx, updateValidPreparationVessel,
		arg.Notes,
		arg.ValidPreparationID,
		arg.ValidVesselID,
		arg.ID,
	)
	return err
}

const updateValidVessel = `-- name: UpdateValidVessel :exec

UPDATE valid_vessels
SET
    name = $1,
    plural_name = $2,
    description = $3,
    icon_path = $4,
    usable_for_storage = $5,
    slug = $6,
    display_in_summary_lists = $7,
    include_in_generated_instructions = $8,
    capacity = $9::float,
    capacity_unit = $10,
    width_in_millimeters = $11::float,
    length_in_millimeters = $12::float,
    height_in_millimeters = $13::float,
    shape = $14,
	last_updated_at = NOW()
WHERE archived_at IS NULL
	AND id = $15
`

type UpdateValidVesselParams struct {
	Name                           string
	PluralName                     string
	Description                    string
	IconPath                       string
	ID                             string
	Slug                           string
	Shape                          VesselShape
	CapacityUnit                   sql.NullString
	Capacity                       float64
	WidthInMillimeters             float64
	LengthInMillimeters            float64
	HeightInMillimeters            float64
	IncludeInGeneratedInstructions bool
	DisplayInSummaryLists          bool
	UsableForStorage               bool
}

func (q *Queries) UpdateValidVessel(ctx context.Context, db DBTX, arg *UpdateValidVesselParams) error {
	_, err := db.ExecContext(ctx, updateValidVessel,
		arg.Name,
		arg.PluralName,
		arg.Description,
		arg.IconPath,
		arg.UsableForStorage,
		arg.Slug,
		arg.DisplayInSummaryLists,
		arg.IncludeInGeneratedInstructions,
		arg.Capacity,
		arg.CapacityUnit,
		arg.WidthInMillimeters,
		arg.LengthInMillimeters,
		arg.HeightInMillimeters,
		arg.Shape,
		arg.ID,
	)
	return err
}
