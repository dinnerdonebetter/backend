// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: for_recipe_step.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const getRecipeMediaForRecipeStep = `-- name: GetRecipeMediaForRecipeStep :many

SELECT
	recipe_media.id,
	recipe_media.belongs_to_recipe,
	recipe_media.belongs_to_recipe_step,
	recipe_media.mime_type,
	recipe_media.internal_path,
	recipe_media.external_path,
	recipe_media.index,
	recipe_media.created_at,
	recipe_media.last_updated_at,
	recipe_media.archived_at
FROM recipe_media
WHERE recipe_media.belongs_to_recipe = $1
	AND recipe_media.belongs_to_recipe_step = $2
	AND recipe_media.archived_at IS NULL
GROUP BY recipe_media.id
ORDER BY recipe_media.id
`

type GetRecipeMediaForRecipeStepParams struct {
	BelongsToRecipe     sql.NullString
	BelongsToRecipeStep sql.NullString
}

type GetRecipeMediaForRecipeStepRow struct {
	ID                  string
	BelongsToRecipe     sql.NullString
	BelongsToRecipeStep sql.NullString
	MimeType            string
	InternalPath        string
	ExternalPath        string
	Index               int32
	CreatedAt           time.Time
	LastUpdatedAt       sql.NullTime
	ArchivedAt          sql.NullTime
}

func (q *Queries) GetRecipeMediaForRecipeStep(ctx context.Context, db DBTX, arg *GetRecipeMediaForRecipeStepParams) ([]*GetRecipeMediaForRecipeStepRow, error) {
	rows, err := db.QueryContext(ctx, getRecipeMediaForRecipeStep, arg.BelongsToRecipe, arg.BelongsToRecipeStep)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetRecipeMediaForRecipeStepRow{}
	for rows.Next() {
		var i GetRecipeMediaForRecipeStepRow
		if err := rows.Scan(
			&i.ID,
			&i.BelongsToRecipe,
			&i.BelongsToRecipeStep,
			&i.MimeType,
			&i.InternalPath,
			&i.ExternalPath,
			&i.Index,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
