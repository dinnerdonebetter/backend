// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: recipe_step_instruments_create.sql

package generated

import (
	"context"
	"database/sql"
)

const CreateRecipeStepInstrument = `-- name: CreateRecipeStepInstrument :exec
INSERT INTO recipe_step_instruments
(id,instrument_id,recipe_step_product_id,name,product_of_recipe_step,notes,preference_rank,optional,minimum_quantity,maximum_quantity,belongs_to_recipe_step)
VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11)
`

type CreateRecipeStepInstrumentParams struct {
	ID                  string         `db:"id"`
	Name                string         `db:"name"`
	BelongsToRecipeStep string         `db:"belongs_to_recipe_step"`
	Notes               string         `db:"notes"`
	InstrumentID        sql.NullString `db:"instrument_id"`
	RecipeStepProductID sql.NullString `db:"recipe_step_product_id"`
	PreferenceRank      int32          `db:"preference_rank"`
	MinimumQuantity     int32          `db:"minimum_quantity"`
	MaximumQuantity     int32          `db:"maximum_quantity"`
	Optional            bool           `db:"optional"`
	ProductOfRecipeStep bool           `db:"product_of_recipe_step"`
}

func (q *Queries) CreateRecipeStepInstrument(ctx context.Context, db DBTX, arg *CreateRecipeStepInstrumentParams) error {
	_, err := db.ExecContext(ctx, CreateRecipeStepInstrument,
		arg.ID,
		arg.InstrumentID,
		arg.RecipeStepProductID,
		arg.Name,
		arg.ProductOfRecipeStep,
		arg.Notes,
		arg.PreferenceRank,
		arg.Optional,
		arg.MinimumQuantity,
		arg.MaximumQuantity,
		arg.BelongsToRecipeStep,
	)
	return err
}
