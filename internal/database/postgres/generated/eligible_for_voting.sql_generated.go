// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: eligible_for_voting.sql

package generated

import (
	"context"
)

const getMealPlanEventsEligibleForVoting = `-- name: GetMealPlanEventsEligibleForVoting :many

SELECT
  EXISTS (
    SELECT
      meal_plan_events.id
    FROM
      meal_plan_events
      JOIN meal_plans ON meal_plan_events.belongs_to_meal_plan = meal_plans.id
    WHERE
      meal_plan_events.archived_at IS NULL
      AND meal_plans.id = $1
      AND meal_plans.status = 'awaiting_votes'
      AND meal_plans.archived_at IS NULL
      AND meal_plan_events.id = $2
      AND meal_plan_events.archived_at IS NULL
  )
`

type GetMealPlanEventsEligibleForVotingParams struct {
	ID   string
	ID_2 string
}

func (q *Queries) GetMealPlanEventsEligibleForVoting(ctx context.Context, db DBTX, arg *GetMealPlanEventsEligibleForVotingParams) ([]bool, error) {
	rows, err := db.QueryContext(ctx, getMealPlanEventsEligibleForVoting, arg.ID, arg.ID_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []bool{}
	for rows.Next() {
		var exists bool
		if err := rows.Scan(&exists); err != nil {
			return nil, err
		}
		items = append(items, exists)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
