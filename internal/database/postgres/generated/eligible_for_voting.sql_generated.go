// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: eligible_for_voting.sql

package generated

import (
	"context"
)

const mealPlanEventIsEligibleForVoting = `-- name: MealPlanEventIsEligibleForVoting :one

SELECT
  EXISTS (
    SELECT
      meal_plan_events.id
    FROM
      meal_plan_events
      JOIN meal_plans ON meal_plan_events.belongs_to_meal_plan = meal_plans.id
    WHERE
      meal_plan_events.archived_at IS NULL
      AND meal_plans.id = $1
      AND meal_plans.status = 'awaiting_votes'
      AND meal_plans.archived_at IS NULL
      AND meal_plan_events.id = $2
      AND meal_plan_events.archived_at IS NULL
  )
`

type MealPlanEventIsEligibleForVotingParams struct {
	MealPlanID      string
	MealPlanEventID string
}

func (q *Queries) MealPlanEventIsEligibleForVoting(ctx context.Context, db DBTX, arg *MealPlanEventIsEligibleForVotingParams) (bool, error) {
	row := db.QueryRowContext(ctx, mealPlanEventIsEligibleForVoting, arg.MealPlanID, arg.MealPlanEventID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
