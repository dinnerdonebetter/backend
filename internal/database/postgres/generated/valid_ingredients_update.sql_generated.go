// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: valid_ingredients_update.sql

package generated

import (
	"context"
	"database/sql"
)

const UpdateValidIngredient = `-- name: UpdateValidIngredient :exec
UPDATE valid_ingredients SET
	name = $1,
	description = $2,
	warning = $3,
	contains_egg = $4,
	contains_dairy = $5,
	contains_peanut = $6,
	contains_tree_nut = $7,
	contains_soy = $8,
	contains_wheat = $9,
	contains_shellfish = $10,
	contains_sesame = $11,
	contains_fish = $12,
	contains_gluten = $13,
	animal_flesh = $14,
	volumetric = $15,
	is_liquid = $16,
	icon_path = $17,
	animal_derived = $18,
	plural_name = $19,
	restrict_to_preparations = $20,
	minimum_ideal_storage_temperature_in_celsius = $21,
	maximum_ideal_storage_temperature_in_celsius = $22,
	storage_instructions = $23,
	last_updated_at = NOW()
WHERE archived_at IS NULL AND id = $24
`

type UpdateValidIngredientParams struct {
	Name                                    string         `db:"name"`
	Description                             string         `db:"description"`
	Warning                                 string         `db:"warning"`
	StorageInstructions                     string         `db:"storage_instructions"`
	PluralName                              string         `db:"plural_name"`
	IconPath                                string         `db:"icon_path"`
	ID                                      string         `db:"id"`
	MaximumIdealStorageTemperatureInCelsius sql.NullString `db:"maximum_ideal_storage_temperature_in_celsius"`
	MinimumIdealStorageTemperatureInCelsius sql.NullString `db:"minimum_ideal_storage_temperature_in_celsius"`
	IsLiquid                                sql.NullBool   `db:"is_liquid"`
	ContainsSoy                             bool           `db:"contains_soy"`
	ContainsFish                            bool           `db:"contains_fish"`
	ContainsTreeNut                         bool           `db:"contains_tree_nut"`
	AnimalFlesh                             bool           `db:"animal_flesh"`
	Volumetric                              bool           `db:"volumetric"`
	ContainsSesame                          bool           `db:"contains_sesame"`
	ContainsPeanut                          bool           `db:"contains_peanut"`
	AnimalDerived                           bool           `db:"animal_derived"`
	ContainsDairy                           bool           `db:"contains_dairy"`
	RestrictToPreparations                  bool           `db:"restrict_to_preparations"`
	ContainsShellfish                       bool           `db:"contains_shellfish"`
	ContainsWheat                           bool           `db:"contains_wheat"`
	ContainsEgg                             bool           `db:"contains_egg"`
	ContainsGluten                          bool           `db:"contains_gluten"`
}

func (q *Queries) UpdateValidIngredient(ctx context.Context, db DBTX, arg *UpdateValidIngredientParams) error {
	_, err := db.ExecContext(ctx, UpdateValidIngredient,
		arg.Name,
		arg.Description,
		arg.Warning,
		arg.ContainsEgg,
		arg.ContainsDairy,
		arg.ContainsPeanut,
		arg.ContainsTreeNut,
		arg.ContainsSoy,
		arg.ContainsWheat,
		arg.ContainsShellfish,
		arg.ContainsSesame,
		arg.ContainsFish,
		arg.ContainsGluten,
		arg.AnimalFlesh,
		arg.Volumetric,
		arg.IsLiquid,
		arg.IconPath,
		arg.AnimalDerived,
		arg.PluralName,
		arg.RestrictToPreparations,
		arg.MinimumIdealStorageTemperatureInCelsius,
		arg.MaximumIdealStorageTemperatureInCelsius,
		arg.StorageInstructions,
		arg.ID,
	)
	return err
}
