// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: recipe_prep_tasks_update.sql

package generated

import (
	"context"
	"database/sql"
)

const UpdateRecipePrepTask = `-- name: UpdateRecipePrepTask :exec
UPDATE recipe_prep_tasks SET
     notes = $1,
     explicit_storage_instructions = $2,
     minimum_time_buffer_before_recipe_in_seconds = $3,
     maximum_time_buffer_before_recipe_in_seconds = $4,
     storage_type = $5,
     minimum_storage_temperature_in_celsius = $6,
     maximum_storage_temperature_in_celsius = $7,
     belongs_to_recipe = $8,
     last_updated_at = NOW()
WHERE archived_at IS NULL AND id = $9
`

type UpdateRecipePrepTaskParams struct {
	Notes                                  string
	ExplicitStorageInstructions            string
	MinimumTimeBufferBeforeRecipeInSeconds int32
	MaximumTimeBufferBeforeRecipeInSeconds sql.NullInt32
	StorageType                            NullStorageContainerType
	MinimumStorageTemperatureInCelsius     sql.NullString
	MaximumStorageTemperatureInCelsius     sql.NullString
	BelongsToRecipe                        string
	ID                                     string
}

func (q *Queries) UpdateRecipePrepTask(ctx context.Context, arg *UpdateRecipePrepTaskParams) error {
	_, err := q.db.ExecContext(ctx, UpdateRecipePrepTask,
		arg.Notes,
		arg.ExplicitStorageInstructions,
		arg.MinimumTimeBufferBeforeRecipeInSeconds,
		arg.MaximumTimeBufferBeforeRecipeInSeconds,
		arg.StorageType,
		arg.MinimumStorageTemperatureInCelsius,
		arg.MaximumStorageTemperatureInCelsius,
		arg.BelongsToRecipe,
		arg.ID,
	)
	return err
}
