// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: webhooks_get_one.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const GetWebhook = `-- name: GetWebhook :many
SELECT
    webhooks.id,
    webhooks.name,
    webhooks.content_type,
    webhooks.url,
    webhooks.method,
    webhook_trigger_events.id,
    webhook_trigger_events.trigger_event,
    webhook_trigger_events.belongs_to_webhook,
    webhook_trigger_events.created_at,
    webhook_trigger_events.archived_at,
    webhooks.created_at,
    webhooks.last_updated_at,
    webhooks.archived_at,
    webhooks.belongs_to_household
FROM webhook_trigger_events
    JOIN webhooks ON webhook_trigger_events.belongs_to_webhook=webhooks.id
WHERE webhooks.archived_at IS NULL
    AND webhook_trigger_events.archived_at IS NULL
    AND webhooks.belongs_to_household = $1
    AND webhooks.id = $2
`

type GetWebhookParams struct {
	BelongsToHousehold string `db:"belongs_to_household"`
	ID                 string `db:"id"`
}

type GetWebhookRow struct {
	ID                 string       `db:"id"`
	Name               string       `db:"name"`
	ContentType        string       `db:"content_type"`
	Url                string       `db:"url"`
	Method             string       `db:"method"`
	ID_2               string       `db:"id_2"`
	TriggerEvent       WebhookEvent `db:"trigger_event"`
	BelongsToWebhook   string       `db:"belongs_to_webhook"`
	CreatedAt          time.Time    `db:"created_at"`
	ArchivedAt         sql.NullTime `db:"archived_at"`
	CreatedAt_2        time.Time    `db:"created_at_2"`
	LastUpdatedAt      sql.NullTime `db:"last_updated_at"`
	ArchivedAt_2       sql.NullTime `db:"archived_at_2"`
	BelongsToHousehold string       `db:"belongs_to_household"`
}

func (q *Queries) GetWebhook(ctx context.Context, arg *GetWebhookParams) ([]*GetWebhookRow, error) {
	rows, err := q.query(ctx, q.getWebhookStmt, GetWebhook, arg.BelongsToHousehold, arg.ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetWebhookRow{}
	for rows.Next() {
		var i GetWebhookRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ContentType,
			&i.Url,
			&i.Method,
			&i.ID_2,
			&i.TriggerEvent,
			&i.BelongsToWebhook,
			&i.CreatedAt,
			&i.ArchivedAt,
			&i.CreatedAt_2,
			&i.LastUpdatedAt,
			&i.ArchivedAt_2,
			&i.BelongsToHousehold,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
