// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: search_by_ingredient_id.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const searchValidMeasurementUnitsByIngredientID = `-- name: SearchValidMeasurementUnitsByIngredientID :many

SELECT
	DISTINCT(valid_measurement_units.id),
	valid_measurement_units.name,
	valid_measurement_units.description,
	valid_measurement_units.volumetric,
	valid_measurement_units.icon_path,
	valid_measurement_units.universal,
	valid_measurement_units.metric,
	valid_measurement_units.imperial,
	valid_measurement_units.slug,
	valid_measurement_units.plural_name,
	valid_measurement_units.created_at,
	valid_measurement_units.last_updated_at,
	valid_measurement_units.archived_at,
	(
	SELECT
	  COUNT(valid_measurement_units.id)
	FROM
	  valid_measurement_units
	WHERE
	    valid_measurement_units.archived_at IS NULL
        AND valid_measurement_units.created_at > COALESCE($1, (SELECT NOW() - interval '999 years'))
        AND valid_measurement_units.created_at < COALESCE($2, (SELECT NOW() + interval '999 years'))
        AND (
            valid_measurement_units.last_updated_at IS NULL
            OR valid_measurement_units.last_updated_at > COALESCE($3, (SELECT NOW() - interval '999 years'))
        )
        AND (
            valid_measurement_units.last_updated_at IS NULL
            OR valid_measurement_units.last_updated_at < COALESCE($4, (SELECT NOW() + interval '999 years'))
        )
	    AND (
	        valid_ingredient_measurement_units.valid_ingredient_id = $5
	        OR valid_measurement_units.universal = true
	    )
	) as filtered_count,
	(
	    SELECT
	        COUNT(valid_measurement_units.id)
	    FROM
	        valid_measurement_units
	    WHERE
	        valid_measurement_units.archived_at IS NULL
	) as total_count
FROM valid_measurement_units
	JOIN valid_ingredient_measurement_units ON valid_ingredient_measurement_units.valid_measurement_unit_id = valid_measurement_units.id
	JOIN valid_ingredients ON valid_ingredient_measurement_units.valid_ingredient_id = valid_ingredients.id
WHERE
	(
	    valid_ingredient_measurement_units.valid_ingredient_id = $5
	    OR valid_measurement_units.universal = true
	)
    AND valid_measurement_units.archived_at IS NULL
    AND valid_ingredients.archived_at IS NULL
    AND valid_ingredient_measurement_units.archived_at IS NULL
    AND valid_measurement_units.created_at > COALESCE($1, (SELECT NOW() - interval '999 years'))
    AND valid_measurement_units.created_at < COALESCE($2, (SELECT NOW() + interval '999 years'))
    AND (
        valid_measurement_units.last_updated_at IS NULL
        OR valid_measurement_units.last_updated_at > COALESCE($3, (SELECT NOW() - interval '999 years'))
    )
    AND (
        valid_measurement_units.last_updated_at IS NULL
        OR valid_measurement_units.last_updated_at < COALESCE($4, (SELECT NOW() + interval '999 years'))
    )
	LIMIT $7
	OFFSET $6
`

type SearchValidMeasurementUnitsByIngredientIDParams struct {
	CreatedBefore     sql.NullTime
	CreatedAfter      sql.NullTime
	UpdatedBefore     sql.NullTime
	UpdatedAfter      sql.NullTime
	ValidIngredientID string
	QueryOffset       sql.NullInt32
	QueryLimit        sql.NullInt32
}

type SearchValidMeasurementUnitsByIngredientIDRow struct {
	CreatedAt     time.Time
	LastUpdatedAt sql.NullTime
	ArchivedAt    sql.NullTime
	Name          string
	Description   string
	ID            string
	IconPath      string
	Slug          string
	PluralName    string
	TotalCount    int64
	FilteredCount int64
	Volumetric    sql.NullBool
	Imperial      bool
	Metric        bool
	Universal     bool
}

func (q *Queries) SearchValidMeasurementUnitsByIngredientID(ctx context.Context, db DBTX, arg *SearchValidMeasurementUnitsByIngredientIDParams) ([]*SearchValidMeasurementUnitsByIngredientIDRow, error) {
	rows, err := db.QueryContext(ctx, searchValidMeasurementUnitsByIngredientID,
		arg.CreatedBefore,
		arg.CreatedAfter,
		arg.UpdatedBefore,
		arg.UpdatedAfter,
		arg.ValidIngredientID,
		arg.QueryOffset,
		arg.QueryLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*SearchValidMeasurementUnitsByIngredientIDRow{}
	for rows.Next() {
		var i SearchValidMeasurementUnitsByIngredientIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Volumetric,
			&i.IconPath,
			&i.Universal,
			&i.Metric,
			&i.Imperial,
			&i.Slug,
			&i.PluralName,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.FilteredCount,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
