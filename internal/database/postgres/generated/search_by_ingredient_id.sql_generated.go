// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: search_by_ingredient_id.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const SearchValidMeasurementUnitsByIngredientID = `-- name: SearchValidMeasurementUnitsByIngredientID :many

SELECT
	DISTINCT(valid_measurement_units.id),
	valid_measurement_units.name,
	valid_measurement_units.description,
	valid_measurement_units.volumetric,
	valid_measurement_units.icon_path,
	valid_measurement_units.universal,
	valid_measurement_units.metric,
	valid_measurement_units.imperial,
	valid_measurement_units.slug,
	valid_measurement_units.plural_name,
	valid_measurement_units.created_at,
	valid_measurement_units.last_updated_at,
	valid_measurement_units.archived_at,
	(
	SELECT
	  COUNT(valid_measurement_units.id)
	FROM
	  valid_measurement_units
	WHERE
	    valid_measurement_units.archived_at IS NULL
	    AND valid_measurement_units.created_at > COALESCE($1, (SELECT NOW() - interval '999 years'))
	    AND valid_measurement_units.created_at < COALESCE($2, (SELECT NOW() + interval '999 years'))
	    AND (
	        valid_measurement_units.last_updated_at IS NULL
	        OR valid_measurement_units.last_updated_at > COALESCE($3, (SELECT NOW() - interval '999 years'))
	    )
	    AND (
	        valid_measurement_units.last_updated_at IS NULL
	        OR valid_measurement_units.last_updated_at < COALESCE($4, (SELECT NOW() + interval '999 years'))
	    )
	    AND (
	        valid_ingredient_measurement_units.valid_ingredient_id = $5
	        OR valid_measurement_units.universal = true
	    )
	) as filtered_count,
	(
	    SELECT
	        COUNT(valid_measurement_units.id)
	    FROM
	        valid_measurement_units
	    WHERE
	        valid_measurement_units.archived_at IS NULL
	) as total_count
FROM valid_measurement_units
	FULL OUTER JOIN valid_ingredient_measurement_units ON valid_ingredient_measurement_units.valid_measurement_unit_id = valid_measurement_units.id
	FULL OUTER JOIN valid_ingredients ON valid_ingredient_measurement_units.valid_ingredient_id = valid_ingredients.id
WHERE
	(
	    valid_ingredient_measurement_units.valid_ingredient_id = $5
	    OR valid_measurement_units.universal = true
	)
	AND valid_measurement_units.archived_at IS NULL
	AND valid_ingredient_measurement_units.archived_at IS NULL
	LIMIT $6
	OFFSET $7
`

type SearchValidMeasurementUnitsByIngredientIDParams struct {
	CreatedAt         time.Time    `db:"created_at"`
	CreatedAt_2       time.Time    `db:"created_at_2"`
	LastUpdatedAt     sql.NullTime `db:"last_updated_at"`
	LastUpdatedAt_2   sql.NullTime `db:"last_updated_at_2"`
	ValidIngredientID string       `db:"valid_ingredient_id"`
	Limit             int32        `db:"limit"`
	Offset            int32        `db:"offset"`
}

type SearchValidMeasurementUnitsByIngredientIDRow struct {
	LastUpdatedAt sql.NullTime   `db:"last_updated_at"`
	ArchivedAt    sql.NullTime   `db:"archived_at"`
	CreatedAt     sql.NullTime   `db:"created_at"`
	Name          sql.NullString `db:"name"`
	Description   sql.NullString `db:"description"`
	ID            sql.NullString `db:"id"`
	IconPath      sql.NullString `db:"icon_path"`
	Slug          sql.NullString `db:"slug"`
	PluralName    sql.NullString `db:"plural_name"`
	TotalCount    int64          `db:"total_count"`
	FilteredCount int64          `db:"filtered_count"`
	Volumetric    sql.NullBool   `db:"volumetric"`
	Imperial      sql.NullBool   `db:"imperial"`
	Metric        sql.NullBool   `db:"metric"`
	Universal     sql.NullBool   `db:"universal"`
}

func (q *Queries) SearchValidMeasurementUnitsByIngredientID(ctx context.Context, db DBTX, arg *SearchValidMeasurementUnitsByIngredientIDParams) ([]*SearchValidMeasurementUnitsByIngredientIDRow, error) {
	rows, err := db.QueryContext(ctx, SearchValidMeasurementUnitsByIngredientID,
		arg.CreatedAt,
		arg.CreatedAt_2,
		arg.LastUpdatedAt,
		arg.LastUpdatedAt_2,
		arg.ValidIngredientID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*SearchValidMeasurementUnitsByIngredientIDRow{}
	for rows.Next() {
		var i SearchValidMeasurementUnitsByIngredientIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Volumetric,
			&i.IconPath,
			&i.Universal,
			&i.Metric,
			&i.Imperial,
			&i.Slug,
			&i.PluralName,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.FilteredCount,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
