// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: valid_preparation_instruments.sql

package generated

import (
	"context"
	"database/sql"
)

const ArchiveValidPreparationInstrument = `-- name: ArchiveValidPreparationInstrument :exec
UPDATE valid_preparation_instruments SET archived_on = extract(epoch FROM NOW()) WHERE archived_on IS NULL AND id = $1
`

func (q *Queries) ArchiveValidPreparationInstrument(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, ArchiveValidPreparationInstrument, id)
	return err
}

const CreateValidPreparationInstrument = `-- name: CreateValidPreparationInstrument :exec
INSERT INTO valid_preparation_instruments (id,notes,valid_preparation_id,valid_instrument_id) VALUES ($1,$2,$3,$4)
`

type CreateValidPreparationInstrumentParams struct {
	ID                 string
	Notes              string
	ValidPreparationID string
	ValidInstrumentID  string
}

func (q *Queries) CreateValidPreparationInstrument(ctx context.Context, arg *CreateValidPreparationInstrumentParams) error {
	_, err := q.db.ExecContext(ctx, CreateValidPreparationInstrument,
		arg.ID,
		arg.Notes,
		arg.ValidPreparationID,
		arg.ValidInstrumentID,
	)
	return err
}

const GetTotalValidPreparationInstrumentsCount = `-- name: GetTotalValidPreparationInstrumentsCount :one
SELECT COUNT(valid_preparation_instruments.id) FROM valid_preparation_instruments WHERE valid_preparation_instruments.archived_on IS NULL
`

func (q *Queries) GetTotalValidPreparationInstrumentsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, GetTotalValidPreparationInstrumentsCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const GetValidPreparationInstrument = `-- name: GetValidPreparationInstrument :one
SELECT
    valid_preparation_instruments.id,
    valid_preparation_instruments.notes,
    valid_preparations.id,
    valid_preparations.name,
    valid_preparations.description,
    valid_preparations.icon_path,
    valid_preparations.created_on,
    valid_preparations.last_updated_on,
    valid_preparations.archived_on,
    valid_instruments.id,
    valid_instruments.name,
    valid_instruments.description,
    valid_instruments.icon_path,
    valid_instruments.created_on,
    valid_instruments.last_updated_on,
    valid_instruments.archived_on,
    valid_preparation_instruments.created_on,
    valid_preparation_instruments.last_updated_on,
    valid_preparation_instruments.archived_on
FROM
    valid_preparation_instruments
        JOIN valid_instruments ON valid_preparation_instruments.valid_instrument_id = valid_instruments.id
        JOIN valid_preparations ON valid_preparation_instruments.valid_preparation_id = valid_preparations.id
WHERE
    valid_preparation_instruments.archived_on IS NULL
  AND valid_preparation_instruments.id = $1
`

type GetValidPreparationInstrumentRow struct {
	ID              string
	Notes           string
	ID_2            string
	Name            string
	Description     string
	IconPath        string
	CreatedOn       int64
	LastUpdatedOn   sql.NullInt64
	ArchivedOn      sql.NullInt64
	ID_3            string
	Name_2          string
	Description_2   string
	IconPath_2      string
	CreatedOn_2     int64
	LastUpdatedOn_2 sql.NullInt64
	ArchivedOn_2    sql.NullInt64
	CreatedOn_3     int64
	LastUpdatedOn_3 sql.NullInt64
	ArchivedOn_3    sql.NullInt64
}

func (q *Queries) GetValidPreparationInstrument(ctx context.Context, id string) (*GetValidPreparationInstrumentRow, error) {
	row := q.db.QueryRowContext(ctx, GetValidPreparationInstrument, id)
	var i GetValidPreparationInstrumentRow
	err := row.Scan(
		&i.ID,
		&i.Notes,
		&i.ID_2,
		&i.Name,
		&i.Description,
		&i.IconPath,
		&i.CreatedOn,
		&i.LastUpdatedOn,
		&i.ArchivedOn,
		&i.ID_3,
		&i.Name_2,
		&i.Description_2,
		&i.IconPath_2,
		&i.CreatedOn_2,
		&i.LastUpdatedOn_2,
		&i.ArchivedOn_2,
		&i.CreatedOn_3,
		&i.LastUpdatedOn_3,
		&i.ArchivedOn_3,
	)
	return &i, err
}

const UpdateValidPreparationInstrument = `-- name: UpdateValidPreparationInstrument :exec
UPDATE valid_preparation_instruments SET notes = $1, valid_preparation_id = $2, valid_instrument_id = $3, last_updated_on = extract(epoch FROM NOW()) WHERE archived_on IS NULL AND id = $4
`

type UpdateValidPreparationInstrumentParams struct {
	Notes              string
	ValidPreparationID string
	ValidInstrumentID  string
	ID                 string
}

func (q *Queries) UpdateValidPreparationInstrument(ctx context.Context, arg *UpdateValidPreparationInstrumentParams) error {
	_, err := q.db.ExecContext(ctx, UpdateValidPreparationInstrument,
		arg.Notes,
		arg.ValidPreparationID,
		arg.ValidInstrumentID,
		arg.ID,
	)
	return err
}

const ValidPreparationInstrumentExists = `-- name: ValidPreparationInstrumentExists :one
SELECT EXISTS ( SELECT valid_preparation_instruments.id FROM valid_preparation_instruments WHERE valid_preparation_instruments.archived_on IS NULL AND valid_preparation_instruments.id = $1 )
`

func (q *Queries) ValidPreparationInstrumentExists(ctx context.Context, id string) (bool, error) {
	row := q.db.QueryRowContext(ctx, ValidPreparationInstrumentExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
