// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: households.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const addToHouseholdDuringCreation = `-- name: AddToHouseholdDuringCreation :exec

INSERT INTO household_user_memberships (id,belongs_to_user,belongs_to_household,household_role)
VALUES ($1,$2,$3,$4)
`

type AddToHouseholdDuringCreationParams struct {
	ID                 string
	BelongsToUser      string
	BelongsToHousehold string
	HouseholdRole      string
}

func (q *Queries) AddToHouseholdDuringCreation(ctx context.Context, db DBTX, arg *AddToHouseholdDuringCreationParams) error {
	_, err := db.ExecContext(ctx, addToHouseholdDuringCreation,
		arg.ID,
		arg.BelongsToUser,
		arg.BelongsToHousehold,
		arg.HouseholdRole,
	)
	return err
}

const archiveHousehold = `-- name: ArchiveHousehold :execrows

UPDATE households SET last_updated_at = NOW(), archived_at = NOW() WHERE archived_at IS NULL AND belongs_to_user = $1 AND id = $2
`

type ArchiveHouseholdParams struct {
	BelongsToUser string
	ID            string
}

func (q *Queries) ArchiveHousehold(ctx context.Context, db DBTX, arg *ArchiveHouseholdParams) (int64, error) {
	result, err := db.ExecContext(ctx, archiveHousehold, arg.BelongsToUser, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const createHousehold = `-- name: CreateHousehold :exec

INSERT INTO households (
    id,
    name,
    billing_status,
    contact_phone,
    address_line_1,
    address_line_2,
    city,
    state,
    zip_code,
    country,
    latitude,
    longitude,
    belongs_to_user,
    webhook_hmac_secret
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14
)
`

type CreateHouseholdParams struct {
	City              string
	ID                string
	BillingStatus     string
	ContactPhone      string
	AddressLine1      string
	AddressLine2      string
	Name              string
	State             string
	WebhookHmacSecret string
	Country           string
	ZipCode           string
	BelongsToUser     string
	Longitude         sql.NullString
	Latitude          sql.NullString
}

func (q *Queries) CreateHousehold(ctx context.Context, db DBTX, arg *CreateHouseholdParams) error {
	_, err := db.ExecContext(ctx, createHousehold,
		arg.ID,
		arg.Name,
		arg.BillingStatus,
		arg.ContactPhone,
		arg.AddressLine1,
		arg.AddressLine2,
		arg.City,
		arg.State,
		arg.ZipCode,
		arg.Country,
		arg.Latitude,
		arg.Longitude,
		arg.BelongsToUser,
		arg.WebhookHmacSecret,
	)
	return err
}

const getHouseholdByIDWithMemberships = `-- name: GetHouseholdByIDWithMemberships :many

SELECT
	households.id,
	households.name,
	households.billing_status,
	households.contact_phone,
	households.address_line_1,
	households.address_line_2,
	households.city,
	households.state,
	households.zip_code,
	households.country,
	households.latitude,
    households.longitude,
	households.payment_processor_customer_id,
	households.subscription_plan_id,
	households.created_at,
	households.last_updated_at,
	households.archived_at,
	households.belongs_to_user,
	households.webhook_hmac_secret,
	users.id as user_id,
	users.first_name as user_first_name,
	users.last_name as user_last_name,
	users.username as user_username,
	users.email_address as user_email_address,
	users.email_address_verified_at as user_email_address_verified_at,
	users.avatar_src as user_avatar_src,
	users.requires_password_change as user_requires_password_change,
	users.password_last_changed_at as user_password_last_changed_at,
	users.two_factor_secret_verified_at as user_two_factor_secret_verified_at,
	users.service_role as user_service_role,
	users.user_account_status as user_user_account_status,
	users.user_account_status_explanation as user_user_account_status_explanation,
	users.birthday as user_birthday,
    users.last_accepted_terms_of_service as user_last_accepted_terms_of_service,
    users.last_accepted_privacy_policy as user_last_accepted_privacy_policy,
	users.created_at as user_created_at,
	users.last_updated_at as user_last_updated_at,
	users.archived_at as user_archived_at,
	household_user_memberships.id as membership_id,
	household_user_memberships.belongs_to_user as membership_belongs_to_user,
	household_user_memberships.belongs_to_household as membership_belongs_to_household,
	household_user_memberships.household_role as membership_household_role,
	household_user_memberships.default_household as membership_default_household,
	household_user_memberships.created_at as membership_created_at,
	household_user_memberships.last_updated_at as membership_last_updated_at,
	household_user_memberships.archived_at as membership_archived_at
FROM households
	JOIN household_user_memberships ON household_user_memberships.belongs_to_household = households.id
	JOIN users ON household_user_memberships.belongs_to_user = users.id
WHERE households.archived_at IS NULL
	AND household_user_memberships.archived_at IS NULL
	AND households.id = $1
`

type GetHouseholdByIDWithMembershipsRow struct {
	UserCreatedAt                    time.Time
	MembershipCreatedAt              time.Time
	CreatedAt                        time.Time
	UserLastAcceptedTermsOfService   sql.NullTime
	UserArchivedAt                   sql.NullTime
	UserLastUpdatedAt                sql.NullTime
	MembershipArchivedAt             sql.NullTime
	UserLastAcceptedPrivacyPolicy    sql.NullTime
	LastUpdatedAt                    sql.NullTime
	UserBirthday                     sql.NullTime
	UserTwoFactorSecretVerifiedAt    sql.NullTime
	UserPasswordLastChangedAt        sql.NullTime
	UserEmailAddressVerifiedAt       sql.NullTime
	ArchivedAt                       sql.NullTime
	MembershipLastUpdatedAt          sql.NullTime
	UserUsername                     string
	UserUserAccountStatus            string
	BelongsToUser                    string
	WebhookHmacSecret                string
	UserID                           string
	UserFirstName                    string
	UserLastName                     string
	ID                               string
	UserEmailAddress                 string
	PaymentProcessorCustomerID       string
	Name                             string
	BillingStatus                    string
	ContactPhone                     string
	MembershipHouseholdRole          string
	UserServiceRole                  string
	MembershipBelongsToHousehold     string
	UserUserAccountStatusExplanation string
	Country                          string
	ZipCode                          string
	State                            string
	City                             string
	AddressLine2                     string
	AddressLine1                     string
	MembershipID                     string
	MembershipBelongsToUser          string
	SubscriptionPlanID               sql.NullString
	Latitude                         sql.NullString
	Longitude                        sql.NullString
	UserAvatarSrc                    sql.NullString
	MembershipDefaultHousehold       bool
	UserRequiresPasswordChange       bool
}

func (q *Queries) GetHouseholdByIDWithMemberships(ctx context.Context, db DBTX, id string) ([]*GetHouseholdByIDWithMembershipsRow, error) {
	rows, err := db.QueryContext(ctx, getHouseholdByIDWithMemberships, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetHouseholdByIDWithMembershipsRow{}
	for rows.Next() {
		var i GetHouseholdByIDWithMembershipsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.BillingStatus,
			&i.ContactPhone,
			&i.AddressLine1,
			&i.AddressLine2,
			&i.City,
			&i.State,
			&i.ZipCode,
			&i.Country,
			&i.Latitude,
			&i.Longitude,
			&i.PaymentProcessorCustomerID,
			&i.SubscriptionPlanID,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.BelongsToUser,
			&i.WebhookHmacSecret,
			&i.UserID,
			&i.UserFirstName,
			&i.UserLastName,
			&i.UserUsername,
			&i.UserEmailAddress,
			&i.UserEmailAddressVerifiedAt,
			&i.UserAvatarSrc,
			&i.UserRequiresPasswordChange,
			&i.UserPasswordLastChangedAt,
			&i.UserTwoFactorSecretVerifiedAt,
			&i.UserServiceRole,
			&i.UserUserAccountStatus,
			&i.UserUserAccountStatusExplanation,
			&i.UserBirthday,
			&i.UserLastAcceptedTermsOfService,
			&i.UserLastAcceptedPrivacyPolicy,
			&i.UserCreatedAt,
			&i.UserLastUpdatedAt,
			&i.UserArchivedAt,
			&i.MembershipID,
			&i.MembershipBelongsToUser,
			&i.MembershipBelongsToHousehold,
			&i.MembershipHouseholdRole,
			&i.MembershipDefaultHousehold,
			&i.MembershipCreatedAt,
			&i.MembershipLastUpdatedAt,
			&i.MembershipArchivedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHouseholdsForUser = `-- name: GetHouseholdsForUser :many

SELECT
    households.id,
    households.name,
    households.billing_status,
    households.contact_phone,
    households.address_line_1,
    households.address_line_2,
    households.city,
    households.state,
    households.zip_code,
    households.country,
    households.latitude,
    households.longitude,
    households.payment_processor_customer_id,
    households.subscription_plan_id,
    households.created_at,
    households.last_updated_at,
    households.archived_at,
    households.belongs_to_user,
    (
        SELECT
            COUNT(households.id)
        FROM
            households
            JOIN household_user_memberships ON household_user_memberships.belongs_to_household = households.id
        WHERE households.archived_at IS NULL
            AND household_user_memberships.belongs_to_user = $1
            AND household_user_memberships.belongs_to_user = $1
            AND households.created_at > COALESCE($2, (SELECT NOW() - interval '999 years'))
            AND households.created_at < COALESCE($3, (SELECT NOW() + interval '999 years'))
            AND (households.last_updated_at IS NULL OR households.last_updated_at > COALESCE($4, (SELECT NOW() - interval '999 years')))
            AND (households.last_updated_at IS NULL OR households.last_updated_at < COALESCE($5, (SELECT NOW() + interval '999 years')))
    ) as filtered_count,
    (
        SELECT
            COUNT(households.id)
        FROM
            households
        WHERE
            households.archived_at IS NULL
    ) as total_count
FROM households
	JOIN household_user_memberships ON household_user_memberships.belongs_to_household = households.id
    JOIN users ON household_user_memberships.belongs_to_user = users.id
WHERE households.archived_at IS NULL
    AND household_user_memberships.archived_at IS NULL
    AND household_user_memberships.belongs_to_user = $1
    AND households.created_at > COALESCE($2, (SELECT NOW() - interval '999 years'))
    AND households.created_at < COALESCE($3, (SELECT NOW() + interval '999 years'))
    AND (households.last_updated_at IS NULL OR households.last_updated_at > COALESCE($4, (SELECT NOW() - interval '999 years')))
    AND (households.last_updated_at IS NULL OR households.last_updated_at < COALESCE($5, (SELECT NOW() + interval '999 years')))
    OFFSET $6
    LIMIT $7
`

type GetHouseholdsForUserParams struct {
	UserID        string
	CreatedAfter  sql.NullTime
	CreatedBefore sql.NullTime
	UpdatedAfter  sql.NullTime
	UpdatedBefore sql.NullTime
	QueryOffset   sql.NullInt32
	QueryLimit    sql.NullInt32
}

type GetHouseholdsForUserRow struct {
	CreatedAt                  time.Time
	ArchivedAt                 sql.NullTime
	LastUpdatedAt              sql.NullTime
	AddressLine2               string
	PaymentProcessorCustomerID string
	ID                         string
	City                       string
	State                      string
	ZipCode                    string
	Country                    string
	BelongsToUser              string
	Name                       string
	AddressLine1               string
	BillingStatus              string
	ContactPhone               string
	SubscriptionPlanID         sql.NullString
	Longitude                  sql.NullString
	Latitude                   sql.NullString
	FilteredCount              int64
	TotalCount                 int64
}

func (q *Queries) GetHouseholdsForUser(ctx context.Context, db DBTX, arg *GetHouseholdsForUserParams) ([]*GetHouseholdsForUserRow, error) {
	rows, err := db.QueryContext(ctx, getHouseholdsForUser,
		arg.UserID,
		arg.CreatedAfter,
		arg.CreatedBefore,
		arg.UpdatedAfter,
		arg.UpdatedBefore,
		arg.QueryOffset,
		arg.QueryLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetHouseholdsForUserRow{}
	for rows.Next() {
		var i GetHouseholdsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.BillingStatus,
			&i.ContactPhone,
			&i.AddressLine1,
			&i.AddressLine2,
			&i.City,
			&i.State,
			&i.ZipCode,
			&i.Country,
			&i.Latitude,
			&i.Longitude,
			&i.PaymentProcessorCustomerID,
			&i.SubscriptionPlanID,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.BelongsToUser,
			&i.FilteredCount,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHousehold = `-- name: UpdateHousehold :execrows

UPDATE households
SET
	name = $1,
	contact_phone = $2,
	address_line_1 = $3,
	address_line_2 = $4,
	city = $5,
	state = $6,
	zip_code = $7,
	country = $8,
	latitude = $9,
    longitude =  $10,
	last_updated_at = NOW()
WHERE archived_at IS NULL
	AND belongs_to_user = $11
	AND id = $12
`

type UpdateHouseholdParams struct {
	Name          string
	ContactPhone  string
	AddressLine1  string
	AddressLine2  string
	City          string
	State         string
	ZipCode       string
	Country       string
	BelongsToUser string
	ID            string
	Latitude      sql.NullString
	Longitude     sql.NullString
}

func (q *Queries) UpdateHousehold(ctx context.Context, db DBTX, arg *UpdateHouseholdParams) (int64, error) {
	result, err := db.ExecContext(ctx, updateHousehold,
		arg.Name,
		arg.ContactPhone,
		arg.AddressLine1,
		arg.AddressLine2,
		arg.City,
		arg.State,
		arg.ZipCode,
		arg.Country,
		arg.Latitude,
		arg.Longitude,
		arg.BelongsToUser,
		arg.ID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateHouseholdWebhookEncryptionKey = `-- name: UpdateHouseholdWebhookEncryptionKey :execrows

UPDATE households
SET
    webhook_hmac_secret = $1,
    last_updated_at = NOW()
WHERE archived_at IS NULL
    AND belongs_to_user = $2
    AND id = $3
`

type UpdateHouseholdWebhookEncryptionKeyParams struct {
	WebhookHmacSecret string
	BelongsToUser     string
	ID                string
}

func (q *Queries) UpdateHouseholdWebhookEncryptionKey(ctx context.Context, db DBTX, arg *UpdateHouseholdWebhookEncryptionKeyParams) (int64, error) {
	result, err := db.ExecContext(ctx, updateHouseholdWebhookEncryptionKey, arg.WebhookHmacSecret, arg.BelongsToUser, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
