// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: archive.sql

package generated

import (
	"context"
	"database/sql"
)

const ArchiveHousehold = `-- name: ArchiveHousehold :exec

UPDATE households SET last_updated_at = NOW(), archived_at = NOW() WHERE archived_at IS NULL AND belongs_to_user = $1 AND id = $2
`

type ArchiveHouseholdParams struct {
	BelongsToUser string `db:"belongs_to_user"`
	ID            string `db:"id"`
}

func (q *Queries) ArchiveHousehold(ctx context.Context, db DBTX, arg *ArchiveHouseholdParams) error {
	_, err := db.ExecContext(ctx, ArchiveHousehold, arg.BelongsToUser, arg.ID)
	return err
}

const ArchiveHouseholdInstrumentOwnership = `-- name: ArchiveHouseholdInstrumentOwnership :exec

UPDATE household_instrument_ownerships SET archived_at = NOW() WHERE archived_at IS NULL AND id = $1 AND belongs_to_household = $2
`

type ArchiveHouseholdInstrumentOwnershipParams struct {
	ID                 string `db:"id"`
	BelongsToHousehold string `db:"belongs_to_household"`
}

func (q *Queries) ArchiveHouseholdInstrumentOwnership(ctx context.Context, db DBTX, arg *ArchiveHouseholdInstrumentOwnershipParams) error {
	_, err := db.ExecContext(ctx, ArchiveHouseholdInstrumentOwnership, arg.ID, arg.BelongsToHousehold)
	return err
}

const ArchiveMeal = `-- name: ArchiveMeal :exec

UPDATE meals SET archived_at = NOW() WHERE archived_at IS NULL AND created_by_user = $1 AND id = $2
`

type ArchiveMealParams struct {
	CreatedByUser string `db:"created_by_user"`
	ID            string `db:"id"`
}

func (q *Queries) ArchiveMeal(ctx context.Context, db DBTX, arg *ArchiveMealParams) error {
	_, err := db.ExecContext(ctx, ArchiveMeal, arg.CreatedByUser, arg.ID)
	return err
}

const ArchiveMealPlan = `-- name: ArchiveMealPlan :exec

UPDATE meal_plans SET archived_at = NOW() WHERE archived_at IS NULL AND belongs_to_household = $1 AND id = $2
`

type ArchiveMealPlanParams struct {
	BelongsToHousehold string `db:"belongs_to_household"`
	ID                 string `db:"id"`
}

func (q *Queries) ArchiveMealPlan(ctx context.Context, db DBTX, arg *ArchiveMealPlanParams) error {
	_, err := db.ExecContext(ctx, ArchiveMealPlan, arg.BelongsToHousehold, arg.ID)
	return err
}

const ArchiveMealPlanEvent = `-- name: ArchiveMealPlanEvent :exec

UPDATE meal_plan_events SET archived_at = NOW() WHERE archived_at IS NULL AND id = $1 AND belongs_to_meal_plan = $2
`

type ArchiveMealPlanEventParams struct {
	ID                string `db:"id"`
	BelongsToMealPlan string `db:"belongs_to_meal_plan"`
}

func (q *Queries) ArchiveMealPlanEvent(ctx context.Context, db DBTX, arg *ArchiveMealPlanEventParams) error {
	_, err := db.ExecContext(ctx, ArchiveMealPlanEvent, arg.ID, arg.BelongsToMealPlan)
	return err
}

const ArchiveMealPlanGroceryListItem = `-- name: ArchiveMealPlanGroceryListItem :exec

UPDATE meal_plan_grocery_list_items SET archived_at = NOW() WHERE archived_at IS NULL AND id = $1
`

func (q *Queries) ArchiveMealPlanGroceryListItem(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, ArchiveMealPlanGroceryListItem, id)
	return err
}

const ArchiveMealPlanOption = `-- name: ArchiveMealPlanOption :exec

UPDATE
	meal_plan_options
SET
	archived_at = NOW()
WHERE
	archived_at IS NULL
	AND belongs_to_meal_plan_event = $1
	AND id = $2
`

type ArchiveMealPlanOptionParams struct {
	BelongsToMealPlanEvent sql.NullString `db:"belongs_to_meal_plan_event"`
	ID                     string         `db:"id"`
}

func (q *Queries) ArchiveMealPlanOption(ctx context.Context, db DBTX, arg *ArchiveMealPlanOptionParams) error {
	_, err := db.ExecContext(ctx, ArchiveMealPlanOption, arg.BelongsToMealPlanEvent, arg.ID)
	return err
}

const ArchiveMealPlanOptionVote = `-- name: ArchiveMealPlanOptionVote :exec

UPDATE meal_plan_option_votes SET archived_at = NOW() WHERE archived_at IS NULL AND belongs_to_meal_plan_option = $1 AND id = $2
`

type ArchiveMealPlanOptionVoteParams struct {
	BelongsToMealPlanOption string `db:"belongs_to_meal_plan_option"`
	ID                      string `db:"id"`
}

func (q *Queries) ArchiveMealPlanOptionVote(ctx context.Context, db DBTX, arg *ArchiveMealPlanOptionVoteParams) error {
	_, err := db.ExecContext(ctx, ArchiveMealPlanOptionVote, arg.BelongsToMealPlanOption, arg.ID)
	return err
}

const ArchiveOAuth2Client = `-- name: ArchiveOAuth2Client :exec

UPDATE oauth2_clients SET
	archived_at = NOW()
WHERE archived_at IS NULL
	AND id = $1
`

func (q *Queries) ArchiveOAuth2Client(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, ArchiveOAuth2Client, id)
	return err
}

const ArchiveRecipe = `-- name: ArchiveRecipe :exec

UPDATE recipes SET archived_at = NOW() WHERE archived_at IS NULL AND created_by_user = $1 AND id = $2
`

type ArchiveRecipeParams struct {
	CreatedByUser string `db:"created_by_user"`
	ID            string `db:"id"`
}

func (q *Queries) ArchiveRecipe(ctx context.Context, db DBTX, arg *ArchiveRecipeParams) error {
	_, err := db.ExecContext(ctx, ArchiveRecipe, arg.CreatedByUser, arg.ID)
	return err
}

const ArchiveRecipeMedia = `-- name: ArchiveRecipeMedia :exec

UPDATE recipe_media SET archived_at = NOW() WHERE archived_at IS NULL AND id = $1
`

func (q *Queries) ArchiveRecipeMedia(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, ArchiveRecipeMedia, id)
	return err
}

const ArchiveRecipePrepTask = `-- name: ArchiveRecipePrepTask :exec

UPDATE recipe_prep_tasks SET archived_at = NOW() WHERE archived_at IS NULL AND id = $1
`

func (q *Queries) ArchiveRecipePrepTask(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, ArchiveRecipePrepTask, id)
	return err
}

const ArchiveRecipeRating = `-- name: ArchiveRecipeRating :exec

UPDATE recipe_ratings SET archived_at = NOW() WHERE archived_at IS NULL AND id = $1
`

func (q *Queries) ArchiveRecipeRating(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, ArchiveRecipeRating, id)
	return err
}

const ArchiveRecipeStep = `-- name: ArchiveRecipeStep :exec

UPDATE recipe_steps SET archived_at = NOW() WHERE archived_at IS NULL AND belongs_to_recipe = $1 AND id = $2
`

type ArchiveRecipeStepParams struct {
	BelongsToRecipe string `db:"belongs_to_recipe"`
	ID              string `db:"id"`
}

func (q *Queries) ArchiveRecipeStep(ctx context.Context, db DBTX, arg *ArchiveRecipeStepParams) error {
	_, err := db.ExecContext(ctx, ArchiveRecipeStep, arg.BelongsToRecipe, arg.ID)
	return err
}

const ArchiveRecipeStepCompletionCondition = `-- name: ArchiveRecipeStepCompletionCondition :exec

UPDATE recipe_step_completion_conditions SET archived_at = NOW() WHERE archived_at IS NULL AND belongs_to_recipe_step = $1 AND id = $2
`

type ArchiveRecipeStepCompletionConditionParams struct {
	BelongsToRecipeStep string `db:"belongs_to_recipe_step"`
	ID                  string `db:"id"`
}

func (q *Queries) ArchiveRecipeStepCompletionCondition(ctx context.Context, db DBTX, arg *ArchiveRecipeStepCompletionConditionParams) error {
	_, err := db.ExecContext(ctx, ArchiveRecipeStepCompletionCondition, arg.BelongsToRecipeStep, arg.ID)
	return err
}

const ArchiveRecipeStepIngredient = `-- name: ArchiveRecipeStepIngredient :exec

UPDATE recipe_step_ingredients SET archived_at = NOW() WHERE archived_at IS NULL AND belongs_to_recipe_step = $1 AND id = $2
`

type ArchiveRecipeStepIngredientParams struct {
	BelongsToRecipeStep string `db:"belongs_to_recipe_step"`
	ID                  string `db:"id"`
}

func (q *Queries) ArchiveRecipeStepIngredient(ctx context.Context, db DBTX, arg *ArchiveRecipeStepIngredientParams) error {
	_, err := db.ExecContext(ctx, ArchiveRecipeStepIngredient, arg.BelongsToRecipeStep, arg.ID)
	return err
}

const ArchiveRecipeStepInstrument = `-- name: ArchiveRecipeStepInstrument :exec

UPDATE recipe_step_instruments SET archived_at = NOW() WHERE archived_at IS NULL AND belongs_to_recipe_step = $1 AND id = $2
`

type ArchiveRecipeStepInstrumentParams struct {
	BelongsToRecipeStep string `db:"belongs_to_recipe_step"`
	ID                  string `db:"id"`
}

func (q *Queries) ArchiveRecipeStepInstrument(ctx context.Context, db DBTX, arg *ArchiveRecipeStepInstrumentParams) error {
	_, err := db.ExecContext(ctx, ArchiveRecipeStepInstrument, arg.BelongsToRecipeStep, arg.ID)
	return err
}

const ArchiveRecipeStepProduct = `-- name: ArchiveRecipeStepProduct :exec

UPDATE recipe_step_products SET archived_at = NOW() WHERE archived_at IS NULL AND belongs_to_recipe_step = $1 AND id = $2
`

type ArchiveRecipeStepProductParams struct {
	BelongsToRecipeStep string `db:"belongs_to_recipe_step"`
	ID                  string `db:"id"`
}

func (q *Queries) ArchiveRecipeStepProduct(ctx context.Context, db DBTX, arg *ArchiveRecipeStepProductParams) error {
	_, err := db.ExecContext(ctx, ArchiveRecipeStepProduct, arg.BelongsToRecipeStep, arg.ID)
	return err
}

const ArchiveRecipeStepVessel = `-- name: ArchiveRecipeStepVessel :exec

UPDATE recipe_step_vessels SET archived_at = NOW() WHERE archived_at IS NULL AND belongs_to_recipe_step = $1 AND id = $2
`

type ArchiveRecipeStepVesselParams struct {
	BelongsToRecipeStep string `db:"belongs_to_recipe_step"`
	ID                  string `db:"id"`
}

func (q *Queries) ArchiveRecipeStepVessel(ctx context.Context, db DBTX, arg *ArchiveRecipeStepVesselParams) error {
	_, err := db.ExecContext(ctx, ArchiveRecipeStepVessel, arg.BelongsToRecipeStep, arg.ID)
	return err
}

const ArchiveServiceSetting = `-- name: ArchiveServiceSetting :exec

UPDATE service_settings
SET archived_at = NOW()
    WHERE id = $1
`

func (q *Queries) ArchiveServiceSetting(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, ArchiveServiceSetting, id)
	return err
}

const ArchiveServiceSettingConfiguration = `-- name: ArchiveServiceSettingConfiguration :exec

UPDATE service_setting_configurations SET archived_at = NOW() WHERE archived_at IS NULL AND id = $1
`

func (q *Queries) ArchiveServiceSettingConfiguration(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, ArchiveServiceSettingConfiguration, id)
	return err
}

const ArchiveUser = `-- name: ArchiveUser :exec

UPDATE users SET
	archived_at = NOW()
WHERE archived_at IS NULL
	AND id = $1
`

func (q *Queries) ArchiveUser(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, ArchiveUser, id)
	return err
}

const ArchiveUserIngredientPreference = `-- name: ArchiveUserIngredientPreference :exec

UPDATE user_ingredient_preferences SET archived_at = NOW() WHERE archived_at IS NULL AND id = $1 AND belongs_to_user = $2
`

type ArchiveUserIngredientPreferenceParams struct {
	ID            string `db:"id"`
	BelongsToUser string `db:"belongs_to_user"`
}

func (q *Queries) ArchiveUserIngredientPreference(ctx context.Context, db DBTX, arg *ArchiveUserIngredientPreferenceParams) error {
	_, err := db.ExecContext(ctx, ArchiveUserIngredientPreference, arg.ID, arg.BelongsToUser)
	return err
}

const ArchiveValidIngredient = `-- name: ArchiveValidIngredient :exec

UPDATE valid_ingredients SET archived_at = NOW() WHERE archived_at IS NULL AND id = $1
`

func (q *Queries) ArchiveValidIngredient(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, ArchiveValidIngredient, id)
	return err
}

const ArchiveValidIngredientGroup = `-- name: ArchiveValidIngredientGroup :exec

UPDATE valid_ingredient_groups SET archived_at = NOW() WHERE archived_at IS NULL AND id = $1
`

func (q *Queries) ArchiveValidIngredientGroup(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, ArchiveValidIngredientGroup, id)
	return err
}

const ArchiveValidIngredientMeasurementUnit = `-- name: ArchiveValidIngredientMeasurementUnit :exec

UPDATE valid_ingredient_measurement_units SET archived_at = NOW() WHERE archived_at IS NULL AND id = $1
`

func (q *Queries) ArchiveValidIngredientMeasurementUnit(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, ArchiveValidIngredientMeasurementUnit, id)
	return err
}

const ArchiveValidIngredientPreparation = `-- name: ArchiveValidIngredientPreparation :exec

UPDATE valid_ingredient_preparations SET archived_at = NOW() WHERE archived_at IS NULL AND id = $1
`

func (q *Queries) ArchiveValidIngredientPreparation(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, ArchiveValidIngredientPreparation, id)
	return err
}

const ArchiveValidIngredientState = `-- name: ArchiveValidIngredientState :exec

UPDATE valid_ingredient_states SET archived_at = NOW() WHERE archived_at IS NULL AND id = $1
`

func (q *Queries) ArchiveValidIngredientState(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, ArchiveValidIngredientState, id)
	return err
}

const ArchiveValidIngredientStateIngredient = `-- name: ArchiveValidIngredientStateIngredient :exec

UPDATE valid_ingredient_state_ingredients SET archived_at = NOW() WHERE archived_at IS NULL AND id = $1
`

func (q *Queries) ArchiveValidIngredientStateIngredient(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, ArchiveValidIngredientStateIngredient, id)
	return err
}

const ArchiveValidInstrument = `-- name: ArchiveValidInstrument :exec

UPDATE valid_instruments SET archived_at = NOW() WHERE archived_at IS NULL AND id = $1
`

func (q *Queries) ArchiveValidInstrument(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, ArchiveValidInstrument, id)
	return err
}

const ArchiveValidMeasurementConversion = `-- name: ArchiveValidMeasurementConversion :exec

UPDATE valid_measurement_conversions SET archived_at = NOW() WHERE archived_at IS NULL AND id = $1
`

func (q *Queries) ArchiveValidMeasurementConversion(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, ArchiveValidMeasurementConversion, id)
	return err
}

const ArchiveValidMeasurementUnit = `-- name: ArchiveValidMeasurementUnit :exec

UPDATE valid_measurement_units SET archived_at = NOW() WHERE archived_at IS NULL AND id = $1
`

func (q *Queries) ArchiveValidMeasurementUnit(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, ArchiveValidMeasurementUnit, id)
	return err
}

const ArchiveValidPreparation = `-- name: ArchiveValidPreparation :exec

UPDATE valid_preparations SET archived_at = NOW() WHERE archived_at IS NULL AND id = $1
`

func (q *Queries) ArchiveValidPreparation(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, ArchiveValidPreparation, id)
	return err
}

const ArchiveValidPreparationInstrument = `-- name: ArchiveValidPreparationInstrument :exec

UPDATE valid_preparation_instruments SET archived_at = NOW() WHERE archived_at IS NULL AND id = $1
`

func (q *Queries) ArchiveValidPreparationInstrument(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, ArchiveValidPreparationInstrument, id)
	return err
}

const ArchiveValidPreparationVessel = `-- name: ArchiveValidPreparationVessel :exec

UPDATE valid_preparation_vessels SET archived_at = NOW() WHERE archived_at IS NULL AND id = $1
`

func (q *Queries) ArchiveValidPreparationVessel(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, ArchiveValidPreparationVessel, id)
	return err
}

const ArchiveValidVessel = `-- name: ArchiveValidVessel :exec

UPDATE valid_vessels SET archived_at = NOW() WHERE archived_at IS NULL AND id = $1
`

func (q *Queries) ArchiveValidVessel(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, ArchiveValidVessel, id)
	return err
}

const ArchiveWebhook = `-- name: ArchiveWebhook :exec

UPDATE webhooks
SET
	last_updated_at = NOW(),
	archived_at = NOW()
WHERE archived_at IS NULL
	AND belongs_to_household = $1
	AND id = $2
`

type ArchiveWebhookParams struct {
	BelongsToHousehold string `db:"belongs_to_household"`
	ID                 string `db:"id"`
}

func (q *Queries) ArchiveWebhook(ctx context.Context, db DBTX, arg *ArchiveWebhookParams) error {
	_, err := db.ExecContext(ctx, ArchiveWebhook, arg.BelongsToHousehold, arg.ID)
	return err
}
