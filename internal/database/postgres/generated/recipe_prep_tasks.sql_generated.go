// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: recipe_prep_tasks.sql

package generated

import (
	"context"
	"database/sql"
)

const archiveRecipePrepTask = `-- name: ArchiveRecipePrepTask :exec

UPDATE recipe_prep_tasks SET archived_at = NOW() WHERE archived_at IS NULL AND id = $1
`

func (q *Queries) ArchiveRecipePrepTask(ctx context.Context, db DBTX, id string) error {
	_, err := db.ExecContext(ctx, archiveRecipePrepTask, id)
	return err
}

const checkRecipePrepTaskExistence = `-- name: CheckRecipePrepTaskExistence :one

SELECT EXISTS (
	SELECT recipe_prep_tasks.id
	FROM recipe_prep_tasks
	JOIN recipes ON recipe_prep_tasks.belongs_to_recipe=recipes.id
	WHERE recipe_prep_tasks.archived_at IS NULL
	  AND recipe_prep_tasks.belongs_to_recipe = $1
	  AND recipe_prep_tasks.id = $2
	  AND recipes.archived_at IS NULL
	  AND recipes.id = $1
)
`

type CheckRecipePrepTaskExistenceParams struct {
	BelongsToRecipe string
	ID              string
}

func (q *Queries) CheckRecipePrepTaskExistence(ctx context.Context, db DBTX, arg *CheckRecipePrepTaskExistenceParams) (bool, error) {
	row := db.QueryRowContext(ctx, checkRecipePrepTaskExistence, arg.BelongsToRecipe, arg.ID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createRecipePrepTask = `-- name: CreateRecipePrepTask :exec

INSERT INTO recipe_prep_tasks (id,name,description,notes,optional,explicit_storage_instructions,minimum_time_buffer_before_recipe_in_seconds,maximum_time_buffer_before_recipe_in_seconds,storage_type,minimum_storage_temperature_in_celsius,maximum_storage_temperature_in_celsius,belongs_to_recipe)
VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12)
`

type CreateRecipePrepTaskParams struct {
	ID                                     string
	Name                                   string
	Description                            string
	Notes                                  string
	ExplicitStorageInstructions            string
	BelongsToRecipe                        string
	StorageType                            NullStorageContainerType
	MinimumStorageTemperatureInCelsius     sql.NullString
	MaximumStorageTemperatureInCelsius     sql.NullString
	MaximumTimeBufferBeforeRecipeInSeconds sql.NullInt32
	MinimumTimeBufferBeforeRecipeInSeconds int32
	Optional                               bool
}

func (q *Queries) CreateRecipePrepTask(ctx context.Context, db DBTX, arg *CreateRecipePrepTaskParams) error {
	_, err := db.ExecContext(ctx, createRecipePrepTask,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Notes,
		arg.Optional,
		arg.ExplicitStorageInstructions,
		arg.MinimumTimeBufferBeforeRecipeInSeconds,
		arg.MaximumTimeBufferBeforeRecipeInSeconds,
		arg.StorageType,
		arg.MinimumStorageTemperatureInCelsius,
		arg.MaximumStorageTemperatureInCelsius,
		arg.BelongsToRecipe,
	)
	return err
}

const getRecipePrepTask = `-- name: GetRecipePrepTask :one

SELECT
	recipe_prep_tasks.id,
	recipe_prep_tasks.name,
	recipe_prep_tasks.description,
	recipe_prep_tasks.notes,
	recipe_prep_tasks.optional,
	recipe_prep_tasks.explicit_storage_instructions,
	recipe_prep_tasks.minimum_time_buffer_before_recipe_in_seconds,
	recipe_prep_tasks.maximum_time_buffer_before_recipe_in_seconds,
	recipe_prep_tasks.storage_type,
	recipe_prep_tasks.minimum_storage_temperature_in_celsius,
	recipe_prep_tasks.maximum_storage_temperature_in_celsius,
	recipe_prep_tasks.belongs_to_recipe,
	recipe_prep_tasks.created_at,
	recipe_prep_tasks.last_updated_at,
	recipe_prep_tasks.archived_at,
	recipe_prep_task_steps.id,
	recipe_prep_task_steps.belongs_to_recipe_step,
	recipe_prep_task_steps.belongs_to_recipe_prep_task,
	recipe_prep_task_steps.satisfies_recipe_step
FROM recipe_prep_tasks
	 FULL OUTER JOIN recipe_prep_task_steps ON recipe_prep_tasks.id=recipe_prep_task_steps.belongs_to_recipe_prep_task
WHERE recipe_prep_tasks.archived_at IS NULL
	AND recipe_prep_tasks.id = $1
	AND recipe_prep_tasks.archived_at IS NULL
`

type GetRecipePrepTaskRow struct {
	CreatedAt                              sql.NullTime
	ArchivedAt                             sql.NullTime
	LastUpdatedAt                          sql.NullTime
	StorageType                            NullStorageContainerType
	Description                            sql.NullString
	ExplicitStorageInstructions            sql.NullString
	BelongsToRecipePrepTask                sql.NullString
	BelongsToRecipeStep                    sql.NullString
	ID                                     sql.NullString
	MinimumStorageTemperatureInCelsius     sql.NullString
	MaximumStorageTemperatureInCelsius     sql.NullString
	BelongsToRecipe                        sql.NullString
	Notes                                  sql.NullString
	ID_2                                   sql.NullString
	Name                                   sql.NullString
	MaximumTimeBufferBeforeRecipeInSeconds sql.NullInt32
	MinimumTimeBufferBeforeRecipeInSeconds sql.NullInt32
	Optional                               sql.NullBool
	SatisfiesRecipeStep                    sql.NullBool
}

func (q *Queries) GetRecipePrepTask(ctx context.Context, db DBTX, id string) (*GetRecipePrepTaskRow, error) {
	row := db.QueryRowContext(ctx, getRecipePrepTask, id)
	var i GetRecipePrepTaskRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Notes,
		&i.Optional,
		&i.ExplicitStorageInstructions,
		&i.MinimumTimeBufferBeforeRecipeInSeconds,
		&i.MaximumTimeBufferBeforeRecipeInSeconds,
		&i.StorageType,
		&i.MinimumStorageTemperatureInCelsius,
		&i.MaximumStorageTemperatureInCelsius,
		&i.BelongsToRecipe,
		&i.CreatedAt,
		&i.LastUpdatedAt,
		&i.ArchivedAt,
		&i.ID_2,
		&i.BelongsToRecipeStep,
		&i.BelongsToRecipePrepTask,
		&i.SatisfiesRecipeStep,
	)
	return &i, err
}

const listAllRecipePrepTasksByRecipe = `-- name: ListAllRecipePrepTasksByRecipe :many

SELECT
	recipe_prep_tasks.id,
	recipe_prep_tasks.name,
	recipe_prep_tasks.description,
	recipe_prep_tasks.notes,
	recipe_prep_tasks.optional,
	recipe_prep_tasks.explicit_storage_instructions,
	recipe_prep_tasks.minimum_time_buffer_before_recipe_in_seconds,
	recipe_prep_tasks.maximum_time_buffer_before_recipe_in_seconds,
	recipe_prep_tasks.storage_type,
	recipe_prep_tasks.minimum_storage_temperature_in_celsius,
	recipe_prep_tasks.maximum_storage_temperature_in_celsius,
	recipe_prep_tasks.belongs_to_recipe,
	recipe_prep_tasks.created_at,
	recipe_prep_tasks.last_updated_at,
	recipe_prep_tasks.archived_at,
	recipe_prep_task_steps.id,
	recipe_prep_task_steps.belongs_to_recipe_step,
	recipe_prep_task_steps.belongs_to_recipe_prep_task,
	recipe_prep_task_steps.satisfies_recipe_step
FROM recipe_prep_tasks
	 FULL OUTER JOIN recipe_prep_task_steps ON recipe_prep_task_steps.belongs_to_recipe_prep_task=recipe_prep_tasks.id
	 FULL OUTER JOIN recipe_steps ON recipe_prep_task_steps.belongs_to_recipe_step=recipe_steps.id
	 FULL OUTER JOIN recipes ON recipe_prep_tasks.belongs_to_recipe=recipes.id
WHERE recipe_prep_tasks.archived_at IS NULL
  AND recipe_steps.archived_at IS NULL
  AND recipes.archived_at IS NULL
  AND recipes.id = $1
  AND recipe_steps.belongs_to_recipe = $1
`

type ListAllRecipePrepTasksByRecipeRow struct {
	CreatedAt                              sql.NullTime
	ArchivedAt                             sql.NullTime
	LastUpdatedAt                          sql.NullTime
	StorageType                            NullStorageContainerType
	Description                            sql.NullString
	ExplicitStorageInstructions            sql.NullString
	BelongsToRecipePrepTask                sql.NullString
	BelongsToRecipeStep                    sql.NullString
	ID                                     sql.NullString
	MinimumStorageTemperatureInCelsius     sql.NullString
	MaximumStorageTemperatureInCelsius     sql.NullString
	BelongsToRecipe                        sql.NullString
	Notes                                  sql.NullString
	ID_2                                   sql.NullString
	Name                                   sql.NullString
	MaximumTimeBufferBeforeRecipeInSeconds sql.NullInt32
	MinimumTimeBufferBeforeRecipeInSeconds sql.NullInt32
	Optional                               sql.NullBool
	SatisfiesRecipeStep                    sql.NullBool
}

func (q *Queries) ListAllRecipePrepTasksByRecipe(ctx context.Context, db DBTX, id string) ([]*ListAllRecipePrepTasksByRecipeRow, error) {
	rows, err := db.QueryContext(ctx, listAllRecipePrepTasksByRecipe, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListAllRecipePrepTasksByRecipeRow{}
	for rows.Next() {
		var i ListAllRecipePrepTasksByRecipeRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Notes,
			&i.Optional,
			&i.ExplicitStorageInstructions,
			&i.MinimumTimeBufferBeforeRecipeInSeconds,
			&i.MaximumTimeBufferBeforeRecipeInSeconds,
			&i.StorageType,
			&i.MinimumStorageTemperatureInCelsius,
			&i.MaximumStorageTemperatureInCelsius,
			&i.BelongsToRecipe,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.ID_2,
			&i.BelongsToRecipeStep,
			&i.BelongsToRecipePrepTask,
			&i.SatisfiesRecipeStep,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRecipePrepTask = `-- name: UpdateRecipePrepTask :exec

UPDATE recipe_prep_tasks SET
	 name = $1,
	 description = $2,
	 notes = $3,
	 optional = $4,
	 explicit_storage_instructions = $5,
	 minimum_time_buffer_before_recipe_in_seconds = $6,
	 maximum_time_buffer_before_recipe_in_seconds = $7,
	 storage_type = $8,
	 minimum_storage_temperature_in_celsius = $9,
	 maximum_storage_temperature_in_celsius = $10,
	 belongs_to_recipe = $11,
	 last_updated_at = NOW()
WHERE archived_at IS NULL AND id = $12
`

type UpdateRecipePrepTaskParams struct {
	Name                                   string
	Description                            string
	Notes                                  string
	ExplicitStorageInstructions            string
	BelongsToRecipe                        string
	ID                                     string
	StorageType                            NullStorageContainerType
	MinimumStorageTemperatureInCelsius     sql.NullString
	MaximumStorageTemperatureInCelsius     sql.NullString
	MaximumTimeBufferBeforeRecipeInSeconds sql.NullInt32
	MinimumTimeBufferBeforeRecipeInSeconds int32
	Optional                               bool
}

func (q *Queries) UpdateRecipePrepTask(ctx context.Context, db DBTX, arg *UpdateRecipePrepTaskParams) error {
	_, err := db.ExecContext(ctx, updateRecipePrepTask,
		arg.Name,
		arg.Description,
		arg.Notes,
		arg.Optional,
		arg.ExplicitStorageInstructions,
		arg.MinimumTimeBufferBeforeRecipeInSeconds,
		arg.MaximumTimeBufferBeforeRecipeInSeconds,
		arg.StorageType,
		arg.MinimumStorageTemperatureInCelsius,
		arg.MaximumStorageTemperatureInCelsius,
		arg.BelongsToRecipe,
		arg.ID,
	)
	return err
}
