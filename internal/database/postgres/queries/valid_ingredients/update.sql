-- name: UpdateValidIngredient :exec

UPDATE valid_ingredients SET
	name = sqlc.arg(name),
	description = sqlc.arg(description),
	warning = sqlc.arg(warning),
	contains_egg = sqlc.arg(contains_egg),
	contains_dairy = sqlc.arg(contains_dairy),
	contains_peanut = sqlc.arg(contains_peanut),
	contains_tree_nut = sqlc.arg(contains_tree_nut),
	contains_soy = sqlc.arg(contains_soy),
	contains_wheat = sqlc.arg(contains_wheat),
	contains_shellfish = sqlc.arg(contains_shellfish),
	contains_sesame = sqlc.arg(contains_sesame),
	contains_fish = sqlc.arg(contains_fish),
	contains_gluten = sqlc.arg(contains_gluten),
	animal_flesh = sqlc.arg(animal_flesh),
	volumetric = sqlc.arg(volumetric)::bool,
	is_liquid = sqlc.arg(is_liquid),
	icon_path = sqlc.arg(icon_path),
	animal_derived = sqlc.arg(animal_derived),
	plural_name = sqlc.arg(plural_name),
	restrict_to_preparations = sqlc.arg(restrict_to_preparations),
	minimum_ideal_storage_temperature_in_celsius = sqlc.narg(minimum_ideal_storage_temperature_in_celsius)::float,
	maximum_ideal_storage_temperature_in_celsius = sqlc.narg(maximum_ideal_storage_temperature_in_celsius)::float,
	storage_instructions = sqlc.arg(storage_instructions),
	slug = sqlc.arg(slug),
	contains_alcohol = sqlc.arg(contains_alcohol),
	shopping_suggestions = sqlc.arg(shopping_suggestions),
    is_starch = sqlc.arg(is_starch),
    is_protein = sqlc.arg(is_protein),
    is_grain = sqlc.arg(is_grain),
    is_fruit = sqlc.arg(is_fruit),
    is_salt = sqlc.arg(is_salt),
    is_fat = sqlc.arg(is_fat),
    is_acid = sqlc.arg(is_acid),
    is_heat = sqlc.arg(is_heat),
	last_updated_at = NOW()
WHERE archived_at IS NULL AND id = sqlc.arg(id);
