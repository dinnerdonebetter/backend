-- name: CreateValidIngredient :exec

INSERT INTO valid_ingredients
(
	id,
	"name",
	description,
	warning,
	contains_egg,
	contains_dairy,
	contains_peanut,
	contains_tree_nut,
	contains_soy,
	contains_wheat,
	contains_shellfish,
	contains_sesame,
	contains_fish,
	contains_gluten,
	animal_flesh,
	volumetric,
	is_liquid,
	icon_path,
	animal_derived,
	plural_name,
	restrict_to_preparations,
	minimum_ideal_storage_temperature_in_celsius,
	maximum_ideal_storage_temperature_in_celsius,
	storage_instructions,
	slug,
	contains_alcohol,
	shopping_suggestions,
    is_starch,
    is_protein,
    is_grain,
    is_fruit,
    is_salt,
    is_fat,
    is_acid,
    is_heat
) VALUES (
    sqlc.arg(id),
    sqlc.arg(name),
    sqlc.arg(description),
    sqlc.arg(warning),
    sqlc.arg(contains_egg),
    sqlc.arg(contains_dairy),
    sqlc.arg(contains_peanut),
    sqlc.arg(contains_tree_nut),
    sqlc.arg(contains_soy),
    sqlc.arg(contains_wheat),
    sqlc.arg(contains_shellfish),
    sqlc.arg(contains_sesame),
    sqlc.arg(contains_fish),
    sqlc.arg(contains_gluten),
    sqlc.arg(animal_flesh),
    sqlc.arg(volumetric),
    sqlc.arg(is_liquid),
    sqlc.arg(icon_path),
    sqlc.arg(animal_derived),
    sqlc.arg(plural_name),
    sqlc.arg(restrict_to_preparations),
    sqlc.narg(minimum_ideal_storage_temperature_in_celsius)::float,
    sqlc.narg(maximum_ideal_storage_temperature_in_celsius)::float,
    sqlc.arg(storage_instructions),
    sqlc.arg(slug),
    sqlc.arg(contains_alcohol),
    sqlc.arg(shopping_suggestions),
    sqlc.arg(is_starch),
    sqlc.arg(is_protein),
    sqlc.arg(is_grain),
    sqlc.arg(is_fruit),
    sqlc.arg(is_salt),
    sqlc.arg(is_fat),
    sqlc.arg(is_acid),
    sqlc.arg(is_heat)
);
