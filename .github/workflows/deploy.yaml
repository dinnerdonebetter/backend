on: [pull_request]
name: Deploy
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.17.3'

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials from Test account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::111111111111:role/my-github-actions-role-test
          aws-region: us-east-1


  #     - name: Build writer lambda
  #       run: go build -o writer github.com/prixfixeco/api_server/cmd/workers/lambdas/writes

  #     - name: Zip writer lambda
  #       run: zip writer_lambda.zip writer

  #     - name: Upload writer lambda
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: writer
  #         path: writer_lambda.zip
  #         retention-days: 1

  #     - name: Build updater lambda
  #       run: go build -o updater github.com/prixfixeco/api_server/cmd/workers/lambdas/updates

  #     - name: Zip updater lambda
  #       run: zip updater_lambda.zip updater

  #     - name: Upload updater lambda
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: updater
  #         path: updater_lambda.zip
  #         retention-days: 1

  #     - name: Build archiver lambda
  #       run: go build -o archiver github.com/prixfixeco/api_server/cmd/workers/lambdas/archives

  #     - name: Zip archiver lambda
  #       run: zip archiver_lambda.zip archiver

  #     - name: Upload archiver lambda
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: archiver
  #         path: archiver_lambda.zip
  #         retention-days: 1

  #     - name: Build data changes lambda
  #       run: go build -o data_changes github.com/prixfixeco/api_server/cmd/workers/lambdas/data_changes

  #     - name: Zip changes lambda
  #       run: zip data_changes_lambda.zip data_changes

  #     - name: Upload data changes lambda
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: data_changes
  #         path: data_changes_lambda.zip
  #         retention-days: 1

  #     - name: Build chores lambda
  #       run: go build -o chores github.com/prixfixeco/api_server/cmd/workers/lambdas/chores

  #     - name: Zip chores lambda
  #       run: zip chores_lambda.zip chores

  #     - name: Upload chores lambda
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: chores
  #         path: chores_lambda.zip
  #         retention-days: 1

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.11
          cli_config_credentials_token: ${{ secrets.TERRAFORM_CLOUD_API_TOKEN  }}

      - name: Terraform Init
        working-directory: environments/dev/terraform
        id: init
        run: terraform init

      - name: Terraform Format
        working-directory: environments/dev/terraform
        id: fmt
        run: terraform fmt -check

        # download lambdas, if these aren't there, then `terraform validate` fails

      # - name: Download writer lambda
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: writer
      #     path: environments/dev/terraform

      # - name: Download updater lambda
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: updater
      #     path: environments/dev/terraform

      # - name: Download archiver lambda
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: archiver
      #     path: environments/dev/terraform

      # - name: Download data changes lambda
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: data_changes
      #     path: environments/dev/terraform

      # - name: Download chores lambda
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: chores
      #     path: environments/dev/terraform

      - name: copy config file
        working-directory: environments/dev
        run: cp config_files/service-config.json terraform/service-config.json

      - name: Terraform Validate
        working-directory: environments/dev/terraform
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        working-directory: environments/dev/terraform
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: environments/dev/terraform