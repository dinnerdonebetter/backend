on: [pull_request]
name: Deploy
jobs:
  containers:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: [
          'api_server',
          'writes_worker',
          'updates_worker',
          'archives_worker',
          'data_changes_worker',
          'chores_worker',
        ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.17.3'

      - name: Install dependencies
        run: go mod vendor

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # we create all of these even though they likely already exist so that we can push to them
      - name: ensure ${{ matrix.image }} repository exists
        run: aws ecr create-repository --repository-name ${{ matrix.image }}
        continue-on-error: true

      - name: Build and tag ${{ matrix.image }} image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --tag $ECR_REGISTRY/${{ matrix.image }}:$IMAGE_TAG --file environments/dev/dockerfiles/${{ matrix.image }}.Dockerfile .
          docker build --tag $ECR_REGISTRY/${{ matrix.image }}:latest --file environments/dev/dockerfiles/${{ matrix.image }}.Dockerfile .
          
      - name: Push API server image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker push $ECR_REGISTRY/${{ matrix.image }}:$IMAGE_TAG
          docker push $ECR_REGISTRY/${{ matrix.image }}:latest

  scaffold:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.11
          cli_config_credentials_token: ${{ secrets.TERRAFORM_CLOUD_API_TOKEN  }}

      - name: Terraform Init
        working-directory: environments/dev/terraform
        id: init
        run: terraform init

      - name: Terraform Format
        working-directory: environments/dev/terraform
        id: fmt
        run: terraform fmt -check

      - name: copy config file
        working-directory: environments/dev
        run: cp config_files/service-config.json terraform/service-config.json

      - name: Terraform Validate
        working-directory: environments/dev/terraform
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        working-directory: environments/dev/terraform
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: environments/dev/terraform
        