on:
  pull_request:
    paths:
      - pkg/**
      - cmd/**
      - internal/**
      - tests/**
name: Lint go code
jobs:
 formatting:
   runs-on: ubuntu-latest
   strategy:
     matrix:
       go: [ '1.18.x' ]
   steps:
     - name: Install Go
       uses: actions/setup-go@v2
       with:
         go-version: ${{ matrix.go }}

     - name: Checkout code
       uses: actions/checkout@v2

     - name: check formatting
       run: if [ $(gofmt -l . | grep -Ev '^vendor\/' | head -c1 | wc -c) -ne 0 ]; then exit 1; fi
 lint:
   strategy:
     matrix:
       linter-version: [ 'v1.42' ]
   runs-on: ubuntu-latest
   steps:
     - name: vendor
       run: go mod vendor

     - uses: actions/checkout@v2
     - name: golangci-lint
       uses: golangci/golangci-lint-action@v2
       with:
         # Optional: version of golangci-lint to use in form of v1.2 or v1.2.3 or `latest` to use the latest version
         version: ${{ matrix.linter-version }}

         # Optional: working directory, useful for monorepos
         # working-directory: somedir

         # Optional: golangci-lint command line arguments.
         args: --config=.golangci.yml ./...

         # Optional: show only new issues if it's a pull request. The default value is `false`.
         # only-new-issues: true

         # Optional: if set to true then the action will use pre-installed Go.
         # skip-go-installation: true

         # Optional: if set to true then the action don't cache or restore ~/go/pkg.
         # skip-pkg-cache: true

         # Optional: if set to true then the action don't cache or restore ~/.cache/go-build.
         # skip-build-cache: true