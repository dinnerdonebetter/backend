on: [pull_request]
#  push:
#    branches:
#      - dev
name: Deploy
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.17.3'

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}


  scaffold:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.2
          cli_config_credentials_token: ${{ secrets.TERRAFORM_CLOUD_API_TOKEN  }}

      - name: Terraform Init
        working-directory: environments/dev/terraform
        id: init
        run: terraform init

      - name: Terraform Format
        working-directory: environments/dev/terraform
        id: fmt
        run: terraform fmt -check

      - name: copy server config file
        working-directory: environments/dev
        run: |
          cp config_files/service-config.json terraform/service-config.json
          cp config_files/worker-config.json terraform/worker-config.json

      - name: Terraform Validate
        working-directory: environments/dev/terraform
        id: validate
        run: terraform validate -no-color

      # - name: Terraform Plan
      #   working-directory: environments/dev/terraform
      #   id: plan
      #   if: github.event_name == 'pull_request'
      #   run: terraform plan -no-color

      - name: Terraform Apply
        run: terraform apply -auto-approve
        # if: github.event_name == 'release'
        working-directory: environments/dev/terraform

  deploy:
    needs: [
      scaffold,
      build,
    ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600

      - name: Build, tag, and push server image to DOCR
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --tag registry.digitalocean.com/dev-prixfixe/api_server:latest --file environments/dev/dockerfiles/api_server.Dockerfile .
          docker push registry.digitalocean.com/dev-prixfixe/api_server:latest

      - name: Save DigitalOcean kubeconfig with short-lived credentials
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 dev

      - name: Deploy to Kubernetes Cluster
        run: kubectl apply -k environments/dev/kubernetes

      - name: Deploy to Kubernetes Cluster
        run: doctl registry kubernetes-manifest | kubectl apply -f -
