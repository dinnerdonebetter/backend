// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"context"
	"gitlab.com/prixfixe/prixfixe/database/v1"
	"gitlab.com/prixfixe/prixfixe/internal/v1/auth"
	"gitlab.com/prixfixe/prixfixe/internal/v1/config"
	"gitlab.com/prixfixe/prixfixe/internal/v1/encoding"
	"gitlab.com/prixfixe/prixfixe/internal/v1/metrics"
	"gitlab.com/prixfixe/prixfixe/server/v1"
	"gitlab.com/prixfixe/prixfixe/server/v1/http"
	auth2 "gitlab.com/prixfixe/prixfixe/services/v1/auth"
	"gitlab.com/prixfixe/prixfixe/services/v1/frontend"
	"gitlab.com/prixfixe/prixfixe/services/v1/ingredients"
	"gitlab.com/prixfixe/prixfixe/services/v1/instruments"
	"gitlab.com/prixfixe/prixfixe/services/v1/invitations"
	"gitlab.com/prixfixe/prixfixe/services/v1/iterationmedias"
	"gitlab.com/prixfixe/prixfixe/services/v1/oauth2clients"
	"gitlab.com/prixfixe/prixfixe/services/v1/preparations"
	"gitlab.com/prixfixe/prixfixe/services/v1/recipeiterations"
	"gitlab.com/prixfixe/prixfixe/services/v1/recipes"
	"gitlab.com/prixfixe/prixfixe/services/v1/recipestepevents"
	"gitlab.com/prixfixe/prixfixe/services/v1/recipestepingredients"
	"gitlab.com/prixfixe/prixfixe/services/v1/recipestepinstruments"
	"gitlab.com/prixfixe/prixfixe/services/v1/recipestepproducts"
	"gitlab.com/prixfixe/prixfixe/services/v1/recipesteps"
	"gitlab.com/prixfixe/prixfixe/services/v1/reports"
	"gitlab.com/prixfixe/prixfixe/services/v1/requiredpreparationinstruments"
	"gitlab.com/prixfixe/prixfixe/services/v1/users"
	"gitlab.com/prixfixe/prixfixe/services/v1/webhooks"
	"gitlab.com/verygoodsoftwarenotvirus/logging/v1"
	"gitlab.com/verygoodsoftwarenotvirus/newsman"
)

// Injectors from wire.go:

func BuildServer(ctx context.Context, cfg *config.ServerConfig, logger logging.Logger, database2 database.Database) (*server.Server, error) {
	bcryptHashCost := auth.ProvideBcryptHashCost()
	authenticator := auth.ProvideBcryptAuthenticator(bcryptHashCost, logger)
	userDataManager := users.ProvideUserDataManager(database2)
	clientIDFetcher := httpserver.ProvideOAuth2ServiceClientIDFetcher(logger)
	encoderDecoder := encoding.ProvideResponseEncoder()
	unitCounterProvider := metrics.ProvideUnitCounterProvider()
	service, err := oauth2clients.ProvideOAuth2ClientsService(ctx, logger, database2, authenticator, clientIDFetcher, encoderDecoder, unitCounterProvider)
	if err != nil {
		return nil, err
	}
	oAuth2ClientValidator := auth2.ProvideOAuth2ClientValidator(service)
	userIDFetcher := httpserver.ProvideAuthUserIDFetcher()
	authService := auth2.ProvideAuthService(logger, cfg, authenticator, userDataManager, oAuth2ClientValidator, userIDFetcher, encoderDecoder)
	frontendSettings := config.ProvideConfigFrontendSettings(cfg)
	frontendService := frontend.ProvideFrontendService(logger, frontendSettings)
	instrumentDataManager := instruments.ProvideInstrumentDataManager(database2)
	instrumentsUserIDFetcher := httpserver.ProvideInstrumentServiceUserIDFetcher()
	instrumentIDFetcher := httpserver.ProvideInstrumentIDFetcher(logger)
	websocketAuthFunc := auth2.ProvideWebsocketAuthFunc(authService)
	typeNameManipulationFunc := httpserver.ProvideNewsmanTypeNameManipulationFunc(logger)
	newsmanNewsman := newsman.NewNewsman(websocketAuthFunc, typeNameManipulationFunc)
	reporter := ProvideReporter(newsmanNewsman)
	instrumentsService, err := instruments.ProvideInstrumentsService(ctx, logger, instrumentDataManager, instrumentsUserIDFetcher, instrumentIDFetcher, encoderDecoder, unitCounterProvider, reporter)
	if err != nil {
		return nil, err
	}
	instrumentDataServer := instruments.ProvideInstrumentDataServer(instrumentsService)
	ingredientDataManager := ingredients.ProvideIngredientDataManager(database2)
	ingredientsUserIDFetcher := httpserver.ProvideIngredientServiceUserIDFetcher()
	ingredientIDFetcher := httpserver.ProvideIngredientIDFetcher(logger)
	ingredientsService, err := ingredients.ProvideIngredientsService(ctx, logger, ingredientDataManager, ingredientsUserIDFetcher, ingredientIDFetcher, encoderDecoder, unitCounterProvider, reporter)
	if err != nil {
		return nil, err
	}
	ingredientDataServer := ingredients.ProvideIngredientDataServer(ingredientsService)
	preparationDataManager := preparations.ProvidePreparationDataManager(database2)
	preparationsUserIDFetcher := httpserver.ProvidePreparationServiceUserIDFetcher()
	preparationIDFetcher := httpserver.ProvidePreparationIDFetcher(logger)
	preparationsService, err := preparations.ProvidePreparationsService(ctx, logger, preparationDataManager, preparationsUserIDFetcher, preparationIDFetcher, encoderDecoder, unitCounterProvider, reporter)
	if err != nil {
		return nil, err
	}
	preparationDataServer := preparations.ProvidePreparationDataServer(preparationsService)
	requiredPreparationInstrumentDataManager := requiredpreparationinstruments.ProvideRequiredPreparationInstrumentDataManager(database2)
	requiredpreparationinstrumentsUserIDFetcher := httpserver.ProvideRequiredPreparationInstrumentServiceUserIDFetcher()
	requiredPreparationInstrumentIDFetcher := httpserver.ProvideRequiredPreparationInstrumentIDFetcher(logger)
	requiredpreparationinstrumentsService, err := requiredpreparationinstruments.ProvideRequiredPreparationInstrumentsService(ctx, logger, requiredPreparationInstrumentDataManager, requiredpreparationinstrumentsUserIDFetcher, requiredPreparationInstrumentIDFetcher, encoderDecoder, unitCounterProvider, reporter)
	if err != nil {
		return nil, err
	}
	requiredPreparationInstrumentDataServer := requiredpreparationinstruments.ProvideRequiredPreparationInstrumentDataServer(requiredpreparationinstrumentsService)
	recipeDataManager := recipes.ProvideRecipeDataManager(database2)
	recipesUserIDFetcher := httpserver.ProvideRecipeServiceUserIDFetcher()
	recipeIDFetcher := httpserver.ProvideRecipeIDFetcher(logger)
	recipesService, err := recipes.ProvideRecipesService(ctx, logger, recipeDataManager, recipesUserIDFetcher, recipeIDFetcher, encoderDecoder, unitCounterProvider, reporter)
	if err != nil {
		return nil, err
	}
	recipeDataServer := recipes.ProvideRecipeDataServer(recipesService)
	recipeStepDataManager := recipesteps.ProvideRecipeStepDataManager(database2)
	recipestepsUserIDFetcher := httpserver.ProvideRecipeStepServiceUserIDFetcher()
	recipeStepIDFetcher := httpserver.ProvideRecipeStepIDFetcher(logger)
	recipestepsService, err := recipesteps.ProvideRecipeStepsService(ctx, logger, recipeStepDataManager, recipestepsUserIDFetcher, recipeStepIDFetcher, encoderDecoder, unitCounterProvider, reporter)
	if err != nil {
		return nil, err
	}
	recipeStepDataServer := recipesteps.ProvideRecipeStepDataServer(recipestepsService)
	recipeStepInstrumentDataManager := recipestepinstruments.ProvideRecipeStepInstrumentDataManager(database2)
	recipestepinstrumentsUserIDFetcher := httpserver.ProvideRecipeStepInstrumentServiceUserIDFetcher()
	recipeStepInstrumentIDFetcher := httpserver.ProvideRecipeStepInstrumentIDFetcher(logger)
	recipestepinstrumentsService, err := recipestepinstruments.ProvideRecipeStepInstrumentsService(ctx, logger, recipeStepInstrumentDataManager, recipestepinstrumentsUserIDFetcher, recipeStepInstrumentIDFetcher, encoderDecoder, unitCounterProvider, reporter)
	if err != nil {
		return nil, err
	}
	recipeStepInstrumentDataServer := recipestepinstruments.ProvideRecipeStepInstrumentDataServer(recipestepinstrumentsService)
	recipeStepIngredientDataManager := recipestepingredients.ProvideRecipeStepIngredientDataManager(database2)
	recipestepingredientsUserIDFetcher := httpserver.ProvideRecipeStepIngredientServiceUserIDFetcher()
	recipeStepIngredientIDFetcher := httpserver.ProvideRecipeStepIngredientIDFetcher(logger)
	recipestepingredientsService, err := recipestepingredients.ProvideRecipeStepIngredientsService(ctx, logger, recipeStepIngredientDataManager, recipestepingredientsUserIDFetcher, recipeStepIngredientIDFetcher, encoderDecoder, unitCounterProvider, reporter)
	if err != nil {
		return nil, err
	}
	recipeStepIngredientDataServer := recipestepingredients.ProvideRecipeStepIngredientDataServer(recipestepingredientsService)
	recipeStepProductDataManager := recipestepproducts.ProvideRecipeStepProductDataManager(database2)
	recipestepproductsUserIDFetcher := httpserver.ProvideRecipeStepProductServiceUserIDFetcher()
	recipeStepProductIDFetcher := httpserver.ProvideRecipeStepProductIDFetcher(logger)
	recipestepproductsService, err := recipestepproducts.ProvideRecipeStepProductsService(ctx, logger, recipeStepProductDataManager, recipestepproductsUserIDFetcher, recipeStepProductIDFetcher, encoderDecoder, unitCounterProvider, reporter)
	if err != nil {
		return nil, err
	}
	recipeStepProductDataServer := recipestepproducts.ProvideRecipeStepProductDataServer(recipestepproductsService)
	recipeIterationDataManager := recipeiterations.ProvideRecipeIterationDataManager(database2)
	recipeiterationsUserIDFetcher := httpserver.ProvideRecipeIterationServiceUserIDFetcher()
	recipeIterationIDFetcher := httpserver.ProvideRecipeIterationIDFetcher(logger)
	recipeiterationsService, err := recipeiterations.ProvideRecipeIterationsService(ctx, logger, recipeIterationDataManager, recipeiterationsUserIDFetcher, recipeIterationIDFetcher, encoderDecoder, unitCounterProvider, reporter)
	if err != nil {
		return nil, err
	}
	recipeIterationDataServer := recipeiterations.ProvideRecipeIterationDataServer(recipeiterationsService)
	recipeStepEventDataManager := recipestepevents.ProvideRecipeStepEventDataManager(database2)
	recipestepeventsUserIDFetcher := httpserver.ProvideRecipeStepEventServiceUserIDFetcher()
	recipeStepEventIDFetcher := httpserver.ProvideRecipeStepEventIDFetcher(logger)
	recipestepeventsService, err := recipestepevents.ProvideRecipeStepEventsService(ctx, logger, recipeStepEventDataManager, recipestepeventsUserIDFetcher, recipeStepEventIDFetcher, encoderDecoder, unitCounterProvider, reporter)
	if err != nil {
		return nil, err
	}
	recipeStepEventDataServer := recipestepevents.ProvideRecipeStepEventDataServer(recipestepeventsService)
	iterationMediaDataManager := iterationmedias.ProvideIterationMediaDataManager(database2)
	iterationmediasUserIDFetcher := httpserver.ProvideIterationMediaServiceUserIDFetcher()
	iterationMediaIDFetcher := httpserver.ProvideIterationMediaIDFetcher(logger)
	iterationmediasService, err := iterationmedias.ProvideIterationMediasService(ctx, logger, iterationMediaDataManager, iterationmediasUserIDFetcher, iterationMediaIDFetcher, encoderDecoder, unitCounterProvider, reporter)
	if err != nil {
		return nil, err
	}
	iterationMediaDataServer := iterationmedias.ProvideIterationMediaDataServer(iterationmediasService)
	invitationDataManager := invitations.ProvideInvitationDataManager(database2)
	invitationsUserIDFetcher := httpserver.ProvideInvitationServiceUserIDFetcher()
	invitationIDFetcher := httpserver.ProvideInvitationIDFetcher(logger)
	invitationsService, err := invitations.ProvideInvitationsService(ctx, logger, invitationDataManager, invitationsUserIDFetcher, invitationIDFetcher, encoderDecoder, unitCounterProvider, reporter)
	if err != nil {
		return nil, err
	}
	invitationDataServer := invitations.ProvideInvitationDataServer(invitationsService)
	reportDataManager := reports.ProvideReportDataManager(database2)
	reportsUserIDFetcher := httpserver.ProvideReportServiceUserIDFetcher()
	reportIDFetcher := httpserver.ProvideReportIDFetcher(logger)
	reportsService, err := reports.ProvideReportsService(ctx, logger, reportDataManager, reportsUserIDFetcher, reportIDFetcher, encoderDecoder, unitCounterProvider, reporter)
	if err != nil {
		return nil, err
	}
	reportDataServer := reports.ProvideReportDataServer(reportsService)
	authSettings := config.ProvideConfigAuthSettings(cfg)
	usersUserIDFetcher := httpserver.ProvideUsernameFetcher(logger)
	usersService, err := users.ProvideUsersService(ctx, authSettings, logger, database2, authenticator, usersUserIDFetcher, encoderDecoder, unitCounterProvider, reporter)
	if err != nil {
		return nil, err
	}
	userDataServer := users.ProvideUserDataServer(usersService)
	oAuth2ClientDataServer := oauth2clients.ProvideOAuth2ClientDataServer(service)
	webhookDataManager := webhooks.ProvideWebhookDataManager(database2)
	webhooksUserIDFetcher := httpserver.ProvideWebhooksUserIDFetcher()
	webhookIDFetcher := httpserver.ProvideWebhookIDFetcher(logger)
	webhooksService, err := webhooks.ProvideWebhooksService(ctx, logger, webhookDataManager, webhooksUserIDFetcher, webhookIDFetcher, encoderDecoder, unitCounterProvider, newsmanNewsman)
	if err != nil {
		return nil, err
	}
	webhookDataServer := webhooks.ProvideWebhookDataServer(webhooksService)
	httpserverServer, err := httpserver.ProvideServer(ctx, cfg, authService, frontendService, instrumentDataServer, ingredientDataServer, preparationDataServer, requiredPreparationInstrumentDataServer, recipeDataServer, recipeStepDataServer, recipeStepInstrumentDataServer, recipeStepIngredientDataServer, recipeStepProductDataServer, recipeIterationDataServer, recipeStepEventDataServer, iterationMediaDataServer, invitationDataServer, reportDataServer, userDataServer, oAuth2ClientDataServer, webhookDataServer, database2, logger, encoderDecoder, newsmanNewsman)
	if err != nil {
		return nil, err
	}
	serverServer, err := server.ProvideServer(cfg, httpserverServer)
	if err != nil {
		return nil, err
	}
	return serverServer, nil
}

// wire.go:

// ProvideReporter is an obligatory function that hopefully wire will eliminate for me one day
func ProvideReporter(n *newsman.Newsman) newsman.Reporter {
	return n
}
